{"ast":null,"code":"\"use strict\";\n\nvar _createClass = require(\"/home/conel0826/theblokc-solana-dev-bootcamp/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\nvar _classCallCheck = require(\"/home/conel0826/theblokc-solana-dev-bootcamp/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\nvar _possibleConstructorReturn = require(\"/home/conel0826/theblokc-solana-dev-bootcamp/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\nvar _getPrototypeOf = require(\"/home/conel0826/theblokc-solana-dev-bootcamp/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\nvar _inherits = require(\"/home/conel0826/theblokc-solana-dev-bootcamp/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\nvar _wrapNativeSuper = require(\"/home/conel0826/theblokc-solana-dev-bootcamp/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapNativeSuper\");\nvar _objectSpread = require(\"/home/conel0826/theblokc-solana-dev-bootcamp/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.mapToCurveSimpleSWU = exports.SWUFpSqrtRatio = exports.weierstrass = exports.weierstrassPoints = exports.DER = void 0;\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Short Weierstrass curve. The formula is: y² = x³ + ax + b\nvar mod = require(\"./modular.js\");\nvar ut = require(\"./utils.js\");\nvar utils_js_1 = require(\"./utils.js\");\nvar curve_js_1 = require(\"./curve.js\");\nfunction validatePointOpts(curve) {\n  var opts = (0, curve_js_1.validateBasic)(curve);\n  ut.validateObject(opts, {\n    a: 'field',\n    b: 'field'\n  }, {\n    allowedPrivateKeyLengths: 'array',\n    wrapPrivateKey: 'boolean',\n    isTorsionFree: 'function',\n    clearCofactor: 'function',\n    allowInfinityPoint: 'boolean',\n    fromBytes: 'function',\n    toBytes: 'function'\n  });\n  var endo = opts.endo,\n    Fp = opts.Fp,\n    a = opts.a;\n  if (endo) {\n    if (!Fp.eql(a, Fp.ZERO)) {\n      throw new Error('Endomorphism can only be defined for Koblitz curves that have a=0');\n    }\n    if (typeof endo !== 'object' || typeof endo.beta !== 'bigint' || typeof endo.splitScalar !== 'function') {\n      throw new Error('Expected endomorphism with beta: bigint and splitScalar: function');\n    }\n  }\n  return Object.freeze(_objectSpread({}, opts));\n}\n// ASN.1 DER encoding utilities\nvar b2n = ut.bytesToNumberBE,\n  h2b = ut.hexToBytes;\nexports.DER = {\n  // asn.1 DER encoding utils\n  Err: /*#__PURE__*/function (_Error) {\n    _inherits(DERErr, _Error);\n    function DERErr() {\n      var m = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      _classCallCheck(this, DERErr);\n      return _possibleConstructorReturn(this, _getPrototypeOf(DERErr).call(this, m));\n    }\n    return DERErr;\n  }(_wrapNativeSuper(Error)),\n  _parseInt: function _parseInt(data) {\n    var E = exports.DER.Err;\n    if (data.length < 2 || data[0] !== 0x02) throw new E('Invalid signature integer tag');\n    var len = data[1];\n    var res = data.subarray(2, len + 2);\n    if (!len || res.length !== len) throw new E('Invalid signature integer: wrong length');\n    // https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is 'negative' flag,\n    // since we always use positive integers here. It must always be empty:\n    // - add zero byte if exists\n    // - if next byte doesn't have a flag, leading zero is not allowed (minimal encoding)\n    if (res[0] & 128) throw new E('Invalid signature integer: negative');\n    if (res[0] === 0x00 && !(res[1] & 128)) throw new E('Invalid signature integer: unnecessary leading zero');\n    return {\n      d: b2n(res),\n      l: data.subarray(len + 2)\n    }; // d is data, l is left\n  },\n  toSig: function toSig(hex) {\n    // parse DER signature\n    var E = exports.DER.Err;\n    var data = typeof hex === 'string' ? h2b(hex) : hex;\n    if (!(data instanceof Uint8Array)) throw new Error('ui8a expected');\n    var l = data.length;\n    if (l < 2 || data[0] != 0x30) throw new E('Invalid signature tag');\n    if (data[1] !== l - 2) throw new E('Invalid signature: incorrect length');\n    var _exports$DER$_parseIn = exports.DER._parseInt(data.subarray(2)),\n      r = _exports$DER$_parseIn.d,\n      sBytes = _exports$DER$_parseIn.l;\n    var _exports$DER$_parseIn2 = exports.DER._parseInt(sBytes),\n      s = _exports$DER$_parseIn2.d,\n      rBytesLeft = _exports$DER$_parseIn2.l;\n    if (rBytesLeft.length) throw new E('Invalid signature: left bytes after parsing');\n    return {\n      r: r,\n      s: s\n    };\n  },\n  hexFromSig: function hexFromSig(sig) {\n    // Add leading zero if first byte has negative bit enabled. More details in '_parseInt'\n    var slice = function slice(s) {\n      return Number.parseInt(s[0], 16) & 8 ? '00' + s : s;\n    };\n    var h = function h(num) {\n      var hex = num.toString(16);\n      return hex.length & 1 ? \"0\".concat(hex) : hex;\n    };\n    var s = slice(h(sig.s));\n    var r = slice(h(sig.r));\n    var shl = s.length / 2;\n    var rhl = r.length / 2;\n    var sl = h(shl);\n    var rl = h(rhl);\n    return \"30\".concat(h(rhl + shl + 4), \"02\").concat(rl).concat(r, \"02\").concat(sl).concat(s);\n  }\n};\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nvar _0n = BigInt(0),\n  _1n = BigInt(1),\n  _2n = BigInt(2),\n  _3n = BigInt(3),\n  _4n = BigInt(4);\nfunction weierstrassPoints(opts) {\n  var CURVE = validatePointOpts(opts);\n  var Fp = CURVE.Fp; // All curves has same field / group length as for now, but they can differ\n  var toBytes = CURVE.toBytes || function (c, point, isCompressed) {\n    var a = point.toAffine();\n    return ut.concatBytes(Uint8Array.from([0x04]), Fp.toBytes(a.x), Fp.toBytes(a.y));\n  };\n  var fromBytes = CURVE.fromBytes || function (bytes) {\n    // const head = bytes[0];\n    var tail = bytes.subarray(1);\n    // if (head !== 0x04) throw new Error('Only non-compressed encoding is supported');\n    var x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n    var y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n    return {\n      x: x,\n      y: y\n    };\n  };\n  /**\n   * y² = x³ + ax + b: Short weierstrass curve formula\n   * @returns y²\n   */\n  function weierstrassEquation(x) {\n    var a = CURVE.a,\n      b = CURVE.b;\n    var x2 = Fp.sqr(x); // x * x\n    var x3 = Fp.mul(x2, x); // x2 * x\n    return Fp.add(Fp.add(x3, Fp.mul(x, a)), b); // x3 + a * x + b\n  }\n  // Validate whether the passed curve params are valid.\n  // We check if curve equation works for generator point.\n  // `assertValidity()` won't work: `isTorsionFree()` is not available at this point in bls12-381.\n  // ProjectivePoint class has not been initialized yet.\n  if (!Fp.eql(Fp.sqr(CURVE.Gy), weierstrassEquation(CURVE.Gx))) throw new Error('bad generator point: equation left != right');\n  // Valid group elements reside in range 1..n-1\n  function isWithinCurveOrder(num) {\n    return typeof num === 'bigint' && _0n < num && num < CURVE.n;\n  }\n  function assertGE(num) {\n    if (!isWithinCurveOrder(num)) throw new Error('Expected valid bigint: 0 < bigint < curve.n');\n  }\n  // Validates if priv key is valid and converts it to bigint.\n  // Supports options allowedPrivateKeyLengths and wrapPrivateKey.\n  function normPrivateKeyToScalar(key) {\n    var lengths = CURVE.allowedPrivateKeyLengths,\n      nByteLength = CURVE.nByteLength,\n      wrapPrivateKey = CURVE.wrapPrivateKey,\n      n = CURVE.n;\n    if (lengths && typeof key !== 'bigint') {\n      if (key instanceof Uint8Array) key = ut.bytesToHex(key);\n      // Normalize to hex string, pad. E.g. P521 would norm 130-132 char hex to 132-char bytes\n      if (typeof key !== 'string' || !lengths.includes(key.length)) throw new Error('Invalid key');\n      key = key.padStart(nByteLength * 2, '0');\n    }\n    var num;\n    try {\n      num = typeof key === 'bigint' ? key : ut.bytesToNumberBE((0, utils_js_1.ensureBytes)('private key', key, nByteLength));\n    } catch (error) {\n      throw new Error(\"private key must be \".concat(nByteLength, \" bytes, hex or bigint, not \").concat(typeof key));\n    }\n    if (wrapPrivateKey) num = mod.mod(num, n); // disabled by default, enabled for BLS\n    assertGE(num); // num in range [1..N-1]\n    return num;\n  }\n  var pointPrecomputes = new Map();\n  function assertPrjPoint(other) {\n    if (!(other instanceof Point)) throw new Error('ProjectivePoint expected');\n  }\n  /**\n   * Projective Point works in 3d / projective (homogeneous) coordinates: (x, y, z) ∋ (x=x/z, y=y/z)\n   * Default Point works in 2d / affine coordinates: (x, y)\n   * We're doing calculations in projective, because its operations don't require costly inversion.\n   */\n  var Point = /*#__PURE__*/function () {\n    function Point(px, py, pz) {\n      _classCallCheck(this, Point);\n      this.px = px;\n      this.py = py;\n      this.pz = pz;\n      if (px == null || !Fp.isValid(px)) throw new Error('x required');\n      if (py == null || !Fp.isValid(py)) throw new Error('y required');\n      if (pz == null || !Fp.isValid(pz)) throw new Error('z required');\n    }\n    // Does not validate if the point is on-curve.\n    // Use fromHex instead, or call assertValidity() later.\n    _createClass(Point, [{\n      key: \"_setWindowSize\",\n      // \"Private method\", don't use it directly\n      value: function _setWindowSize(windowSize) {\n        this._WINDOW_SIZE = windowSize;\n        pointPrecomputes.delete(this);\n      } // A point on curve is valid if it conforms to equation.\n    }, {\n      key: \"assertValidity\",\n      value: function assertValidity() {\n        // Zero is valid point too!\n        if (this.is0()) {\n          if (CURVE.allowInfinityPoint) return;\n          throw new Error('bad point: ZERO');\n        }\n        // Some 3rd-party test vectors require different wording between here & `fromCompressedHex`\n        var _this$toAffine = this.toAffine(),\n          x = _this$toAffine.x,\n          y = _this$toAffine.y; // Check if x, y are valid field elements\n        if (!Fp.isValid(x) || !Fp.isValid(y)) throw new Error('bad point: x or y not FE');\n        var left = Fp.sqr(y); // y²\n        var right = weierstrassEquation(x); // x³ + ax + b\n        if (!Fp.eql(left, right)) throw new Error('bad point: equation left != right');\n        if (!this.isTorsionFree()) throw new Error('bad point: not in prime-order subgroup');\n      }\n    }, {\n      key: \"hasEvenY\",\n      value: function hasEvenY() {\n        var _this$toAffine2 = this.toAffine(),\n          y = _this$toAffine2.y;\n        if (Fp.isOdd) return !Fp.isOdd(y);\n        throw new Error(\"Field doesn't support isOdd\");\n      }\n      /**\n       * Compare one point to another.\n       */\n    }, {\n      key: \"equals\",\n      value: function equals(other) {\n        assertPrjPoint(other);\n        var X1 = this.px,\n          Y1 = this.py,\n          Z1 = this.pz;\n        var X2 = other.px,\n          Y2 = other.py,\n          Z2 = other.pz;\n        var U1 = Fp.eql(Fp.mul(X1, Z2), Fp.mul(X2, Z1));\n        var U2 = Fp.eql(Fp.mul(Y1, Z2), Fp.mul(Y2, Z1));\n        return U1 && U2;\n      }\n      /**\n       * Flips point to one corresponding to (x, -y) in Affine coordinates.\n       */\n    }, {\n      key: \"negate\",\n      value: function negate() {\n        return new Point(this.px, Fp.neg(this.py), this.pz);\n      } // Renes-Costello-Batina exception-free doubling formula.\n      // There is 30% faster Jacobian formula, but it is not complete.\n      // https://eprint.iacr.org/2015/1060, algorithm 3\n      // Cost: 8M + 3S + 3*a + 2*b3 + 15add.\n    }, {\n      key: \"double\",\n      value: function double() {\n        var a = CURVE.a,\n          b = CURVE.b;\n        var b3 = Fp.mul(b, _3n);\n        var X1 = this.px,\n          Y1 = this.py,\n          Z1 = this.pz;\n        var X3 = Fp.ZERO,\n          Y3 = Fp.ZERO,\n          Z3 = Fp.ZERO; // prettier-ignore\n        var t0 = Fp.mul(X1, X1); // step 1\n        var t1 = Fp.mul(Y1, Y1);\n        var t2 = Fp.mul(Z1, Z1);\n        var t3 = Fp.mul(X1, Y1);\n        t3 = Fp.add(t3, t3); // step 5\n        Z3 = Fp.mul(X1, Z1);\n        Z3 = Fp.add(Z3, Z3);\n        X3 = Fp.mul(a, Z3);\n        Y3 = Fp.mul(b3, t2);\n        Y3 = Fp.add(X3, Y3); // step 10\n        X3 = Fp.sub(t1, Y3);\n        Y3 = Fp.add(t1, Y3);\n        Y3 = Fp.mul(X3, Y3);\n        X3 = Fp.mul(t3, X3);\n        Z3 = Fp.mul(b3, Z3); // step 15\n        t2 = Fp.mul(a, t2);\n        t3 = Fp.sub(t0, t2);\n        t3 = Fp.mul(a, t3);\n        t3 = Fp.add(t3, Z3);\n        Z3 = Fp.add(t0, t0); // step 20\n        t0 = Fp.add(Z3, t0);\n        t0 = Fp.add(t0, t2);\n        t0 = Fp.mul(t0, t3);\n        Y3 = Fp.add(Y3, t0);\n        t2 = Fp.mul(Y1, Z1); // step 25\n        t2 = Fp.add(t2, t2);\n        t0 = Fp.mul(t2, t3);\n        X3 = Fp.sub(X3, t0);\n        Z3 = Fp.mul(t2, t1);\n        Z3 = Fp.add(Z3, Z3); // step 30\n        Z3 = Fp.add(Z3, Z3);\n        return new Point(X3, Y3, Z3);\n      } // Renes-Costello-Batina exception-free addition formula.\n      // There is 30% faster Jacobian formula, but it is not complete.\n      // https://eprint.iacr.org/2015/1060, algorithm 1\n      // Cost: 12M + 0S + 3*a + 3*b3 + 23add.\n    }, {\n      key: \"add\",\n      value: function add(other) {\n        assertPrjPoint(other);\n        var X1 = this.px,\n          Y1 = this.py,\n          Z1 = this.pz;\n        var X2 = other.px,\n          Y2 = other.py,\n          Z2 = other.pz;\n        var X3 = Fp.ZERO,\n          Y3 = Fp.ZERO,\n          Z3 = Fp.ZERO; // prettier-ignore\n        var a = CURVE.a;\n        var b3 = Fp.mul(CURVE.b, _3n);\n        var t0 = Fp.mul(X1, X2); // step 1\n        var t1 = Fp.mul(Y1, Y2);\n        var t2 = Fp.mul(Z1, Z2);\n        var t3 = Fp.add(X1, Y1);\n        var t4 = Fp.add(X2, Y2); // step 5\n        t3 = Fp.mul(t3, t4);\n        t4 = Fp.add(t0, t1);\n        t3 = Fp.sub(t3, t4);\n        t4 = Fp.add(X1, Z1);\n        var t5 = Fp.add(X2, Z2); // step 10\n        t4 = Fp.mul(t4, t5);\n        t5 = Fp.add(t0, t2);\n        t4 = Fp.sub(t4, t5);\n        t5 = Fp.add(Y1, Z1);\n        X3 = Fp.add(Y2, Z2); // step 15\n        t5 = Fp.mul(t5, X3);\n        X3 = Fp.add(t1, t2);\n        t5 = Fp.sub(t5, X3);\n        Z3 = Fp.mul(a, t4);\n        X3 = Fp.mul(b3, t2); // step 20\n        Z3 = Fp.add(X3, Z3);\n        X3 = Fp.sub(t1, Z3);\n        Z3 = Fp.add(t1, Z3);\n        Y3 = Fp.mul(X3, Z3);\n        t1 = Fp.add(t0, t0); // step 25\n        t1 = Fp.add(t1, t0);\n        t2 = Fp.mul(a, t2);\n        t4 = Fp.mul(b3, t4);\n        t1 = Fp.add(t1, t2);\n        t2 = Fp.sub(t0, t2); // step 30\n        t2 = Fp.mul(a, t2);\n        t4 = Fp.add(t4, t2);\n        t0 = Fp.mul(t1, t4);\n        Y3 = Fp.add(Y3, t0);\n        t0 = Fp.mul(t5, t4); // step 35\n        X3 = Fp.mul(t3, X3);\n        X3 = Fp.sub(X3, t0);\n        t0 = Fp.mul(t3, t1);\n        Z3 = Fp.mul(t5, Z3);\n        Z3 = Fp.add(Z3, t0); // step 40\n        return new Point(X3, Y3, Z3);\n      }\n    }, {\n      key: \"subtract\",\n      value: function subtract(other) {\n        return this.add(other.negate());\n      }\n    }, {\n      key: \"is0\",\n      value: function is0() {\n        return this.equals(Point.ZERO);\n      }\n    }, {\n      key: \"wNAF\",\n      value: function wNAF(n) {\n        return wnaf.wNAFCached(this, pointPrecomputes, n, function (comp) {\n          var toInv = Fp.invertBatch(comp.map(function (p) {\n            return p.pz;\n          }));\n          return comp.map(function (p, i) {\n            return p.toAffine(toInv[i]);\n          }).map(Point.fromAffine);\n        });\n      }\n      /**\n       * Non-constant-time multiplication. Uses double-and-add algorithm.\n       * It's faster, but should only be used when you don't care about\n       * an exposed private key e.g. sig verification, which works over *public* keys.\n       */\n    }, {\n      key: \"multiplyUnsafe\",\n      value: function multiplyUnsafe(n) {\n        var I = Point.ZERO;\n        if (n === _0n) return I;\n        assertGE(n); // Will throw on 0\n        if (n === _1n) return this;\n        var endo = CURVE.endo;\n        if (!endo) return wnaf.unsafeLadder(this, n);\n        // Apply endomorphism\n        var _endo$splitScalar = endo.splitScalar(n),\n          k1neg = _endo$splitScalar.k1neg,\n          k1 = _endo$splitScalar.k1,\n          k2neg = _endo$splitScalar.k2neg,\n          k2 = _endo$splitScalar.k2;\n        var k1p = I;\n        var k2p = I;\n        var d = this;\n        while (k1 > _0n || k2 > _0n) {\n          if (k1 & _1n) k1p = k1p.add(d);\n          if (k2 & _1n) k2p = k2p.add(d);\n          d = d.double();\n          k1 >>= _1n;\n          k2 >>= _1n;\n        }\n        if (k1neg) k1p = k1p.negate();\n        if (k2neg) k2p = k2p.negate();\n        k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n        return k1p.add(k2p);\n      }\n      /**\n       * Constant time multiplication.\n       * Uses wNAF method. Windowed method may be 10% faster,\n       * but takes 2x longer to generate and consumes 2x memory.\n       * Uses precomputes when available.\n       * Uses endomorphism for Koblitz curves.\n       * @param scalar by which the point would be multiplied\n       * @returns New point\n       */\n    }, {\n      key: \"multiply\",\n      value: function multiply(scalar) {\n        assertGE(scalar);\n        var n = scalar;\n        var point, fake; // Fake point is used to const-time mult\n        var endo = CURVE.endo;\n        if (endo) {\n          var _endo$splitScalar2 = endo.splitScalar(n),\n            k1neg = _endo$splitScalar2.k1neg,\n            k1 = _endo$splitScalar2.k1,\n            k2neg = _endo$splitScalar2.k2neg,\n            k2 = _endo$splitScalar2.k2;\n          var _this$wNAF = this.wNAF(k1),\n            k1p = _this$wNAF.p,\n            f1p = _this$wNAF.f;\n          var _this$wNAF2 = this.wNAF(k2),\n            k2p = _this$wNAF2.p,\n            f2p = _this$wNAF2.f;\n          k1p = wnaf.constTimeNegate(k1neg, k1p);\n          k2p = wnaf.constTimeNegate(k2neg, k2p);\n          k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n          point = k1p.add(k2p);\n          fake = f1p.add(f2p);\n        } else {\n          var _this$wNAF3 = this.wNAF(n),\n            p = _this$wNAF3.p,\n            f = _this$wNAF3.f;\n          point = p;\n          fake = f;\n        }\n        // Normalize `z` for both points, but return only real one\n        return Point.normalizeZ([point, fake])[0];\n      }\n      /**\n       * Efficiently calculate `aP + bQ`. Unsafe, can expose private key, if used incorrectly.\n       * Not using Strauss-Shamir trick: precomputation tables are faster.\n       * The trick could be useful if both P and Q are not G (not in our case).\n       * @returns non-zero affine point\n       */\n    }, {\n      key: \"multiplyAndAddUnsafe\",\n      value: function multiplyAndAddUnsafe(Q, a, b) {\n        var G = Point.BASE; // No Strauss-Shamir trick: we have 10% faster G precomputes\n        var mul = function mul(P, a // Select faster multiply() method\n        ) {\n          return a === _0n || a === _1n || !P.equals(G) ? P.multiplyUnsafe(a) : P.multiply(a);\n        };\n        var sum = mul(this, a).add(mul(Q, b));\n        return sum.is0() ? undefined : sum;\n      } // Converts Projective point to affine (x, y) coordinates.\n      // Can accept precomputed Z^-1 - for example, from invertBatch.\n      // (x, y, z) ∋ (x=x/z, y=y/z)\n    }, {\n      key: \"toAffine\",\n      value: function toAffine(iz) {\n        var x = this.px,\n          y = this.py,\n          z = this.pz;\n        var is0 = this.is0();\n        // If invZ was 0, we return zero point. However we still want to execute\n        // all operations, so we replace invZ with a random number, 1.\n        if (iz == null) iz = is0 ? Fp.ONE : Fp.inv(z);\n        var ax = Fp.mul(x, iz);\n        var ay = Fp.mul(y, iz);\n        var zz = Fp.mul(z, iz);\n        if (is0) return {\n          x: Fp.ZERO,\n          y: Fp.ZERO\n        };\n        if (!Fp.eql(zz, Fp.ONE)) throw new Error('invZ was invalid');\n        return {\n          x: ax,\n          y: ay\n        };\n      }\n    }, {\n      key: \"isTorsionFree\",\n      value: function isTorsionFree() {\n        var cofactor = CURVE.h,\n          isTorsionFree = CURVE.isTorsionFree;\n        if (cofactor === _1n) return true; // No subgroups, always torsion-free\n        if (isTorsionFree) return isTorsionFree(Point, this);\n        throw new Error('isTorsionFree() has not been declared for the elliptic curve');\n      }\n    }, {\n      key: \"clearCofactor\",\n      value: function clearCofactor() {\n        var cofactor = CURVE.h,\n          clearCofactor = CURVE.clearCofactor;\n        if (cofactor === _1n) return this; // Fast-path\n        if (clearCofactor) return clearCofactor(Point, this);\n        return this.multiplyUnsafe(CURVE.h);\n      }\n    }, {\n      key: \"toRawBytes\",\n      value: function toRawBytes() {\n        var isCompressed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n        this.assertValidity();\n        return toBytes(Point, this, isCompressed);\n      }\n    }, {\n      key: \"toHex\",\n      value: function toHex() {\n        var isCompressed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n        return ut.bytesToHex(this.toRawBytes(isCompressed));\n      }\n    }, {\n      key: \"x\",\n      get: function get() {\n        return this.toAffine().x;\n      }\n    }, {\n      key: \"y\",\n      get: function get() {\n        return this.toAffine().y;\n      }\n      /**\n       * Takes a bunch of Projective Points but executes only one\n       * inversion on all of them. Inversion is very slow operation,\n       * so this improves performance massively.\n       * Optimization: converts a list of projective points to a list of identical points with Z=1.\n       */\n    }], [{\n      key: \"fromAffine\",\n      value: function fromAffine(p) {\n        var _ref = p || {},\n          x = _ref.x,\n          y = _ref.y;\n        if (!p || !Fp.isValid(x) || !Fp.isValid(y)) throw new Error('invalid affine point');\n        if (p instanceof Point) throw new Error('projective point not allowed');\n        var is0 = function is0(i) {\n          return Fp.eql(i, Fp.ZERO);\n        };\n        // fromAffine(x:0, y:0) would produce (x:0, y:0, z:1), but we need (x:0, y:1, z:0)\n        if (is0(x) && is0(y)) return Point.ZERO;\n        return new Point(x, y, Fp.ONE);\n      }\n    }, {\n      key: \"normalizeZ\",\n      value: function normalizeZ(points) {\n        var toInv = Fp.invertBatch(points.map(function (p) {\n          return p.pz;\n        }));\n        return points.map(function (p, i) {\n          return p.toAffine(toInv[i]);\n        }).map(Point.fromAffine);\n      }\n      /**\n       * Converts hash string or Uint8Array to Point.\n       * @param hex short/long ECDSA hex\n       */\n    }, {\n      key: \"fromHex\",\n      value: function fromHex(hex) {\n        var P = Point.fromAffine(fromBytes((0, utils_js_1.ensureBytes)('pointHex', hex)));\n        P.assertValidity();\n        return P;\n      } // Multiplies generator point by privateKey.\n    }, {\n      key: \"fromPrivateKey\",\n      value: function fromPrivateKey(privateKey) {\n        return Point.BASE.multiply(normPrivateKeyToScalar(privateKey));\n      }\n    }]);\n    return Point;\n  }();\n  Point.BASE = new Point(CURVE.Gx, CURVE.Gy, Fp.ONE);\n  Point.ZERO = new Point(Fp.ZERO, Fp.ONE, Fp.ZERO);\n  var _bits = CURVE.nBitLength;\n  var wnaf = (0, curve_js_1.wNAF)(Point, CURVE.endo ? Math.ceil(_bits / 2) : _bits);\n  // Validate if generator point is on curve\n  return {\n    CURVE: CURVE,\n    ProjectivePoint: Point,\n    normPrivateKeyToScalar: normPrivateKeyToScalar,\n    weierstrassEquation: weierstrassEquation,\n    isWithinCurveOrder: isWithinCurveOrder\n  };\n}\nexports.weierstrassPoints = weierstrassPoints;\nfunction validateOpts(curve) {\n  var opts = (0, curve_js_1.validateBasic)(curve);\n  ut.validateObject(opts, {\n    hash: 'hash',\n    hmac: 'function',\n    randomBytes: 'function'\n  }, {\n    bits2int: 'function',\n    bits2int_modN: 'function',\n    lowS: 'boolean'\n  });\n  return Object.freeze(_objectSpread({\n    lowS: true\n  }, opts));\n}\nfunction weierstrass(curveDef) {\n  var CURVE = validateOpts(curveDef);\n  var Fp = CURVE.Fp,\n    CURVE_ORDER = CURVE.n;\n  var compressedLen = Fp.BYTES + 1; // e.g. 33 for 32\n  var uncompressedLen = 2 * Fp.BYTES + 1; // e.g. 65 for 32\n  function isValidFieldElement(num) {\n    return _0n < num && num < Fp.ORDER; // 0 is banned since it's not invertible FE\n  }\n\n  function modN(a) {\n    return mod.mod(a, CURVE_ORDER);\n  }\n  function invN(a) {\n    return mod.invert(a, CURVE_ORDER);\n  }\n  var _weierstrassPoints = weierstrassPoints(_objectSpread({}, CURVE, {\n      toBytes: function toBytes(c, point, isCompressed) {\n        var a = point.toAffine();\n        var x = Fp.toBytes(a.x);\n        var cat = ut.concatBytes;\n        if (isCompressed) {\n          return cat(Uint8Array.from([point.hasEvenY() ? 0x02 : 0x03]), x);\n        } else {\n          return cat(Uint8Array.from([0x04]), x, Fp.toBytes(a.y));\n        }\n      },\n      fromBytes: function fromBytes(bytes) {\n        var len = bytes.length;\n        var head = bytes[0];\n        var tail = bytes.subarray(1);\n        // this.assertValidity() is done inside of fromHex\n        if (len === compressedLen && (head === 0x02 || head === 0x03)) {\n          var x = ut.bytesToNumberBE(tail);\n          if (!isValidFieldElement(x)) throw new Error('Point is not on curve');\n          var y2 = weierstrassEquation(x); // y² = x³ + ax + b\n          var y = Fp.sqrt(y2); // y = y² ^ (p+1)/4\n          var isYOdd = (y & _1n) === _1n;\n          // ECDSA\n          var isHeadOdd = (head & 1) === 1;\n          if (isHeadOdd !== isYOdd) y = Fp.neg(y);\n          return {\n            x: x,\n            y: y\n          };\n        } else if (len === uncompressedLen && head === 0x04) {\n          var _x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n          var _y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n          return {\n            x: _x,\n            y: _y\n          };\n        } else {\n          throw new Error(\"Point of length \".concat(len, \" was invalid. Expected \").concat(compressedLen, \" compressed bytes or \").concat(uncompressedLen, \" uncompressed bytes\"));\n        }\n      }\n    })),\n    Point = _weierstrassPoints.ProjectivePoint,\n    normPrivateKeyToScalar = _weierstrassPoints.normPrivateKeyToScalar,\n    weierstrassEquation = _weierstrassPoints.weierstrassEquation,\n    isWithinCurveOrder = _weierstrassPoints.isWithinCurveOrder;\n  var numToNByteStr = function numToNByteStr(num) {\n    return ut.bytesToHex(ut.numberToBytesBE(num, CURVE.nByteLength));\n  };\n  function isBiggerThanHalfOrder(number) {\n    var HALF = CURVE_ORDER >> _1n;\n    return number > HALF;\n  }\n  function normalizeS(s) {\n    return isBiggerThanHalfOrder(s) ? modN(-s) : s;\n  }\n  // slice bytes num\n  var slcNum = function slcNum(b, from, to) {\n    return ut.bytesToNumberBE(b.slice(from, to));\n  };\n  /**\n   * ECDSA signature with its (r, s) properties. Supports DER & compact representations.\n   */\n  var Signature = /*#__PURE__*/function () {\n    function Signature(r, s, recovery) {\n      _classCallCheck(this, Signature);\n      this.r = r;\n      this.s = s;\n      this.recovery = recovery;\n      this.assertValidity();\n    }\n    // pair (bytes of r, bytes of s)\n    _createClass(Signature, [{\n      key: \"assertValidity\",\n      value: function assertValidity() {\n        // can use assertGE here\n        if (!isWithinCurveOrder(this.r)) throw new Error('r must be 0 < r < CURVE.n');\n        if (!isWithinCurveOrder(this.s)) throw new Error('s must be 0 < s < CURVE.n');\n      }\n    }, {\n      key: \"addRecoveryBit\",\n      value: function addRecoveryBit(recovery) {\n        return new Signature(this.r, this.s, recovery);\n      }\n    }, {\n      key: \"recoverPublicKey\",\n      value: function recoverPublicKey(msgHash) {\n        var r = this.r,\n          s = this.s,\n          rec = this.recovery;\n        var h = bits2int_modN((0, utils_js_1.ensureBytes)('msgHash', msgHash)); // Truncate hash\n        if (rec == null || ![0, 1, 2, 3].includes(rec)) throw new Error('recovery id invalid');\n        var radj = rec === 2 || rec === 3 ? r + CURVE.n : r;\n        if (radj >= Fp.ORDER) throw new Error('recovery id 2 or 3 invalid');\n        var prefix = (rec & 1) === 0 ? '02' : '03';\n        var R = Point.fromHex(prefix + numToNByteStr(radj));\n        var ir = invN(radj); // r^-1\n        var u1 = modN(-h * ir); // -hr^-1\n        var u2 = modN(s * ir); // sr^-1\n        var Q = Point.BASE.multiplyAndAddUnsafe(R, u1, u2); // (sr^-1)R-(hr^-1)G = -(hr^-1)G + (sr^-1)\n        if (!Q) throw new Error('point at infinify'); // unsafe is fine: no priv data leaked\n        Q.assertValidity();\n        return Q;\n      } // Signatures should be low-s, to prevent malleability.\n    }, {\n      key: \"hasHighS\",\n      value: function hasHighS() {\n        return isBiggerThanHalfOrder(this.s);\n      }\n    }, {\n      key: \"normalizeS\",\n      value: function normalizeS() {\n        return this.hasHighS() ? new Signature(this.r, modN(-this.s), this.recovery) : this;\n      } // DER-encoded\n    }, {\n      key: \"toDERRawBytes\",\n      value: function toDERRawBytes() {\n        return ut.hexToBytes(this.toDERHex());\n      }\n    }, {\n      key: \"toDERHex\",\n      value: function toDERHex() {\n        return exports.DER.hexFromSig({\n          r: this.r,\n          s: this.s\n        });\n      } // padded bytes of r, then padded bytes of s\n    }, {\n      key: \"toCompactRawBytes\",\n      value: function toCompactRawBytes() {\n        return ut.hexToBytes(this.toCompactHex());\n      }\n    }, {\n      key: \"toCompactHex\",\n      value: function toCompactHex() {\n        return numToNByteStr(this.r) + numToNByteStr(this.s);\n      }\n    }], [{\n      key: \"fromCompact\",\n      value: function fromCompact(hex) {\n        var l = CURVE.nByteLength;\n        hex = (0, utils_js_1.ensureBytes)('compactSignature', hex, l * 2);\n        return new Signature(slcNum(hex, 0, l), slcNum(hex, l, 2 * l));\n      } // DER encoded ECDSA signature\n      // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script\n    }, {\n      key: \"fromDER\",\n      value: function fromDER(hex) {\n        var _exports$DER$toSig = exports.DER.toSig((0, utils_js_1.ensureBytes)('DER', hex)),\n          r = _exports$DER$toSig.r,\n          s = _exports$DER$toSig.s;\n        return new Signature(r, s);\n      }\n    }]);\n    return Signature;\n  }();\n  var utils = {\n    isValidPrivateKey: function isValidPrivateKey(privateKey) {\n      try {\n        normPrivateKeyToScalar(privateKey);\n        return true;\n      } catch (error) {\n        return false;\n      }\n    },\n    normPrivateKeyToScalar: normPrivateKeyToScalar,\n    /**\n     * Produces cryptographically secure private key from random of size (nBitLength+64)\n     * as per FIPS 186 B.4.1 with modulo bias being neglible.\n     */\n    randomPrivateKey: function randomPrivateKey() {\n      var rand = CURVE.randomBytes(Fp.BYTES + 8);\n      var num = mod.hashToPrivateScalar(rand, CURVE_ORDER);\n      return ut.numberToBytesBE(num, CURVE.nByteLength);\n    },\n    /**\n     * Creates precompute table for an arbitrary EC point. Makes point \"cached\".\n     * Allows to massively speed-up `point.multiply(scalar)`.\n     * @returns cached point\n     * @example\n     * const fast = utils.precompute(8, ProjectivePoint.fromHex(someonesPubKey));\n     * fast.multiply(privKey); // much faster ECDH now\n     */\n    precompute: function precompute() {\n      var windowSize = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 8;\n      var point = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Point.BASE;\n      point._setWindowSize(windowSize);\n      point.multiply(BigInt(3)); // 3 is arbitrary, just need any number here\n      return point;\n    }\n  };\n  /**\n   * Computes public key for a private key. Checks for validity of the private key.\n   * @param privateKey private key\n   * @param isCompressed whether to return compact (default), or full key\n   * @returns Public key, full when isCompressed=false; short when isCompressed=true\n   */\n  function getPublicKey(privateKey) {\n    var isCompressed = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);\n  }\n  /**\n   * Quick and dirty check for item being public key. Does not validate hex, or being on-curve.\n   */\n  function isProbPub(item) {\n    var arr = item instanceof Uint8Array;\n    var str = typeof item === 'string';\n    var len = (arr || str) && item.length;\n    if (arr) return len === compressedLen || len === uncompressedLen;\n    if (str) return len === 2 * compressedLen || len === 2 * uncompressedLen;\n    if (item instanceof Point) return true;\n    return false;\n  }\n  /**\n   * ECDH (Elliptic Curve Diffie Hellman).\n   * Computes shared public key from private key and public key.\n   * Checks: 1) private key validity 2) shared key is on-curve.\n   * Does NOT hash the result.\n   * @param privateA private key\n   * @param publicB different public key\n   * @param isCompressed whether to return compact (default), or full key\n   * @returns shared public key\n   */\n  function getSharedSecret(privateA, publicB) {\n    var isCompressed = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    if (isProbPub(privateA)) throw new Error('first arg must be private key');\n    if (!isProbPub(publicB)) throw new Error('second arg must be public key');\n    var b = Point.fromHex(publicB); // check for being on-curve\n    return b.multiply(normPrivateKeyToScalar(privateA)).toRawBytes(isCompressed);\n  }\n  // RFC6979: ensure ECDSA msg is X bytes and < N. RFC suggests optional truncating via bits2octets.\n  // FIPS 186-4 4.6 suggests the leftmost min(nBitLen, outLen) bits, which matches bits2int.\n  // bits2int can produce res>N, we can do mod(res, N) since the bitLen is the same.\n  // int2octets can't be used; pads small msgs with 0: unacceptatble for trunc as per RFC vectors\n  var bits2int = CURVE.bits2int || function (bytes) {\n    // For curves with nBitLength % 8 !== 0: bits2octets(bits2octets(m)) !== bits2octets(m)\n    // for some cases, since bytes.length * 8 is not actual bitLength.\n    var num = ut.bytesToNumberBE(bytes); // check for == u8 done here\n    var delta = bytes.length * 8 - CURVE.nBitLength; // truncate to nBitLength leftmost bits\n    return delta > 0 ? num >> BigInt(delta) : num;\n  };\n  var bits2int_modN = CURVE.bits2int_modN || function (bytes) {\n    return modN(bits2int(bytes)); // can't use bytesToNumberBE here\n  };\n  // NOTE: pads output with zero as per spec\n  var ORDER_MASK = ut.bitMask(CURVE.nBitLength);\n  /**\n   * Converts to bytes. Checks if num in `[0..ORDER_MASK-1]` e.g.: `[0..2^256-1]`.\n   */\n  function int2octets(num) {\n    if (typeof num !== 'bigint') throw new Error('bigint expected');\n    if (!(_0n <= num && num < ORDER_MASK)) throw new Error(\"bigint expected < 2^\".concat(CURVE.nBitLength));\n    // works with order, can have different size than numToField!\n    return ut.numberToBytesBE(num, CURVE.nByteLength);\n  }\n  // Steps A, D of RFC6979 3.2\n  // Creates RFC6979 seed; converts msg/privKey to numbers.\n  // Used only in sign, not in verify.\n  // NOTE: we cannot assume here that msgHash has same amount of bytes as curve order, this will be wrong at least for P521.\n  // Also it can be bigger for P224 + SHA256\n  function prepSig(msgHash, privateKey) {\n    var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultSigOpts;\n    if (['recovered', 'canonical'].some(function (k) {\n      return k in opts;\n    })) throw new Error('sign() legacy options not supported');\n    var hash = CURVE.hash,\n      randomBytes = CURVE.randomBytes;\n    var lowS = opts.lowS,\n      prehash = opts.prehash,\n      ent = opts.extraEntropy; // generates low-s sigs by default\n    if (lowS == null) lowS = true; // RFC6979 3.2: we skip step A, because we already provide hash\n    msgHash = (0, utils_js_1.ensureBytes)('msgHash', msgHash);\n    if (prehash) msgHash = (0, utils_js_1.ensureBytes)('prehashed msgHash', hash(msgHash));\n    // We can't later call bits2octets, since nested bits2int is broken for curves\n    // with nBitLength % 8 !== 0. Because of that, we unwrap it here as int2octets call.\n    // const bits2octets = (bits) => int2octets(bits2int_modN(bits))\n    var h1int = bits2int_modN(msgHash);\n    var d = normPrivateKeyToScalar(privateKey); // validate private key, convert to bigint\n    var seedArgs = [int2octets(d), int2octets(h1int)];\n    // extraEntropy. RFC6979 3.6: additional k' (optional).\n    if (ent != null) {\n      // K = HMAC_K(V || 0x00 || int2octets(x) || bits2octets(h1) || k')\n      var e = ent === true ? randomBytes(Fp.BYTES) : ent; // generate random bytes OR pass as-is\n      seedArgs.push((0, utils_js_1.ensureBytes)('extraEntropy', e, Fp.BYTES)); // check for being of size BYTES\n    }\n\n    var seed = ut.concatBytes.apply(ut, seedArgs); // Step D of RFC6979 3.2\n    var m = h1int; // NOTE: no need to call bits2int second time here, it is inside truncateHash!\n    // Converts signature params into point w r/s, checks result for validity.\n    function k2sig(kBytes) {\n      // RFC 6979 Section 3.2, step 3: k = bits2int(T)\n      var k = bits2int(kBytes); // Cannot use fields methods, since it is group element\n      if (!isWithinCurveOrder(k)) return; // Important: all mod() calls here must be done over N\n      var ik = invN(k); // k^-1 mod n\n      var q = Point.BASE.multiply(k).toAffine(); // q = Gk\n      var r = modN(q.x); // r = q.x mod n\n      if (r === _0n) return;\n      // Can use scalar blinding b^-1(bm + bdr) where b ∈ [1,q−1] according to\n      // https://tches.iacr.org/index.php/TCHES/article/view/7337/6509. We've decided against it:\n      // a) dependency on CSPRNG b) 15% slowdown c) doesn't really help since bigints are not CT\n      var s = modN(ik * modN(m + r * d)); // Not using blinding here\n      if (s === _0n) return;\n      var recovery = (q.x === r ? 0 : 2) | Number(q.y & _1n); // recovery bit (2 or 3, when q.x > n)\n      var normS = s;\n      if (lowS && isBiggerThanHalfOrder(s)) {\n        normS = normalizeS(s); // if lowS was passed, ensure s is always\n        recovery ^= 1; // // in the bottom half of N\n      }\n\n      return new Signature(r, normS, recovery); // use normS, not s\n    }\n\n    return {\n      seed: seed,\n      k2sig: k2sig\n    };\n  }\n  var defaultSigOpts = {\n    lowS: CURVE.lowS,\n    prehash: false\n  };\n  var defaultVerOpts = {\n    lowS: CURVE.lowS,\n    prehash: false\n  };\n  /**\n   * Signs message hash with a private key.\n   * ```\n   * sign(m, d, k) where\n   *   (x, y) = G × k\n   *   r = x mod n\n   *   s = (m + dr)/k mod n\n   * ```\n   * @param msgHash NOT message. msg needs to be hashed to `msgHash`, or use `prehash`.\n   * @param privKey private key\n   * @param opts lowS for non-malleable sigs. extraEntropy for mixing randomness into k. prehash will hash first arg.\n   * @returns signature with recovery param\n   */\n  function sign(msgHash, privKey) {\n    var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultSigOpts;\n    var _prepSig = prepSig(msgHash, privKey, opts),\n      seed = _prepSig.seed,\n      k2sig = _prepSig.k2sig; // Steps A, D of RFC6979 3.2.\n    var C = CURVE;\n    var drbg = ut.createHmacDrbg(C.hash.outputLen, C.nByteLength, C.hmac);\n    return drbg(seed, k2sig); // Steps B, C, D, E, F, G\n  }\n  // Enable precomputes. Slows down first publicKey computation by 20ms.\n  Point.BASE._setWindowSize(8);\n  // utils.precompute(8, ProjectivePoint.BASE)\n  /**\n   * Verifies a signature against message hash and public key.\n   * Rejects lowS signatures by default: to override,\n   * specify option `{lowS: false}`. Implements section 4.1.4 from https://www.secg.org/sec1-v2.pdf:\n   *\n   * ```\n   * verify(r, s, h, P) where\n   *   U1 = hs^-1 mod n\n   *   U2 = rs^-1 mod n\n   *   R = U1⋅G - U2⋅P\n   *   mod(R.x, n) == r\n   * ```\n   */\n  function verify(signature, msgHash, publicKey) {\n    var opts = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : defaultVerOpts;\n    var sg = signature;\n    msgHash = (0, utils_js_1.ensureBytes)('msgHash', msgHash);\n    publicKey = (0, utils_js_1.ensureBytes)('publicKey', publicKey);\n    if ('strict' in opts) throw new Error('options.strict was renamed to lowS');\n    var lowS = opts.lowS,\n      prehash = opts.prehash;\n    var _sig = undefined;\n    var P;\n    try {\n      if (typeof sg === 'string' || sg instanceof Uint8Array) {\n        // Signature can be represented in 2 ways: compact (2*nByteLength) & DER (variable-length).\n        // Since DER can also be 2*nByteLength bytes, we check for it first.\n        try {\n          _sig = Signature.fromDER(sg);\n        } catch (derError) {\n          if (!(derError instanceof exports.DER.Err)) throw derError;\n          _sig = Signature.fromCompact(sg);\n        }\n      } else if (typeof sg === 'object' && typeof sg.r === 'bigint' && typeof sg.s === 'bigint') {\n        var _r = sg.r,\n          _s = sg.s;\n        _sig = new Signature(_r, _s);\n      } else {\n        throw new Error('PARSE');\n      }\n      P = Point.fromHex(publicKey);\n    } catch (error) {\n      if (error.message === 'PARSE') throw new Error(\"signature must be Signature instance, Uint8Array or hex string\");\n      return false;\n    }\n    if (lowS && _sig.hasHighS()) return false;\n    if (prehash) msgHash = CURVE.hash(msgHash);\n    var _sig2 = _sig,\n      r = _sig2.r,\n      s = _sig2.s;\n    var h = bits2int_modN(msgHash); // Cannot use fields methods, since it is group element\n    var is = invN(s); // s^-1\n    var u1 = modN(h * is); // u1 = hs^-1 mod n\n    var u2 = modN(r * is); // u2 = rs^-1 mod n\n    var R = Point.BASE.multiplyAndAddUnsafe(P, u1, u2)?.toAffine(); // R = u1⋅G + u2⋅P\n    if (!R) return false;\n    var v = modN(R.x);\n    return v === r;\n  }\n  return {\n    CURVE: CURVE,\n    getPublicKey: getPublicKey,\n    getSharedSecret: getSharedSecret,\n    sign: sign,\n    verify: verify,\n    ProjectivePoint: Point,\n    Signature: Signature,\n    utils: utils\n  };\n}\nexports.weierstrass = weierstrass;\n/**\n * Implementation of the Shallue and van de Woestijne method for any weierstrass curve.\n * TODO: check if there is a way to merge this with uvRatio in Edwards; move to modular.\n * b = True and y = sqrt(u / v) if (u / v) is square in F, and\n * b = False and y = sqrt(Z * (u / v)) otherwise.\n * @param Fp\n * @param Z\n * @returns\n */\nfunction SWUFpSqrtRatio(Fp, Z) {\n  // Generic implementation\n  var q = Fp.ORDER;\n  var l = _0n;\n  for (var o = q - _1n; o % _2n === _0n; o /= _2n) l += _1n;\n  var c1 = l; // 1. c1, the largest integer such that 2^c1 divides q - 1.\n  // We need 2n ** c1 and 2n ** (c1-1). We can't use **; but we can use <<.\n  // 2n ** c1 == 2n << (c1-1)\n  var _2n_pow_c1_1 = _2n << c1 - _1n - _1n;\n  var _2n_pow_c1 = _2n_pow_c1_1 * _2n;\n  var c2 = (q - _1n) / _2n_pow_c1; // 2. c2 = (q - 1) / (2^c1)  # Integer arithmetic\n  var c3 = (c2 - _1n) / _2n; // 3. c3 = (c2 - 1) / 2            # Integer arithmetic\n  var c4 = _2n_pow_c1 - _1n; // 4. c4 = 2^c1 - 1                # Integer arithmetic\n  var c5 = _2n_pow_c1_1; // 5. c5 = 2^(c1 - 1)                  # Integer arithmetic\n  var c6 = Fp.pow(Z, c2); // 6. c6 = Z^c2\n  var c7 = Fp.pow(Z, (c2 + _1n) / _2n); // 7. c7 = Z^((c2 + 1) / 2)\n  var sqrtRatio = function sqrtRatio(u, v) {\n    var tv1 = c6; // 1. tv1 = c6\n    var tv2 = Fp.pow(v, c4); // 2. tv2 = v^c4\n    var tv3 = Fp.sqr(tv2); // 3. tv3 = tv2^2\n    tv3 = Fp.mul(tv3, v); // 4. tv3 = tv3 * v\n    var tv5 = Fp.mul(u, tv3); // 5. tv5 = u * tv3\n    tv5 = Fp.pow(tv5, c3); // 6. tv5 = tv5^c3\n    tv5 = Fp.mul(tv5, tv2); // 7. tv5 = tv5 * tv2\n    tv2 = Fp.mul(tv5, v); // 8. tv2 = tv5 * v\n    tv3 = Fp.mul(tv5, u); // 9. tv3 = tv5 * u\n    var tv4 = Fp.mul(tv3, tv2); // 10. tv4 = tv3 * tv2\n    tv5 = Fp.pow(tv4, c5); // 11. tv5 = tv4^c5\n    var isQR = Fp.eql(tv5, Fp.ONE); // 12. isQR = tv5 == 1\n    tv2 = Fp.mul(tv3, c7); // 13. tv2 = tv3 * c7\n    tv5 = Fp.mul(tv4, tv1); // 14. tv5 = tv4 * tv1\n    tv3 = Fp.cmov(tv2, tv3, isQR); // 15. tv3 = CMOV(tv2, tv3, isQR)\n    tv4 = Fp.cmov(tv5, tv4, isQR); // 16. tv4 = CMOV(tv5, tv4, isQR)\n    // 17. for i in (c1, c1 - 1, ..., 2):\n    for (var i = c1; i > _1n; i--) {\n      var _tv = i - _2n; // 18.    tv5 = i - 2\n      _tv = _2n << _tv - _1n; // 19.    tv5 = 2^tv5\n      var tvv5 = Fp.pow(tv4, _tv); // 20.    tv5 = tv4^tv5\n      var e1 = Fp.eql(tvv5, Fp.ONE); // 21.    e1 = tv5 == 1\n      tv2 = Fp.mul(tv3, tv1); // 22.    tv2 = tv3 * tv1\n      tv1 = Fp.mul(tv1, tv1); // 23.    tv1 = tv1 * tv1\n      tvv5 = Fp.mul(tv4, tv1); // 24.    tv5 = tv4 * tv1\n      tv3 = Fp.cmov(tv2, tv3, e1); // 25.    tv3 = CMOV(tv2, tv3, e1)\n      tv4 = Fp.cmov(tvv5, tv4, e1); // 26.    tv4 = CMOV(tv5, tv4, e1)\n    }\n\n    return {\n      isValid: isQR,\n      value: tv3\n    };\n  };\n  if (Fp.ORDER % _4n === _3n) {\n    // sqrt_ratio_3mod4(u, v)\n    var _c = (Fp.ORDER - _3n) / _4n; // 1. c1 = (q - 3) / 4     # Integer arithmetic\n    var _c2 = Fp.sqrt(Fp.neg(Z)); // 2. c2 = sqrt(-Z)\n    sqrtRatio = function sqrtRatio(u, v) {\n      var tv1 = Fp.sqr(v); // 1. tv1 = v^2\n      var tv2 = Fp.mul(u, v); // 2. tv2 = u * v\n      tv1 = Fp.mul(tv1, tv2); // 3. tv1 = tv1 * tv2\n      var y1 = Fp.pow(tv1, _c); // 4. y1 = tv1^c1\n      y1 = Fp.mul(y1, tv2); // 5. y1 = y1 * tv2\n      var y2 = Fp.mul(y1, _c2); // 6. y2 = y1 * c2\n      var tv3 = Fp.mul(Fp.sqr(y1), v); // 7. tv3 = y1^2; 8. tv3 = tv3 * v\n      var isQR = Fp.eql(tv3, u); // 9. isQR = tv3 == u\n      var y = Fp.cmov(y2, y1, isQR); // 10. y = CMOV(y2, y1, isQR)\n      return {\n        isValid: isQR,\n        value: y\n      }; // 11. return (isQR, y) isQR ? y : y*c2\n    };\n  }\n  // No curves uses that\n  // if (Fp.ORDER % _8n === _5n) // sqrt_ratio_5mod8\n  return sqrtRatio;\n}\nexports.SWUFpSqrtRatio = SWUFpSqrtRatio;\n/**\n * From draft-irtf-cfrg-hash-to-curve-16\n */\nfunction mapToCurveSimpleSWU(Fp, opts) {\n  mod.validateField(Fp);\n  if (!Fp.isValid(opts.A) || !Fp.isValid(opts.B) || !Fp.isValid(opts.Z)) throw new Error('mapToCurveSimpleSWU: invalid opts');\n  var sqrtRatio = SWUFpSqrtRatio(Fp, opts.Z);\n  if (!Fp.isOdd) throw new Error('Fp.isOdd is not implemented!');\n  // Input: u, an element of F.\n  // Output: (x, y), a point on E.\n  return function (u) {\n    // prettier-ignore\n    var tv1, tv2, tv3, tv4, tv5, tv6, x, y;\n    tv1 = Fp.sqr(u); // 1.  tv1 = u^2\n    tv1 = Fp.mul(tv1, opts.Z); // 2.  tv1 = Z * tv1\n    tv2 = Fp.sqr(tv1); // 3.  tv2 = tv1^2\n    tv2 = Fp.add(tv2, tv1); // 4.  tv2 = tv2 + tv1\n    tv3 = Fp.add(tv2, Fp.ONE); // 5.  tv3 = tv2 + 1\n    tv3 = Fp.mul(tv3, opts.B); // 6.  tv3 = B * tv3\n    tv4 = Fp.cmov(opts.Z, Fp.neg(tv2), !Fp.eql(tv2, Fp.ZERO)); // 7.  tv4 = CMOV(Z, -tv2, tv2 != 0)\n    tv4 = Fp.mul(tv4, opts.A); // 8.  tv4 = A * tv4\n    tv2 = Fp.sqr(tv3); // 9.  tv2 = tv3^2\n    tv6 = Fp.sqr(tv4); // 10. tv6 = tv4^2\n    tv5 = Fp.mul(tv6, opts.A); // 11. tv5 = A * tv6\n    tv2 = Fp.add(tv2, tv5); // 12. tv2 = tv2 + tv5\n    tv2 = Fp.mul(tv2, tv3); // 13. tv2 = tv2 * tv3\n    tv6 = Fp.mul(tv6, tv4); // 14. tv6 = tv6 * tv4\n    tv5 = Fp.mul(tv6, opts.B); // 15. tv5 = B * tv6\n    tv2 = Fp.add(tv2, tv5); // 16. tv2 = tv2 + tv5\n    x = Fp.mul(tv1, tv3); // 17.   x = tv1 * tv3\n    var _sqrtRatio = sqrtRatio(tv2, tv6),\n      isValid = _sqrtRatio.isValid,\n      value = _sqrtRatio.value; // 18. (is_gx1_square, y1) = sqrt_ratio(tv2, tv6)\n    y = Fp.mul(tv1, u); // 19.   y = tv1 * u  -> Z * u^3 * y1\n    y = Fp.mul(y, value); // 20.   y = y * y1\n    x = Fp.cmov(x, tv3, isValid); // 21.   x = CMOV(x, tv3, is_gx1_square)\n    y = Fp.cmov(y, value, isValid); // 22.   y = CMOV(y, y1, is_gx1_square)\n    var e1 = Fp.isOdd(u) === Fp.isOdd(y); // 23.  e1 = sgn0(u) == sgn0(y)\n    y = Fp.cmov(Fp.neg(y), y, e1); // 24.   y = CMOV(-y, y, e1)\n    x = Fp.div(x, tv4); // 25.   x = x / tv4\n    return {\n      x: x,\n      y: y\n    };\n  };\n}\nexports.mapToCurveSimpleSWU = mapToCurveSimpleSWU;","map":null,"metadata":{},"sourceType":"script"}