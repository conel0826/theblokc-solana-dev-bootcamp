{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.output = exports.exists = exports.hash = exports.bytes = exports.bool = exports.number = void 0;\nfunction number(n) {\n  if (!Number.isSafeInteger(n) || n < 0) throw new Error(\"Wrong positive integer: \".concat(n));\n}\nexports.number = number;\nfunction bool(b) {\n  if (typeof b !== 'boolean') throw new Error(\"Expected boolean, not \".concat(b));\n}\nexports.bool = bool;\nfunction bytes(b) {\n  if (!(b instanceof Uint8Array)) throw new Error('Expected Uint8Array');\n  for (var _len = arguments.length, lengths = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    lengths[_key - 1] = arguments[_key];\n  }\n  if (lengths.length > 0 && !lengths.includes(b.length)) throw new Error(\"Expected Uint8Array of length \".concat(lengths, \", not of length=\").concat(b.length));\n}\nexports.bytes = bytes;\nfunction hash(hash) {\n  if (typeof hash !== 'function' || typeof hash.create !== 'function') throw new Error('Hash should be wrapped by utils.wrapConstructor');\n  number(hash.outputLen);\n  number(hash.blockLen);\n}\nexports.hash = hash;\nfunction exists(instance) {\n  var checkFinished = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  if (instance.destroyed) throw new Error('Hash instance has been destroyed');\n  if (checkFinished && instance.finished) throw new Error('Hash#digest() has already been called');\n}\nexports.exists = exists;\nfunction output(out, instance) {\n  bytes(out);\n  var min = instance.outputLen;\n  if (out.length < min) {\n    throw new Error(\"digestInto() expects output buffer of length at least \".concat(min));\n  }\n}\nexports.output = output;\nvar assert = {\n  number: number,\n  bool: bool,\n  bytes: bytes,\n  hash: hash,\n  exists: exists,\n  output: output\n};\nexports.default = assert;","map":null,"metadata":{},"sourceType":"script"}