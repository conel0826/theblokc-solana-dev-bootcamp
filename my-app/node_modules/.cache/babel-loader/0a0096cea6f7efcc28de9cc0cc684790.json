{"ast":null,"code":"\"use strict\";\n\nvar _objectSpread = require(\"/home/conel0826/theblokc-solana-dev-bootcamp/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread\");\nvar _slicedToArray = require(\"/home/conel0826/theblokc-solana-dev-bootcamp/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createHasher = exports.isogenyMap = exports.hash_to_field = exports.expand_message_xof = exports.expand_message_xmd = void 0;\nvar modular_js_1 = require(\"./modular.js\");\nvar utils_js_1 = require(\"./utils.js\");\nfunction validateDST(dst) {\n  if (dst instanceof Uint8Array) return dst;\n  if (typeof dst === 'string') return (0, utils_js_1.utf8ToBytes)(dst);\n  throw new Error('DST must be Uint8Array or string');\n}\n// Octet Stream to Integer. \"spec\" implementation of os2ip is 2.5x slower vs bytesToNumberBE.\nvar os2ip = utils_js_1.bytesToNumberBE;\n// Integer to Octet Stream (numberToBytesBE)\nfunction i2osp(value, length) {\n  if (value < 0 || value >= 1 << 8 * length) {\n    throw new Error(\"bad I2OSP call: value=\".concat(value, \" length=\").concat(length));\n  }\n  var res = Array.from({\n    length: length\n  }).fill(0);\n  for (var i = length - 1; i >= 0; i--) {\n    res[i] = value & 0xff;\n    value >>>= 8;\n  }\n  return new Uint8Array(res);\n}\nfunction strxor(a, b) {\n  var arr = new Uint8Array(a.length);\n  for (var i = 0; i < a.length; i++) {\n    arr[i] = a[i] ^ b[i];\n  }\n  return arr;\n}\nfunction isBytes(item) {\n  if (!(item instanceof Uint8Array)) throw new Error('Uint8Array expected');\n}\nfunction isNum(item) {\n  if (!Number.isSafeInteger(item)) throw new Error('number expected');\n}\n// Produces a uniformly random byte string using a cryptographic hash function H that outputs b bits\n// https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-hash-to-curve-11#section-5.4.1\nfunction expand_message_xmd(msg, DST, lenInBytes, H) {\n  isBytes(msg);\n  isBytes(DST);\n  isNum(lenInBytes);\n  // https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-hash-to-curve-16#section-5.3.3\n  if (DST.length > 255) DST = H((0, utils_js_1.concatBytes)((0, utils_js_1.utf8ToBytes)('H2C-OVERSIZE-DST-'), DST));\n  var b_in_bytes = H.outputLen,\n    r_in_bytes = H.blockLen;\n  var ell = Math.ceil(lenInBytes / b_in_bytes);\n  if (ell > 255) throw new Error('Invalid xmd length');\n  var DST_prime = (0, utils_js_1.concatBytes)(DST, i2osp(DST.length, 1));\n  var Z_pad = i2osp(0, r_in_bytes);\n  var l_i_b_str = i2osp(lenInBytes, 2); // len_in_bytes_str\n  var b = new Array(ell);\n  var b_0 = H((0, utils_js_1.concatBytes)(Z_pad, msg, l_i_b_str, i2osp(0, 1), DST_prime));\n  b[0] = H((0, utils_js_1.concatBytes)(b_0, i2osp(1, 1), DST_prime));\n  for (var i = 1; i <= ell; i++) {\n    var args = [strxor(b_0, b[i - 1]), i2osp(i + 1, 1), DST_prime];\n    b[i] = H((0, utils_js_1.concatBytes).apply(void 0, args));\n  }\n  var pseudo_random_bytes = (0, utils_js_1.concatBytes).apply(void 0, b);\n  return pseudo_random_bytes.slice(0, lenInBytes);\n}\nexports.expand_message_xmd = expand_message_xmd;\nfunction expand_message_xof(msg, DST, lenInBytes, k, H) {\n  isBytes(msg);\n  isBytes(DST);\n  isNum(lenInBytes);\n  // https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-hash-to-curve-16#section-5.3.3\n  // DST = H('H2C-OVERSIZE-DST-' || a_very_long_DST, Math.ceil((lenInBytes * k) / 8));\n  if (DST.length > 255) {\n    var dkLen = Math.ceil(2 * k / 8);\n    DST = H.create({\n      dkLen: dkLen\n    }).update((0, utils_js_1.utf8ToBytes)('H2C-OVERSIZE-DST-')).update(DST).digest();\n  }\n  if (lenInBytes > 65535 || DST.length > 255) throw new Error('expand_message_xof: invalid lenInBytes');\n  return H.create({\n    dkLen: lenInBytes\n  }).update(msg).update(i2osp(lenInBytes, 2))\n  // 2. DST_prime = DST || I2OSP(len(DST), 1)\n  .update(DST).update(i2osp(DST.length, 1)).digest();\n}\nexports.expand_message_xof = expand_message_xof;\n/**\n * Hashes arbitrary-length byte strings to a list of one or more elements of a finite field F\n * https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-hash-to-curve-11#section-5.3\n * @param msg a byte string containing the message to hash\n * @param count the number of elements of F to output\n * @param options `{DST: string, p: bigint, m: number, k: number, expand: 'xmd' | 'xof', hash: H}`, see above\n * @returns [u_0, ..., u_(count - 1)], a list of field elements.\n */\nfunction hash_to_field(msg, count, options) {\n  (0, utils_js_1.validateObject)(options, {\n    DST: 'string',\n    p: 'bigint',\n    m: 'isSafeInteger',\n    k: 'isSafeInteger',\n    hash: 'hash'\n  });\n  var p = options.p,\n    k = options.k,\n    m = options.m,\n    hash = options.hash,\n    expand = options.expand,\n    _DST = options.DST;\n  isBytes(msg);\n  isNum(count);\n  var DST = validateDST(_DST);\n  var log2p = p.toString(2).length;\n  var L = Math.ceil((log2p + k) / 8); // section 5.1 of ietf draft link above\n  var len_in_bytes = count * m * L;\n  var prb; // pseudo_random_bytes\n  if (expand === 'xmd') {\n    prb = expand_message_xmd(msg, DST, len_in_bytes, hash);\n  } else if (expand === 'xof') {\n    prb = expand_message_xof(msg, DST, len_in_bytes, k, hash);\n  } else if (expand === '_internal_pass') {\n    // for internal tests only\n    prb = msg;\n  } else {\n    throw new Error('expand must be \"xmd\" or \"xof\"');\n  }\n  var u = new Array(count);\n  for (var i = 0; i < count; i++) {\n    var e = new Array(m);\n    for (var j = 0; j < m; j++) {\n      var elm_offset = L * (j + i * m);\n      var tv = prb.subarray(elm_offset, elm_offset + L);\n      e[j] = (0, modular_js_1.mod)(os2ip(tv), p);\n    }\n    u[i] = e;\n  }\n  return u;\n}\nexports.hash_to_field = hash_to_field;\nfunction isogenyMap(field, map) {\n  // Make same order as in spec\n  var COEFF = map.map(function (i) {\n    return Array.from(i).reverse();\n  });\n  return function (x, y) {\n    var _COEFF$map = COEFF.map(function (val) {\n        return val.reduce(function (acc, i) {\n          return field.add(field.mul(acc, x), i);\n        });\n      }),\n      _COEFF$map2 = _slicedToArray(_COEFF$map, 4),\n      xNum = _COEFF$map2[0],\n      xDen = _COEFF$map2[1],\n      yNum = _COEFF$map2[2],\n      yDen = _COEFF$map2[3];\n    x = field.div(xNum, xDen); // xNum / xDen\n    y = field.mul(y, field.div(yNum, yDen)); // y * (yNum / yDev)\n    return {\n      x: x,\n      y: y\n    };\n  };\n}\nexports.isogenyMap = isogenyMap;\nfunction createHasher(Point, mapToCurve, def) {\n  if (typeof mapToCurve !== 'function') throw new Error('mapToCurve() must be defined');\n  return {\n    // Encodes byte string to elliptic curve\n    // https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-hash-to-curve-16#section-3\n    hashToCurve: function hashToCurve(msg, options) {\n      var u = hash_to_field(msg, 2, _objectSpread({}, def, {\n        DST: def.DST\n      }, options));\n      var u0 = Point.fromAffine(mapToCurve(u[0]));\n      var u1 = Point.fromAffine(mapToCurve(u[1]));\n      var P = u0.add(u1).clearCofactor();\n      P.assertValidity();\n      return P;\n    },\n    // https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-hash-to-curve-16#section-3\n    encodeToCurve: function encodeToCurve(msg, options) {\n      var u = hash_to_field(msg, 1, _objectSpread({}, def, {\n        DST: def.encodeDST\n      }, options));\n      var P = Point.fromAffine(mapToCurve(u[0])).clearCofactor();\n      P.assertValidity();\n      return P;\n    }\n  };\n}\nexports.createHasher = createHasher;","map":null,"metadata":{},"sourceType":"script"}