{"ast":null,"code":"var _jsxFileName = \"/home/conel0826/theblokc-solana-dev-bootcamp/my-app/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\n// import { ConnectionProvider, WalletProvider } from '@solana/wallet-adapter-react';\nimport idl from './idl.json';\n// import { Connection, PublicKey, clusterApiUrl  } from '@solana/web3.js';\nimport { Program, web3, AnchorProvider } from '@project-serum/anchor';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nasync function getPhantomProvider() {\n  const isPhantomInstalled = typeof window.solana !== 'undefined';\n  if (isPhantomInstalled) {\n    const isConfirmed = window.confirm(\"Phantom wallet detected. Do you want to connect using Phantom?\");\n    if (isConfirmed) {\n      const connection = new web3.Connection(web3.clusterApiUrl('devnet'));\n      const wallet = window.solana;\n      const provider = new AnchorProvider(connection, wallet);\n      return provider;\n    } else {\n      throw new Error(\"User denied permission to use Phantom wallet.\");\n    }\n  } else {\n    throw new Error(\"Phantom wallet is not installed.\");\n  }\n}\n;\nconst programID = new web3.PublicKey('EVyUf1GBFMEdThER6pbEPbervBFj5Rc8bv67M2Lo1odK');\nconst connection = new web3.Connection(web3.clusterApiUrl('devnet'));\n// Create a connection to the Solana network\n\n// Create a provider using the Solana wallet extension\n\nfunction App() {\n  _s();\n  var provider;\n  const [selectedOption, setSelectedOption] = useState('');\n  const options = ['Option 1', 'Option 2', 'Option 3'];\n  const handleOptionChange = event => {\n    setSelectedOption(event.target.value);\n  };\n  const program = new Program(idl, programID, provider);\n\n  // Declare a state variable for input box\n  const [userInputText, setInputValue] = useState(\"\");\n  const getProvider = async () => {\n    provider = await getPhantomProvider();\n  };\n\n  // Function to handle the onClick event of first button\n  const submission = async () => {\n    await program.methods.initialize(userInputText).rpc();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"First,\", ' ', /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: getProvider,\n      children: \"click here to connect your local phantom wallet\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), \", then,\", ' ', /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: userInputText,\n      onChange: e => setInputValue(e.target.value),\n      placeholder: \"input any text here\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), \", afterward,\", ' ', /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: submission,\n      children: \"click here to submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), \", note this submission, and more alike, are sent to the Solana blockchain, with an associated public address; If such exists, you may,\", ' ', /*#__PURE__*/_jsxDEV(\"select\", {\n      value: selectedOption,\n      onChange: handleOptionChange,\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        hidden: true,\n        value: \"\",\n        children: \"view and select here\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), options.map((option, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: option,\n        children: option\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), \", and here its associated submitted text: \", selectedOption]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"URmTD3e8qGD8V/rgguCaWBpWcbE=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","idl","Program","web3","AnchorProvider","jsxDEV","_jsxDEV","getPhantomProvider","isPhantomInstalled","window","solana","isConfirmed","confirm","connection","Connection","clusterApiUrl","wallet","provider","Error","programID","PublicKey","App","_s","selectedOption","setSelectedOption","options","handleOptionChange","event","target","value","program","userInputText","setInputValue","getProvider","submission","methods","initialize","rpc","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","e","placeholder","hidden","map","option","index","_c","$RefreshReg$"],"sources":["/home/conel0826/theblokc-solana-dev-bootcamp/my-app/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\n// import { ConnectionProvider, WalletProvider } from '@solana/wallet-adapter-react';\nimport idl from './idl.json'\n// import { Connection, PublicKey, clusterApiUrl  } from '@solana/web3.js';\nimport { Program, web3, AnchorProvider } from '@project-serum/anchor';\n\nasync function getPhantomProvider() {\n  const isPhantomInstalled = typeof window.solana !== 'undefined';\n  if (isPhantomInstalled) {\n    const isConfirmed = window.confirm(\"Phantom wallet detected. Do you want to connect using Phantom?\");\n    if (isConfirmed) {\n      const connection = new web3.Connection(web3.clusterApiUrl('devnet'));\n      const wallet = window.solana;\n      const provider = new AnchorProvider(connection, wallet);\n      return provider;\n    } else {\n      throw new Error(\"User denied permission to use Phantom wallet.\");\n    }\n  } else {\n    throw new Error(\"Phantom wallet is not installed.\");\n  }\n};\n\n\nconst programID = new web3.PublicKey('EVyUf1GBFMEdThER6pbEPbervBFj5Rc8bv67M2Lo1odK');\nconst connection = new web3.Connection(web3.clusterApiUrl('devnet'));\n// Create a connection to the Solana network\n\n\n// Create a provider using the Solana wallet extension\n\nfunction App() {\n  var provider;\n\n  const [selectedOption, setSelectedOption] = useState('');\n\n  const options = ['Option 1', 'Option 2', 'Option 3'];\n\n  const handleOptionChange = (event) => {\n    setSelectedOption(event.target.value);\n  };\n\n  const program = new Program(idl, programID, provider);\n  \n  // Declare a state variable for input box\n  const [userInputText, setInputValue] = useState(\"\");\n  \n  const getProvider = async () => {\n    provider = await getPhantomProvider();\n  };\n\n  // Function to handle the onClick event of first button\n  const submission = async () => {\n    await program.methods.initialize(userInputText).rpc();\n  };\n\n  return (\n    <div>\n      First,{' '}\n      <button onClick={getProvider}>\n        click here to connect your local phantom wallet\n      </button>\n      , then,{' '}\n      <input \n        type=\"text\" \n        value={userInputText} \n        onChange={ e => setInputValue(e.target.value)}\n        placeholder=\"input any text here\"\n      />\n      , afterward,{' '}\n      <button onClick={submission}>\n        click here to submit\n      </button>\n      , note this submission, and more alike, \n      are sent to the Solana blockchain, \n      with an associated public address; \n      If such exists, you may,{' '}\n      <select \n        value={selectedOption} \n        onChange={handleOptionChange}\n      >\n        <option hidden value=''>view and select here</option>\n        {options.map((option, index) => (\n          <option key={index} value={option}>\n            {option}\n          </option>\n        ))}\n      </select>\n      , and here its associated submitted text: {selectedOption}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}