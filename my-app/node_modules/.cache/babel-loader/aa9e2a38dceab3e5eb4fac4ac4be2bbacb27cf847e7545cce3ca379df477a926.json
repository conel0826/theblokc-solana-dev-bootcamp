{"ast":null,"code":"var _jsxFileName = \"/home/conel0826/theblokc-solana-dev-bootcamp/my-app/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\n// import { ConnectionProvider, WalletProvider } from '@solana/wallet-adapter-react';\n\nimport { Connection } from '@solana/web3.js';\nconst network = 'https://api.mainnet-beta.solana.com';\nconst connection = new Connection(network);\nimport { Transaction, sendAndConfirmTransaction, Wallet } from '@solana/web3.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst createAndSignTransaction = async wallet => {\n  const transaction = new Transaction();\n  // Add instructions to the transaction\n\n  // Sign the transaction using the user's wallet\n  const signedTransaction = await wallet.signTransaction(transaction);\n\n  // Submit the signed transaction to the Solana network\n  const signature = await sendAndConfirmTransaction(connection, signedTransaction);\n  console.log('Transaction submitted:', signature);\n};\nfunction App() {\n  _s();\n  const [selectedOption, setSelectedOption] = useState('');\n  const options = ['Option 1', 'Option 2', 'Option 3'];\n  const handleOptionChange = event => {\n    setSelectedOption(event.target.value);\n  };\n\n  // Declare a state variable for input box\n  const [inputValue, setInputValue] = useState(\"\");\n\n  // Function to handle the onClick event of first button\n  const handleFirstButton = () => {\n    console.log('First Button Clicked');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"First,\", ' ', /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: ConnectWalletButton,\n      children: \"click here to connect your local phantom wallet\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), \", then,\", ' ', /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: inputValue,\n      onChange: e => setInputValue(e.target.value),\n      placeholder: \"input any text here\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), \", afterward,\", ' ', /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleFirstButton,\n      children: \"click here to submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), \", note this submission, and more alike, are sent to the Solana blockchain, with an associated public address; If such exists, you may,\", ' ', /*#__PURE__*/_jsxDEV(\"select\", {\n      value: selectedOption,\n      onChange: handleOptionChange,\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        hidden: true,\n        value: \"\",\n        children: \"view and select here\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), options.map((option, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: option,\n        children: option\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), \", and here its associated submitted text: \", selectedOption]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"U2CIiWD5hUmgDdlgHAuejUCINuU=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","Connection","network","connection","Transaction","sendAndConfirmTransaction","Wallet","jsxDEV","_jsxDEV","createAndSignTransaction","wallet","transaction","signedTransaction","signTransaction","signature","console","log","App","_s","selectedOption","setSelectedOption","options","handleOptionChange","event","target","value","inputValue","setInputValue","handleFirstButton","children","onClick","ConnectWalletButton","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","e","placeholder","hidden","map","option","index","_c","$RefreshReg$"],"sources":["/home/conel0826/theblokc-solana-dev-bootcamp/my-app/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\n// import { ConnectionProvider, WalletProvider } from '@solana/wallet-adapter-react';\n\nimport { Connection } from '@solana/web3.js';\n\n     const network = 'https://api.mainnet-beta.solana.com';\n     const connection = new Connection(network);\n\nimport { Transaction, sendAndConfirmTransaction, Wallet } from '@solana/web3.js';\n\nconst createAndSignTransaction = async (wallet: Wallet) => {\n  const transaction = new Transaction();\n  // Add instructions to the transaction\n\n  // Sign the transaction using the user's wallet\n  const signedTransaction = await wallet.signTransaction(transaction);\n\n  // Submit the signed transaction to the Solana network\n  const signature = await sendAndConfirmTransaction(connection, signedTransaction);\n\n  console.log('Transaction submitted:', signature);\n};\n\n\n\n\nfunction App() {\n  const [selectedOption, setSelectedOption] = useState('');\n\n  const options = ['Option 1', 'Option 2', 'Option 3'];\n\n  const handleOptionChange = (event) => {\n    setSelectedOption(event.target.value);\n  };\n  \n  // Declare a state variable for input box\n  const [inputValue, setInputValue] = useState(\"\");\n\n  // Function to handle the onClick event of first button\n  const handleFirstButton = () => {\n    console.log('First Button Clicked');\n  };\n\n  return (\n    <div>\n      First,{' '}\n      <button onClick={ConnectWalletButton}>\n        click here to connect your local phantom wallet\n      </button>\n      , then,{' '}\n      <input \n        type=\"text\" \n        value={inputValue} \n        onChange={ e => setInputValue(e.target.value)}\n        placeholder=\"input any text here\"\n      />\n      , afterward,{' '}\n      <button onClick={handleFirstButton}>\n        click here to submit\n      </button>\n      , note this submission, and more alike, \n      are sent to the Solana blockchain, \n      with an associated public address; \n      If such exists, you may,{' '}\n      <select \n        value={selectedOption} \n        onChange={handleOptionChange}\n      >\n        <option hidden value=''>view and select here</option>\n        {options.map((option, index) => (\n          <option key={index} value={option}>\n            {option}\n          </option>\n        ))}\n      </select>\n      , and here its associated submitted text: {selectedOption}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}