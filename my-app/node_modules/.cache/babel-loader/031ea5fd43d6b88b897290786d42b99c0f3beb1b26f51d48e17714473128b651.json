{"ast":null,"code":"import _classCallCheck from '@babel/runtime/helpers/classCallCheck';\nimport _createClass from '@babel/runtime/helpers/createClass';\nimport { Buffer } from 'buffer';\nimport { ed25519 } from '@noble/curves/ed25519';\nimport _asyncToGenerator from '@babel/runtime/helpers/asyncToGenerator';\nimport _inherits from '@babel/runtime/helpers/inherits';\nimport _possibleConstructorReturn from '@babel/runtime/helpers/possibleConstructorReturn';\nimport _getPrototypeOf from '@babel/runtime/helpers/getPrototypeOf';\nimport _regeneratorRuntime from '@babel/runtime/regenerator';\nimport BN from 'bn.js';\nimport bs58 from 'bs58';\nimport { sha256 } from '@noble/hashes/sha256';\nimport { serialize, deserialize, deserializeUnchecked } from 'borsh';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport { blob } from '@solana/buffer-layout';\nimport _slicedToArray from '@babel/runtime/helpers/slicedToArray';\nimport { toBigIntLE, toBufferLE } from 'bigint-buffer';\nimport _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport _toConsumableArray from '@babel/runtime/helpers/toConsumableArray';\nimport _typeof from '@babel/runtime/helpers/typeof';\nimport _objectWithoutProperties from '@babel/runtime/helpers/objectWithoutProperties';\nimport { coerce, instance, string, tuple, literal, unknown, type, number, array, nullable, optional, boolean, record, union, create, any, assert as assert$1 } from 'superstruct';\nimport RpcClient from 'jayson/lib/client/browser';\nimport _wrapNativeSuper from '@babel/runtime/helpers/wrapNativeSuper';\nimport _get from '@babel/runtime/helpers/get';\nimport RpcWebSocketCommonClient from 'rpc-websockets/dist/lib/client';\nimport createRpc from 'rpc-websockets/dist/lib/client/websocket.browser';\nimport { keccak_256 } from '@noble/hashes/sha3';\nimport { secp256k1 } from '@noble/curves/secp256k1';\n\n/**\n * A 64 byte secret key, the first 32 bytes of which is the\n * private scalar and the last 32 bytes is the public key.\n * Read more: https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/\n */\n\n/**\n * Ed25519 Keypair\n */\n\nvar generatePrivateKey = ed25519.utils.randomPrivateKey;\nvar generateKeypair = function generateKeypair() {\n  var privateScalar = ed25519.utils.randomPrivateKey();\n  var publicKey = getPublicKey(privateScalar);\n  var secretKey = new Uint8Array(64);\n  secretKey.set(privateScalar);\n  secretKey.set(publicKey, 32);\n  return {\n    publicKey: publicKey,\n    secretKey: secretKey\n  };\n};\nvar getPublicKey = ed25519.getPublicKey;\nfunction isOnCurve(publicKey) {\n  try {\n    ed25519.ExtendedPoint.fromHex(publicKey);\n    return true;\n  } catch (_unused) {\n    return false;\n  }\n}\nvar sign = function sign(message, secretKey) {\n  return ed25519.sign(message, secretKey.slice(0, 32));\n};\nvar verify = ed25519.verify;\nvar toBuffer = function toBuffer(arr) {\n  if (Buffer.isBuffer(arr)) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return Buffer.from(arr);\n  }\n};\nfunction _createSuper$4(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct$4();\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n      result;\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n    return _possibleConstructorReturn(this, result);\n  };\n}\nfunction _isNativeReflectConstruct$4() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n// Class wrapping a plain object\nvar Struct = /*#__PURE__*/function () {\n  function Struct(properties) {\n    _classCallCheck(this, Struct);\n    Object.assign(this, properties);\n  }\n  _createClass(Struct, [{\n    key: \"encode\",\n    value: function encode() {\n      return Buffer.from(serialize(SOLANA_SCHEMA, this));\n    }\n  }], [{\n    key: \"decode\",\n    value: function decode(data) {\n      return deserialize(SOLANA_SCHEMA, this, data);\n    }\n  }, {\n    key: \"decodeUnchecked\",\n    value: function decodeUnchecked(data) {\n      return deserializeUnchecked(SOLANA_SCHEMA, this, data);\n    }\n  }]);\n  return Struct;\n}();\n\n// Class representing a Rust-compatible enum, since enums are only strings or\n// numbers in pure JS\nvar Enum = /*#__PURE__*/function (_Struct) {\n  _inherits(Enum, _Struct);\n  var _super = _createSuper$4(Enum);\n  function Enum(properties) {\n    var _this;\n    _classCallCheck(this, Enum);\n    _this = _super.call(this, properties);\n    _this[\"enum\"] = '';\n    if (Object.keys(properties).length !== 1) {\n      throw new Error('Enum can only take single value');\n    }\n    Object.keys(properties).map(function (key) {\n      _this[\"enum\"] = key;\n    });\n    return _this;\n  }\n  return _createClass(Enum);\n}(Struct);\nvar SOLANA_SCHEMA = new Map();\nvar _Symbol$toStringTag;\nfunction _createSuper$3(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct$3();\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n      result;\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n    return _possibleConstructorReturn(this, result);\n  };\n}\nfunction _isNativeReflectConstruct$3() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Maximum length of derived pubkey seed\n */\nvar MAX_SEED_LENGTH = 32;\n\n/**\n * Size of public key in bytes\n */\nvar PUBLIC_KEY_LENGTH = 32;\n\n/**\n * Value to be converted into public key\n */\n\n/**\n * JSON object representation of PublicKey class\n */\n\nfunction isPublicKeyData(value) {\n  return value._bn !== undefined;\n}\n\n// local counter used by PublicKey.unique()\nvar uniquePublicKeyCounter = 1;\n\n/**\n * A public key\n */\n_Symbol$toStringTag = Symbol.toStringTag;\nvar PublicKey = /*#__PURE__*/function (_Struct) {\n  _inherits(PublicKey, _Struct);\n  var _super = _createSuper$3(PublicKey);\n  /**\n   * Create a new PublicKey object\n   * @param value ed25519 public key as buffer or base-58 encoded string\n   */\n  function PublicKey(value) {\n    var _this;\n    _classCallCheck(this, PublicKey);\n    _this = _super.call(this, {});\n    /** @internal */\n    _this._bn = void 0;\n    if (isPublicKeyData(value)) {\n      _this._bn = value._bn;\n    } else {\n      if (typeof value === 'string') {\n        // assume base 58 encoding by default\n        var decoded = bs58.decode(value);\n        if (decoded.length != PUBLIC_KEY_LENGTH) {\n          throw new Error(\"Invalid public key input\");\n        }\n        _this._bn = new BN(decoded);\n      } else {\n        _this._bn = new BN(value);\n      }\n      if (_this._bn.byteLength() > PUBLIC_KEY_LENGTH) {\n        throw new Error(\"Invalid public key input\");\n      }\n    }\n    return _this;\n  }\n\n  /**\n   * Returns a unique PublicKey for tests and benchmarks using a counter\n   */\n  _createClass(PublicKey, [{\n    key: \"equals\",\n    value:\n    /**\n     * Checks if two publicKeys are equal\n     */\n    function equals(publicKey) {\n      return this._bn.eq(publicKey._bn);\n    }\n\n    /**\n     * Return the base-58 representation of the public key\n     */\n  }, {\n    key: \"toBase58\",\n    value: function toBase58() {\n      return bs58.encode(this.toBytes());\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return this.toBase58();\n    }\n\n    /**\n     * Return the byte array representation of the public key in big endian\n     */\n  }, {\n    key: \"toBytes\",\n    value: function toBytes() {\n      var buf = this.toBuffer();\n      return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);\n    }\n\n    /**\n     * Return the Buffer representation of the public key in big endian\n     */\n  }, {\n    key: \"toBuffer\",\n    value: function toBuffer() {\n      var b = this._bn.toArrayLike(Buffer);\n      if (b.length === PUBLIC_KEY_LENGTH) {\n        return b;\n      }\n      var zeroPad = Buffer.alloc(32);\n      b.copy(zeroPad, 32 - b.length);\n      return zeroPad;\n    }\n  }, {\n    key: _Symbol$toStringTag,\n    get: function get() {\n      return \"PublicKey(\".concat(this.toString(), \")\");\n    }\n\n    /**\n     * Return the base-58 representation of the public key\n     */\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return this.toBase58();\n    }\n\n    /**\n     * Derive a public key from another key, a seed, and a program ID.\n     * The program ID will also serve as the owner of the public key, giving\n     * it permission to write data to the account.\n     */\n    /* eslint-disable require-await */\n  }], [{\n    key: \"unique\",\n    value: function unique() {\n      var key = new PublicKey(uniquePublicKeyCounter);\n      uniquePublicKeyCounter += 1;\n      return new PublicKey(key.toBuffer());\n    }\n\n    /**\n     * Default public key value. The base58-encoded string representation is all ones (as seen below)\n     * The underlying BN number is 32 bytes that are all zeros\n     */\n  }, {\n    key: \"createWithSeed\",\n    value: function () {\n      var _createWithSeed = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(fromPublicKey, seed, programId) {\n        var buffer, publicKeyBytes;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              buffer = Buffer.concat([fromPublicKey.toBuffer(), Buffer.from(seed), programId.toBuffer()]);\n              publicKeyBytes = sha256(buffer);\n              return _context.abrupt(\"return\", new PublicKey(publicKeyBytes));\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      }));\n      function createWithSeed(_x, _x2, _x3) {\n        return _createWithSeed.apply(this, arguments);\n      }\n      return createWithSeed;\n    }()\n    /**\n     * Derive a program address from seeds and a program ID.\n     */\n    /* eslint-disable require-await */\n  }, {\n    key: \"createProgramAddressSync\",\n    value: function createProgramAddressSync(seeds, programId) {\n      var buffer = Buffer.alloc(0);\n      seeds.forEach(function (seed) {\n        if (seed.length > MAX_SEED_LENGTH) {\n          throw new TypeError(\"Max seed length exceeded\");\n        }\n        buffer = Buffer.concat([buffer, toBuffer(seed)]);\n      });\n      buffer = Buffer.concat([buffer, programId.toBuffer(), Buffer.from('ProgramDerivedAddress')]);\n      var publicKeyBytes = sha256(buffer);\n      if (isOnCurve(publicKeyBytes)) {\n        throw new Error(\"Invalid seeds, address must fall off the curve\");\n      }\n      return new PublicKey(publicKeyBytes);\n    }\n\n    /**\n     * Async version of createProgramAddressSync\n     * For backwards compatibility\n     *\n     * @deprecated Use {@link createProgramAddressSync} instead\n     */\n    /* eslint-disable require-await */\n  }, {\n    key: \"createProgramAddress\",\n    value: function () {\n      var _createProgramAddress = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(seeds, programId) {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              return _context2.abrupt(\"return\", this.createProgramAddressSync(seeds, programId));\n            case 1:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n      function createProgramAddress(_x4, _x5) {\n        return _createProgramAddress.apply(this, arguments);\n      }\n      return createProgramAddress;\n    }()\n    /**\n     * Find a valid program address\n     *\n     * Valid program addresses must fall off the ed25519 curve.  This function\n     * iterates a nonce until it finds one that when combined with the seeds\n     * results in a valid program address.\n     */\n  }, {\n    key: \"findProgramAddressSync\",\n    value: function findProgramAddressSync(seeds, programId) {\n      var nonce = 255;\n      var address;\n      while (nonce != 0) {\n        try {\n          var seedsWithNonce = seeds.concat(Buffer.from([nonce]));\n          address = this.createProgramAddressSync(seedsWithNonce, programId);\n        } catch (err) {\n          if (err instanceof TypeError) {\n            throw err;\n          }\n          nonce--;\n          continue;\n        }\n        return [address, nonce];\n      }\n      throw new Error(\"Unable to find a viable program address nonce\");\n    }\n\n    /**\n     * Async version of findProgramAddressSync\n     * For backwards compatibility\n     *\n     * @deprecated Use {@link findProgramAddressSync} instead\n     */\n  }, {\n    key: \"findProgramAddress\",\n    value: function () {\n      var _findProgramAddress = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(seeds, programId) {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              return _context3.abrupt(\"return\", this.findProgramAddressSync(seeds, programId));\n            case 1:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this);\n      }));\n      function findProgramAddress(_x6, _x7) {\n        return _findProgramAddress.apply(this, arguments);\n      }\n      return findProgramAddress;\n    }()\n    /**\n     * Check that a pubkey is on the ed25519 curve.\n     */\n  }, {\n    key: \"isOnCurve\",\n    value: function isOnCurve$1(pubkeyData) {\n      var pubkey = new PublicKey(pubkeyData);\n      return isOnCurve(pubkey.toBytes());\n    }\n  }]);\n  return PublicKey;\n}(Struct);\nPublicKey[\"default\"] = new PublicKey('11111111111111111111111111111111');\nSOLANA_SCHEMA.set(PublicKey, {\n  kind: 'struct',\n  fields: [['_bn', 'u256']]\n});\n\n/**\n * An account key pair (public and secret keys).\n *\n * @deprecated since v1.10.0, please use {@link Keypair} instead.\n */\nvar Account = /*#__PURE__*/function () {\n  /**\n   * Create a new Account object\n   *\n   * If the secretKey parameter is not provided a new key pair is randomly\n   * created for the account\n   *\n   * @param secretKey Secret key for the account\n   */\n  function Account(secretKey) {\n    _classCallCheck(this, Account);\n    /** @internal */\n    this._publicKey = void 0;\n    /** @internal */\n    this._secretKey = void 0;\n    if (secretKey) {\n      var secretKeyBuffer = toBuffer(secretKey);\n      if (secretKey.length !== 64) {\n        throw new Error('bad secret key size');\n      }\n      this._publicKey = secretKeyBuffer.slice(32, 64);\n      this._secretKey = secretKeyBuffer.slice(0, 32);\n    } else {\n      this._secretKey = toBuffer(generatePrivateKey());\n      this._publicKey = toBuffer(getPublicKey(this._secretKey));\n    }\n  }\n\n  /**\n   * The public key for this account\n   */\n  _createClass(Account, [{\n    key: \"publicKey\",\n    get: function get() {\n      return new PublicKey(this._publicKey);\n    }\n\n    /**\n     * The **unencrypted** secret key for this account. The first 32 bytes\n     * is the private scalar and the last 32 bytes is the public key.\n     * Read more: https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/\n     */\n  }, {\n    key: \"secretKey\",\n    get: function get() {\n      return Buffer.concat([this._secretKey, this._publicKey], 64);\n    }\n  }]);\n  return Account;\n}();\nvar BPF_LOADER_DEPRECATED_PROGRAM_ID = new PublicKey('BPFLoader1111111111111111111111111111111111');\n\n/**\n * Maximum over-the-wire size of a Transaction\n *\n * 1280 is IPv6 minimum MTU\n * 40 bytes is the size of the IPv6 header\n * 8 bytes is the size of the fragment header\n */\nvar PACKET_DATA_SIZE = 1280 - 40 - 8;\nvar VERSION_PREFIX_MASK = 0x7f;\nvar SIGNATURE_LENGTH_IN_BYTES = 64;\nfunction _createSuper$2(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct$2();\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n      result;\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n    return _possibleConstructorReturn(this, result);\n  };\n}\nfunction _isNativeReflectConstruct$2() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\nvar TransactionExpiredBlockheightExceededError = /*#__PURE__*/function (_Error) {\n  _inherits(TransactionExpiredBlockheightExceededError, _Error);\n  var _super = _createSuper$2(TransactionExpiredBlockheightExceededError);\n  function TransactionExpiredBlockheightExceededError(signature) {\n    var _this;\n    _classCallCheck(this, TransactionExpiredBlockheightExceededError);\n    _this = _super.call(this, \"Signature \".concat(signature, \" has expired: block height exceeded.\"));\n    _this.signature = void 0;\n    _this.signature = signature;\n    return _this;\n  }\n  return _createClass(TransactionExpiredBlockheightExceededError);\n}( /*#__PURE__*/_wrapNativeSuper(Error));\nObject.defineProperty(TransactionExpiredBlockheightExceededError.prototype, 'name', {\n  value: 'TransactionExpiredBlockheightExceededError'\n});\nvar TransactionExpiredTimeoutError = /*#__PURE__*/function (_Error2) {\n  _inherits(TransactionExpiredTimeoutError, _Error2);\n  var _super2 = _createSuper$2(TransactionExpiredTimeoutError);\n  function TransactionExpiredTimeoutError(signature, timeoutSeconds) {\n    var _this2;\n    _classCallCheck(this, TransactionExpiredTimeoutError);\n    _this2 = _super2.call(this, \"Transaction was not confirmed in \".concat(timeoutSeconds.toFixed(2), \" seconds. It is \") + 'unknown if it succeeded or failed. Check signature ' + \"\".concat(signature, \" using the Solana Explorer or CLI tools.\"));\n    _this2.signature = void 0;\n    _this2.signature = signature;\n    return _this2;\n  }\n  return _createClass(TransactionExpiredTimeoutError);\n}( /*#__PURE__*/_wrapNativeSuper(Error));\nObject.defineProperty(TransactionExpiredTimeoutError.prototype, 'name', {\n  value: 'TransactionExpiredTimeoutError'\n});\nvar TransactionExpiredNonceInvalidError = /*#__PURE__*/function (_Error3) {\n  _inherits(TransactionExpiredNonceInvalidError, _Error3);\n  var _super3 = _createSuper$2(TransactionExpiredNonceInvalidError);\n  function TransactionExpiredNonceInvalidError(signature) {\n    var _this3;\n    _classCallCheck(this, TransactionExpiredNonceInvalidError);\n    _this3 = _super3.call(this, \"Signature \".concat(signature, \" has expired: the nonce is no longer valid.\"));\n    _this3.signature = void 0;\n    _this3.signature = signature;\n    return _this3;\n  }\n  return _createClass(TransactionExpiredNonceInvalidError);\n}( /*#__PURE__*/_wrapNativeSuper(Error));\nObject.defineProperty(TransactionExpiredNonceInvalidError.prototype, 'name', {\n  value: 'TransactionExpiredNonceInvalidError'\n});\nfunction _createForOfIteratorHelper$5(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (!it) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray$5(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n      var F = function F() {};\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n  var normalCompletion = true,\n    didErr = false,\n    err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\nfunction _unsupportedIterableToArray$5(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray$5(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$5(o, minLen);\n}\nfunction _arrayLikeToArray$5(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n  return arr2;\n}\nvar MessageAccountKeys = /*#__PURE__*/function () {\n  function MessageAccountKeys(staticAccountKeys, accountKeysFromLookups) {\n    _classCallCheck(this, MessageAccountKeys);\n    this.staticAccountKeys = void 0;\n    this.accountKeysFromLookups = void 0;\n    this.staticAccountKeys = staticAccountKeys;\n    this.accountKeysFromLookups = accountKeysFromLookups;\n  }\n  _createClass(MessageAccountKeys, [{\n    key: \"keySegments\",\n    value: function keySegments() {\n      var keySegments = [this.staticAccountKeys];\n      if (this.accountKeysFromLookups) {\n        keySegments.push(this.accountKeysFromLookups.writable);\n        keySegments.push(this.accountKeysFromLookups.readonly);\n      }\n      return keySegments;\n    }\n  }, {\n    key: \"get\",\n    value: function get(index) {\n      var _iterator = _createForOfIteratorHelper$5(this.keySegments()),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var keySegment = _step.value;\n          if (index < keySegment.length) {\n            return keySegment[index];\n          } else {\n            index -= keySegment.length;\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      return;\n    }\n  }, {\n    key: \"length\",\n    get: function get() {\n      return this.keySegments().flat().length;\n    }\n  }, {\n    key: \"compileInstructions\",\n    value: function compileInstructions(instructions) {\n      // Bail early if any account indexes would overflow a u8\n      var U8_MAX = 255;\n      if (this.length > U8_MAX + 1) {\n        throw new Error('Account index overflow encountered during compilation');\n      }\n      var keyIndexMap = new Map();\n      this.keySegments().flat().forEach(function (key, index) {\n        keyIndexMap.set(key.toBase58(), index);\n      });\n      var findKeyIndex = function findKeyIndex(key) {\n        var keyIndex = keyIndexMap.get(key.toBase58());\n        if (keyIndex === undefined) throw new Error('Encountered an unknown instruction account key during compilation');\n        return keyIndex;\n      };\n      return instructions.map(function (instruction) {\n        return {\n          programIdIndex: findKeyIndex(instruction.programId),\n          accountKeyIndexes: instruction.keys.map(function (meta) {\n            return findKeyIndex(meta.pubkey);\n          }),\n          data: instruction.data\n        };\n      });\n    }\n  }]);\n  return MessageAccountKeys;\n}();\n\n/**\n * Layout for a public key\n */\nvar publicKey = function publicKey() {\n  var property = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'publicKey';\n  return BufferLayout.blob(32, property);\n};\n\n/**\n * Layout for a signature\n */\nvar signature = function signature() {\n  var property = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'signature';\n  return BufferLayout.blob(64, property);\n};\n/**\n * Layout for a Rust String type\n */\nvar rustString = function rustString() {\n  var property = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'string';\n  var rsl = BufferLayout.struct([BufferLayout.u32('length'), BufferLayout.u32('lengthPadding'), BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), 'chars')], property);\n  var _decode = rsl.decode.bind(rsl);\n  var _encode = rsl.encode.bind(rsl);\n  var rslShim = rsl;\n  rslShim.decode = function (b, offset) {\n    var data = _decode(b, offset);\n    return data['chars'].toString();\n  };\n  rslShim.encode = function (str, b, offset) {\n    var data = {\n      chars: Buffer.from(str, 'utf8')\n    };\n    return _encode(data, b, offset);\n  };\n  rslShim.alloc = function (str) {\n    return BufferLayout.u32().span + BufferLayout.u32().span + Buffer.from(str, 'utf8').length;\n  };\n  return rslShim;\n};\n\n/**\n * Layout for an Authorized object\n */\nvar authorized = function authorized() {\n  var property = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'authorized';\n  return BufferLayout.struct([publicKey('staker'), publicKey('withdrawer')], property);\n};\n\n/**\n * Layout for a Lockup object\n */\nvar lockup = function lockup() {\n  var property = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'lockup';\n  return BufferLayout.struct([BufferLayout.ns64('unixTimestamp'), BufferLayout.ns64('epoch'), publicKey('custodian')], property);\n};\n\n/**\n *  Layout for a VoteInit object\n */\nvar voteInit = function voteInit() {\n  var property = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'voteInit';\n  return BufferLayout.struct([publicKey('nodePubkey'), publicKey('authorizedVoter'), publicKey('authorizedWithdrawer'), BufferLayout.u8('commission')], property);\n};\n\n/**\n *  Layout for a VoteAuthorizeWithSeedArgs object\n */\nvar voteAuthorizeWithSeedArgs = function voteAuthorizeWithSeedArgs() {\n  var property = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'voteAuthorizeWithSeedArgs';\n  return BufferLayout.struct([BufferLayout.u32('voteAuthorizationType'), publicKey('currentAuthorityDerivedKeyOwnerPubkey'), rustString('currentAuthorityDerivedKeySeed'), publicKey('newAuthorized')], property);\n};\nfunction getAlloc(type, fields) {\n  var getItemAlloc = function getItemAlloc(item) {\n    if (item.span >= 0) {\n      return item.span;\n    } else if (typeof item.alloc === 'function') {\n      return item.alloc(fields[item.property]);\n    } else if ('count' in item && 'elementLayout' in item) {\n      var field = fields[item.property];\n      if (Array.isArray(field)) {\n        return field.length * getItemAlloc(item.elementLayout);\n      }\n    } else if ('fields' in item) {\n      // This is a `Structure` whose size needs to be recursively measured.\n      return getAlloc({\n        layout: item\n      }, fields[item.property]);\n    }\n    // Couldn't determine allocated size of layout\n    return 0;\n  };\n  var alloc = 0;\n  type.layout.fields.forEach(function (item) {\n    alloc += getItemAlloc(item);\n  });\n  return alloc;\n}\nfunction decodeLength(bytes) {\n  var len = 0;\n  var size = 0;\n  for (;;) {\n    var elem = bytes.shift();\n    len |= (elem & 0x7f) << size * 7;\n    size += 1;\n    if ((elem & 0x80) === 0) {\n      break;\n    }\n  }\n  return len;\n}\nfunction encodeLength(bytes, len) {\n  var rem_len = len;\n  for (;;) {\n    var elem = rem_len & 0x7f;\n    rem_len >>= 7;\n    if (rem_len == 0) {\n      bytes.push(elem);\n      break;\n    } else {\n      elem |= 0x80;\n      bytes.push(elem);\n    }\n  }\n}\nfunction assert(condition, message) {\n  if (!condition) {\n    throw new Error(message || 'Assertion failed');\n  }\n}\nfunction _createForOfIteratorHelper$4(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (!it) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray$4(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n      var F = function F() {};\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n  var normalCompletion = true,\n    didErr = false,\n    err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\nfunction _unsupportedIterableToArray$4(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray$4(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$4(o, minLen);\n}\nfunction _arrayLikeToArray$4(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n  return arr2;\n}\nvar CompiledKeys = /*#__PURE__*/function () {\n  function CompiledKeys(payer, keyMetaMap) {\n    _classCallCheck(this, CompiledKeys);\n    this.payer = void 0;\n    this.keyMetaMap = void 0;\n    this.payer = payer;\n    this.keyMetaMap = keyMetaMap;\n  }\n  _createClass(CompiledKeys, [{\n    key: \"getMessageComponents\",\n    value: function getMessageComponents() {\n      var mapEntries = _toConsumableArray(this.keyMetaMap.entries());\n      assert(mapEntries.length <= 256, 'Max static account keys length exceeded');\n      var writableSigners = mapEntries.filter(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 2),\n          meta = _ref2[1];\n        return meta.isSigner && meta.isWritable;\n      });\n      var readonlySigners = mapEntries.filter(function (_ref3) {\n        var _ref4 = _slicedToArray(_ref3, 2),\n          meta = _ref4[1];\n        return meta.isSigner && !meta.isWritable;\n      });\n      var writableNonSigners = mapEntries.filter(function (_ref5) {\n        var _ref6 = _slicedToArray(_ref5, 2),\n          meta = _ref6[1];\n        return !meta.isSigner && meta.isWritable;\n      });\n      var readonlyNonSigners = mapEntries.filter(function (_ref7) {\n        var _ref8 = _slicedToArray(_ref7, 2),\n          meta = _ref8[1];\n        return !meta.isSigner && !meta.isWritable;\n      });\n      var header = {\n        numRequiredSignatures: writableSigners.length + readonlySigners.length,\n        numReadonlySignedAccounts: readonlySigners.length,\n        numReadonlyUnsignedAccounts: readonlyNonSigners.length\n      };\n\n      // sanity checks\n      {\n        assert(writableSigners.length > 0, 'Expected at least one writable signer key');\n        var _writableSigners$ = _slicedToArray(writableSigners[0], 1),\n          payerAddress = _writableSigners$[0];\n        assert(payerAddress === this.payer.toBase58(), 'Expected first writable signer key to be the fee payer');\n      }\n      var staticAccountKeys = [].concat(_toConsumableArray(writableSigners.map(function (_ref9) {\n        var _ref10 = _slicedToArray(_ref9, 1),\n          address = _ref10[0];\n        return new PublicKey(address);\n      })), _toConsumableArray(readonlySigners.map(function (_ref11) {\n        var _ref12 = _slicedToArray(_ref11, 1),\n          address = _ref12[0];\n        return new PublicKey(address);\n      })), _toConsumableArray(writableNonSigners.map(function (_ref13) {\n        var _ref14 = _slicedToArray(_ref13, 1),\n          address = _ref14[0];\n        return new PublicKey(address);\n      })), _toConsumableArray(readonlyNonSigners.map(function (_ref15) {\n        var _ref16 = _slicedToArray(_ref15, 1),\n          address = _ref16[0];\n        return new PublicKey(address);\n      })));\n      return [header, staticAccountKeys];\n    }\n  }, {\n    key: \"extractTableLookup\",\n    value: function extractTableLookup(lookupTable) {\n      var _this$drainKeysFoundI = this.drainKeysFoundInLookupTable(lookupTable.state.addresses, function (keyMeta) {\n          return !keyMeta.isSigner && !keyMeta.isInvoked && keyMeta.isWritable;\n        }),\n        _this$drainKeysFoundI2 = _slicedToArray(_this$drainKeysFoundI, 2),\n        writableIndexes = _this$drainKeysFoundI2[0],\n        drainedWritableKeys = _this$drainKeysFoundI2[1];\n      var _this$drainKeysFoundI3 = this.drainKeysFoundInLookupTable(lookupTable.state.addresses, function (keyMeta) {\n          return !keyMeta.isSigner && !keyMeta.isInvoked && !keyMeta.isWritable;\n        }),\n        _this$drainKeysFoundI4 = _slicedToArray(_this$drainKeysFoundI3, 2),\n        readonlyIndexes = _this$drainKeysFoundI4[0],\n        drainedReadonlyKeys = _this$drainKeysFoundI4[1];\n\n      // Don't extract lookup if no keys were found\n      if (writableIndexes.length === 0 && readonlyIndexes.length === 0) {\n        return;\n      }\n      return [{\n        accountKey: lookupTable.key,\n        writableIndexes: writableIndexes,\n        readonlyIndexes: readonlyIndexes\n      }, {\n        writable: drainedWritableKeys,\n        readonly: drainedReadonlyKeys\n      }];\n    }\n\n    /** @internal */\n  }, {\n    key: \"drainKeysFoundInLookupTable\",\n    value: function drainKeysFoundInLookupTable(lookupTableEntries, keyMetaFilter) {\n      var _this = this;\n      var lookupTableIndexes = new Array();\n      var drainedKeys = new Array();\n      var _iterator = _createForOfIteratorHelper$4(this.keyMetaMap.entries()),\n        _step;\n      try {\n        var _loop = function _loop() {\n          var _step$value = _slicedToArray(_step.value, 2),\n            address = _step$value[0],\n            keyMeta = _step$value[1];\n          if (keyMetaFilter(keyMeta)) {\n            var key = new PublicKey(address);\n            var lookupTableIndex = lookupTableEntries.findIndex(function (entry) {\n              return entry.equals(key);\n            });\n            if (lookupTableIndex >= 0) {\n              assert(lookupTableIndex < 256, 'Max lookup table index exceeded');\n              lookupTableIndexes.push(lookupTableIndex);\n              drainedKeys.push(key);\n              _this.keyMetaMap[\"delete\"](address);\n            }\n          }\n        };\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          _loop();\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      return [lookupTableIndexes, drainedKeys];\n    }\n  }], [{\n    key: \"compile\",\n    value: function compile(instructions, payer) {\n      var keyMetaMap = new Map();\n      var getOrInsertDefault = function getOrInsertDefault(pubkey) {\n        var address = pubkey.toBase58();\n        var keyMeta = keyMetaMap.get(address);\n        if (keyMeta === undefined) {\n          keyMeta = {\n            isSigner: false,\n            isWritable: false,\n            isInvoked: false\n          };\n          keyMetaMap.set(address, keyMeta);\n        }\n        return keyMeta;\n      };\n      var payerKeyMeta = getOrInsertDefault(payer);\n      payerKeyMeta.isSigner = true;\n      payerKeyMeta.isWritable = true;\n      var _iterator2 = _createForOfIteratorHelper$4(instructions),\n        _step2;\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var ix = _step2.value;\n          getOrInsertDefault(ix.programId).isInvoked = true;\n          var _iterator3 = _createForOfIteratorHelper$4(ix.keys),\n            _step3;\n          try {\n            for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n              var accountMeta = _step3.value;\n              var _keyMeta = getOrInsertDefault(accountMeta.pubkey);\n              _keyMeta.isSigner || (_keyMeta.isSigner = accountMeta.isSigner);\n              _keyMeta.isWritable || (_keyMeta.isWritable = accountMeta.isWritable);\n            }\n          } catch (err) {\n            _iterator3.e(err);\n          } finally {\n            _iterator3.f();\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n      return new CompiledKeys(payer, keyMetaMap);\n    }\n  }]);\n  return CompiledKeys;\n}();\n\n/**\n * An instruction to execute by a program\n *\n * @property {number} programIdIndex\n * @property {number[]} accounts\n * @property {string} data\n */\n\n/**\n * Message constructor arguments\n */\n\n/**\n * List of instructions to be processed atomically\n */\nvar Message = /*#__PURE__*/function () {\n  function Message(args) {\n    var _this = this;\n    _classCallCheck(this, Message);\n    this.header = void 0;\n    this.accountKeys = void 0;\n    this.recentBlockhash = void 0;\n    this.instructions = void 0;\n    this.indexToProgramIds = new Map();\n    this.header = args.header;\n    this.accountKeys = args.accountKeys.map(function (account) {\n      return new PublicKey(account);\n    });\n    this.recentBlockhash = args.recentBlockhash;\n    this.instructions = args.instructions;\n    this.instructions.forEach(function (ix) {\n      return _this.indexToProgramIds.set(ix.programIdIndex, _this.accountKeys[ix.programIdIndex]);\n    });\n  }\n  _createClass(Message, [{\n    key: \"version\",\n    get: function get() {\n      return 'legacy';\n    }\n  }, {\n    key: \"staticAccountKeys\",\n    get: function get() {\n      return this.accountKeys;\n    }\n  }, {\n    key: \"compiledInstructions\",\n    get: function get() {\n      return this.instructions.map(function (ix) {\n        return {\n          programIdIndex: ix.programIdIndex,\n          accountKeyIndexes: ix.accounts,\n          data: bs58.decode(ix.data)\n        };\n      });\n    }\n  }, {\n    key: \"addressTableLookups\",\n    get: function get() {\n      return [];\n    }\n  }, {\n    key: \"getAccountKeys\",\n    value: function getAccountKeys() {\n      return new MessageAccountKeys(this.staticAccountKeys);\n    }\n  }, {\n    key: \"isAccountSigner\",\n    value: function isAccountSigner(index) {\n      return index < this.header.numRequiredSignatures;\n    }\n  }, {\n    key: \"isAccountWritable\",\n    value: function isAccountWritable(index) {\n      var numSignedAccounts = this.header.numRequiredSignatures;\n      if (index >= this.header.numRequiredSignatures) {\n        var unsignedAccountIndex = index - numSignedAccounts;\n        var numUnsignedAccounts = this.accountKeys.length - numSignedAccounts;\n        var numWritableUnsignedAccounts = numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;\n        return unsignedAccountIndex < numWritableUnsignedAccounts;\n      } else {\n        var numWritableSignedAccounts = numSignedAccounts - this.header.numReadonlySignedAccounts;\n        return index < numWritableSignedAccounts;\n      }\n    }\n  }, {\n    key: \"isProgramId\",\n    value: function isProgramId(index) {\n      return this.indexToProgramIds.has(index);\n    }\n  }, {\n    key: \"programIds\",\n    value: function programIds() {\n      return _toConsumableArray(this.indexToProgramIds.values());\n    }\n  }, {\n    key: \"nonProgramIds\",\n    value: function nonProgramIds() {\n      var _this2 = this;\n      return this.accountKeys.filter(function (_, index) {\n        return !_this2.isProgramId(index);\n      });\n    }\n  }, {\n    key: \"serialize\",\n    value: function serialize() {\n      var numKeys = this.accountKeys.length;\n      var keyCount = [];\n      encodeLength(keyCount, numKeys);\n      var instructions = this.instructions.map(function (instruction) {\n        var accounts = instruction.accounts,\n          programIdIndex = instruction.programIdIndex;\n        var data = Array.from(bs58.decode(instruction.data));\n        var keyIndicesCount = [];\n        encodeLength(keyIndicesCount, accounts.length);\n        var dataCount = [];\n        encodeLength(dataCount, data.length);\n        return {\n          programIdIndex: programIdIndex,\n          keyIndicesCount: Buffer.from(keyIndicesCount),\n          keyIndices: accounts,\n          dataLength: Buffer.from(dataCount),\n          data: data\n        };\n      });\n      var instructionCount = [];\n      encodeLength(instructionCount, instructions.length);\n      var instructionBuffer = Buffer.alloc(PACKET_DATA_SIZE);\n      Buffer.from(instructionCount).copy(instructionBuffer);\n      var instructionBufferLength = instructionCount.length;\n      instructions.forEach(function (instruction) {\n        var instructionLayout = BufferLayout.struct([BufferLayout.u8('programIdIndex'), BufferLayout.blob(instruction.keyIndicesCount.length, 'keyIndicesCount'), BufferLayout.seq(BufferLayout.u8('keyIndex'), instruction.keyIndices.length, 'keyIndices'), BufferLayout.blob(instruction.dataLength.length, 'dataLength'), BufferLayout.seq(BufferLayout.u8('userdatum'), instruction.data.length, 'data')]);\n        var length = instructionLayout.encode(instruction, instructionBuffer, instructionBufferLength);\n        instructionBufferLength += length;\n      });\n      instructionBuffer = instructionBuffer.slice(0, instructionBufferLength);\n      var signDataLayout = BufferLayout.struct([BufferLayout.blob(1, 'numRequiredSignatures'), BufferLayout.blob(1, 'numReadonlySignedAccounts'), BufferLayout.blob(1, 'numReadonlyUnsignedAccounts'), BufferLayout.blob(keyCount.length, 'keyCount'), BufferLayout.seq(publicKey('key'), numKeys, 'keys'), publicKey('recentBlockhash')]);\n      var transaction = {\n        numRequiredSignatures: Buffer.from([this.header.numRequiredSignatures]),\n        numReadonlySignedAccounts: Buffer.from([this.header.numReadonlySignedAccounts]),\n        numReadonlyUnsignedAccounts: Buffer.from([this.header.numReadonlyUnsignedAccounts]),\n        keyCount: Buffer.from(keyCount),\n        keys: this.accountKeys.map(function (key) {\n          return toBuffer(key.toBytes());\n        }),\n        recentBlockhash: bs58.decode(this.recentBlockhash)\n      };\n      var signData = Buffer.alloc(2048);\n      var length = signDataLayout.encode(transaction, signData);\n      instructionBuffer.copy(signData, length);\n      return signData.slice(0, length + instructionBuffer.length);\n    }\n\n    /**\n     * Decode a compiled message into a Message object.\n     */\n  }], [{\n    key: \"compile\",\n    value: function compile(args) {\n      var compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);\n      var _compiledKeys$getMess = compiledKeys.getMessageComponents(),\n        _compiledKeys$getMess2 = _slicedToArray(_compiledKeys$getMess, 2),\n        header = _compiledKeys$getMess2[0],\n        staticAccountKeys = _compiledKeys$getMess2[1];\n      var accountKeys = new MessageAccountKeys(staticAccountKeys);\n      var instructions = accountKeys.compileInstructions(args.instructions).map(function (ix) {\n        return {\n          programIdIndex: ix.programIdIndex,\n          accounts: ix.accountKeyIndexes,\n          data: bs58.encode(ix.data)\n        };\n      });\n      return new Message({\n        header: header,\n        accountKeys: staticAccountKeys,\n        recentBlockhash: args.recentBlockhash,\n        instructions: instructions\n      });\n    }\n  }, {\n    key: \"from\",\n    value: function from(buffer) {\n      // Slice up wire data\n      var byteArray = _toConsumableArray(buffer);\n      var numRequiredSignatures = byteArray.shift();\n      if (numRequiredSignatures !== (numRequiredSignatures & VERSION_PREFIX_MASK)) {\n        throw new Error('Versioned messages must be deserialized with VersionedMessage.deserialize()');\n      }\n      var numReadonlySignedAccounts = byteArray.shift();\n      var numReadonlyUnsignedAccounts = byteArray.shift();\n      var accountCount = decodeLength(byteArray);\n      var accountKeys = [];\n      for (var i = 0; i < accountCount; i++) {\n        var account = byteArray.slice(0, PUBLIC_KEY_LENGTH);\n        byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n        accountKeys.push(new PublicKey(Buffer.from(account)));\n      }\n      var recentBlockhash = byteArray.slice(0, PUBLIC_KEY_LENGTH);\n      byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n      var instructionCount = decodeLength(byteArray);\n      var instructions = [];\n      for (var _i = 0; _i < instructionCount; _i++) {\n        var programIdIndex = byteArray.shift();\n        var _accountCount = decodeLength(byteArray);\n        var accounts = byteArray.slice(0, _accountCount);\n        byteArray = byteArray.slice(_accountCount);\n        var dataLength = decodeLength(byteArray);\n        var dataSlice = byteArray.slice(0, dataLength);\n        var data = bs58.encode(Buffer.from(dataSlice));\n        byteArray = byteArray.slice(dataLength);\n        instructions.push({\n          programIdIndex: programIdIndex,\n          accounts: accounts,\n          data: data\n        });\n      }\n      var messageArgs = {\n        header: {\n          numRequiredSignatures: numRequiredSignatures,\n          numReadonlySignedAccounts: numReadonlySignedAccounts,\n          numReadonlyUnsignedAccounts: numReadonlyUnsignedAccounts\n        },\n        recentBlockhash: bs58.encode(Buffer.from(recentBlockhash)),\n        accountKeys: accountKeys,\n        instructions: instructions\n      };\n      return new Message(messageArgs);\n    }\n  }]);\n  return Message;\n}();\nfunction _createForOfIteratorHelper$3(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (!it) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray$3(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n      var F = function F() {};\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n  var normalCompletion = true,\n    didErr = false,\n    err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\nfunction _unsupportedIterableToArray$3(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray$3(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$3(o, minLen);\n}\nfunction _arrayLikeToArray$3(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n  return arr2;\n}\n\n/**\n * Message constructor arguments\n */\n\nvar MessageV0 = /*#__PURE__*/function () {\n  function MessageV0(args) {\n    _classCallCheck(this, MessageV0);\n    this.header = void 0;\n    this.staticAccountKeys = void 0;\n    this.recentBlockhash = void 0;\n    this.compiledInstructions = void 0;\n    this.addressTableLookups = void 0;\n    this.header = args.header;\n    this.staticAccountKeys = args.staticAccountKeys;\n    this.recentBlockhash = args.recentBlockhash;\n    this.compiledInstructions = args.compiledInstructions;\n    this.addressTableLookups = args.addressTableLookups;\n  }\n  _createClass(MessageV0, [{\n    key: \"version\",\n    get: function get() {\n      return 0;\n    }\n  }, {\n    key: \"numAccountKeysFromLookups\",\n    get: function get() {\n      var count = 0;\n      var _iterator = _createForOfIteratorHelper$3(this.addressTableLookups),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var lookup = _step.value;\n          count += lookup.readonlyIndexes.length + lookup.writableIndexes.length;\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      return count;\n    }\n  }, {\n    key: \"getAccountKeys\",\n    value: function getAccountKeys(args) {\n      var accountKeysFromLookups;\n      if (args && 'accountKeysFromLookups' in args && args.accountKeysFromLookups) {\n        if (this.numAccountKeysFromLookups != args.accountKeysFromLookups.writable.length + args.accountKeysFromLookups.readonly.length) {\n          throw new Error('Failed to get account keys because of a mismatch in the number of account keys from lookups');\n        }\n        accountKeysFromLookups = args.accountKeysFromLookups;\n      } else if (args && 'addressLookupTableAccounts' in args && args.addressLookupTableAccounts) {\n        accountKeysFromLookups = this.resolveAddressTableLookups(args.addressLookupTableAccounts);\n      } else if (this.addressTableLookups.length > 0) {\n        throw new Error('Failed to get account keys because address table lookups were not resolved');\n      }\n      return new MessageAccountKeys(this.staticAccountKeys, accountKeysFromLookups);\n    }\n  }, {\n    key: \"isAccountSigner\",\n    value: function isAccountSigner(index) {\n      return index < this.header.numRequiredSignatures;\n    }\n  }, {\n    key: \"isAccountWritable\",\n    value: function isAccountWritable(index) {\n      var numSignedAccounts = this.header.numRequiredSignatures;\n      var numStaticAccountKeys = this.staticAccountKeys.length;\n      if (index >= numStaticAccountKeys) {\n        var lookupAccountKeysIndex = index - numStaticAccountKeys;\n        var numWritableLookupAccountKeys = this.addressTableLookups.reduce(function (count, lookup) {\n          return count + lookup.writableIndexes.length;\n        }, 0);\n        return lookupAccountKeysIndex < numWritableLookupAccountKeys;\n      } else if (index >= this.header.numRequiredSignatures) {\n        var unsignedAccountIndex = index - numSignedAccounts;\n        var numUnsignedAccounts = numStaticAccountKeys - numSignedAccounts;\n        var numWritableUnsignedAccounts = numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;\n        return unsignedAccountIndex < numWritableUnsignedAccounts;\n      } else {\n        var numWritableSignedAccounts = numSignedAccounts - this.header.numReadonlySignedAccounts;\n        return index < numWritableSignedAccounts;\n      }\n    }\n  }, {\n    key: \"resolveAddressTableLookups\",\n    value: function resolveAddressTableLookups(addressLookupTableAccounts) {\n      var accountKeysFromLookups = {\n        writable: [],\n        readonly: []\n      };\n      var _iterator2 = _createForOfIteratorHelper$3(this.addressTableLookups),\n        _step2;\n      try {\n        var _loop = function _loop() {\n          var tableLookup = _step2.value;\n          var tableAccount = addressLookupTableAccounts.find(function (account) {\n            return account.key.equals(tableLookup.accountKey);\n          });\n          if (!tableAccount) {\n            throw new Error(\"Failed to find address lookup table account for table key \".concat(tableLookup.accountKey.toBase58()));\n          }\n          var _iterator3 = _createForOfIteratorHelper$3(tableLookup.writableIndexes),\n            _step3;\n          try {\n            for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n              var index = _step3.value;\n              if (index < tableAccount.state.addresses.length) {\n                accountKeysFromLookups.writable.push(tableAccount.state.addresses[index]);\n              } else {\n                throw new Error(\"Failed to find address for index \".concat(index, \" in address lookup table \").concat(tableLookup.accountKey.toBase58()));\n              }\n            }\n          } catch (err) {\n            _iterator3.e(err);\n          } finally {\n            _iterator3.f();\n          }\n          var _iterator4 = _createForOfIteratorHelper$3(tableLookup.readonlyIndexes),\n            _step4;\n          try {\n            for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n              var _index = _step4.value;\n              if (_index < tableAccount.state.addresses.length) {\n                accountKeysFromLookups.readonly.push(tableAccount.state.addresses[_index]);\n              } else {\n                throw new Error(\"Failed to find address for index \".concat(_index, \" in address lookup table \").concat(tableLookup.accountKey.toBase58()));\n              }\n            }\n          } catch (err) {\n            _iterator4.e(err);\n          } finally {\n            _iterator4.f();\n          }\n        };\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          _loop();\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n      return accountKeysFromLookups;\n    }\n  }, {\n    key: \"serialize\",\n    value: function serialize() {\n      var encodedStaticAccountKeysLength = Array();\n      encodeLength(encodedStaticAccountKeysLength, this.staticAccountKeys.length);\n      var serializedInstructions = this.serializeInstructions();\n      var encodedInstructionsLength = Array();\n      encodeLength(encodedInstructionsLength, this.compiledInstructions.length);\n      var serializedAddressTableLookups = this.serializeAddressTableLookups();\n      var encodedAddressTableLookupsLength = Array();\n      encodeLength(encodedAddressTableLookupsLength, this.addressTableLookups.length);\n      var messageLayout = BufferLayout.struct([BufferLayout.u8('prefix'), BufferLayout.struct([BufferLayout.u8('numRequiredSignatures'), BufferLayout.u8('numReadonlySignedAccounts'), BufferLayout.u8('numReadonlyUnsignedAccounts')], 'header'), BufferLayout.blob(encodedStaticAccountKeysLength.length, 'staticAccountKeysLength'), BufferLayout.seq(publicKey(), this.staticAccountKeys.length, 'staticAccountKeys'), publicKey('recentBlockhash'), BufferLayout.blob(encodedInstructionsLength.length, 'instructionsLength'), BufferLayout.blob(serializedInstructions.length, 'serializedInstructions'), BufferLayout.blob(encodedAddressTableLookupsLength.length, 'addressTableLookupsLength'), BufferLayout.blob(serializedAddressTableLookups.length, 'serializedAddressTableLookups')]);\n      var serializedMessage = new Uint8Array(PACKET_DATA_SIZE);\n      var MESSAGE_VERSION_0_PREFIX = 1 << 7;\n      var serializedMessageLength = messageLayout.encode({\n        prefix: MESSAGE_VERSION_0_PREFIX,\n        header: this.header,\n        staticAccountKeysLength: new Uint8Array(encodedStaticAccountKeysLength),\n        staticAccountKeys: this.staticAccountKeys.map(function (key) {\n          return key.toBytes();\n        }),\n        recentBlockhash: bs58.decode(this.recentBlockhash),\n        instructionsLength: new Uint8Array(encodedInstructionsLength),\n        serializedInstructions: serializedInstructions,\n        addressTableLookupsLength: new Uint8Array(encodedAddressTableLookupsLength),\n        serializedAddressTableLookups: serializedAddressTableLookups\n      }, serializedMessage);\n      return serializedMessage.slice(0, serializedMessageLength);\n    }\n  }, {\n    key: \"serializeInstructions\",\n    value: function serializeInstructions() {\n      var serializedLength = 0;\n      var serializedInstructions = new Uint8Array(PACKET_DATA_SIZE);\n      var _iterator5 = _createForOfIteratorHelper$3(this.compiledInstructions),\n        _step5;\n      try {\n        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n          var instruction = _step5.value;\n          var encodedAccountKeyIndexesLength = Array();\n          encodeLength(encodedAccountKeyIndexesLength, instruction.accountKeyIndexes.length);\n          var encodedDataLength = Array();\n          encodeLength(encodedDataLength, instruction.data.length);\n          var instructionLayout = BufferLayout.struct([BufferLayout.u8('programIdIndex'), BufferLayout.blob(encodedAccountKeyIndexesLength.length, 'encodedAccountKeyIndexesLength'), BufferLayout.seq(BufferLayout.u8(), instruction.accountKeyIndexes.length, 'accountKeyIndexes'), BufferLayout.blob(encodedDataLength.length, 'encodedDataLength'), BufferLayout.blob(instruction.data.length, 'data')]);\n          serializedLength += instructionLayout.encode({\n            programIdIndex: instruction.programIdIndex,\n            encodedAccountKeyIndexesLength: new Uint8Array(encodedAccountKeyIndexesLength),\n            accountKeyIndexes: instruction.accountKeyIndexes,\n            encodedDataLength: new Uint8Array(encodedDataLength),\n            data: instruction.data\n          }, serializedInstructions, serializedLength);\n        }\n      } catch (err) {\n        _iterator5.e(err);\n      } finally {\n        _iterator5.f();\n      }\n      return serializedInstructions.slice(0, serializedLength);\n    }\n  }, {\n    key: \"serializeAddressTableLookups\",\n    value: function serializeAddressTableLookups() {\n      var serializedLength = 0;\n      var serializedAddressTableLookups = new Uint8Array(PACKET_DATA_SIZE);\n      var _iterator6 = _createForOfIteratorHelper$3(this.addressTableLookups),\n        _step6;\n      try {\n        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n          var lookup = _step6.value;\n          var encodedWritableIndexesLength = Array();\n          encodeLength(encodedWritableIndexesLength, lookup.writableIndexes.length);\n          var encodedReadonlyIndexesLength = Array();\n          encodeLength(encodedReadonlyIndexesLength, lookup.readonlyIndexes.length);\n          var addressTableLookupLayout = BufferLayout.struct([publicKey('accountKey'), BufferLayout.blob(encodedWritableIndexesLength.length, 'encodedWritableIndexesLength'), BufferLayout.seq(BufferLayout.u8(), lookup.writableIndexes.length, 'writableIndexes'), BufferLayout.blob(encodedReadonlyIndexesLength.length, 'encodedReadonlyIndexesLength'), BufferLayout.seq(BufferLayout.u8(), lookup.readonlyIndexes.length, 'readonlyIndexes')]);\n          serializedLength += addressTableLookupLayout.encode({\n            accountKey: lookup.accountKey.toBytes(),\n            encodedWritableIndexesLength: new Uint8Array(encodedWritableIndexesLength),\n            writableIndexes: lookup.writableIndexes,\n            encodedReadonlyIndexesLength: new Uint8Array(encodedReadonlyIndexesLength),\n            readonlyIndexes: lookup.readonlyIndexes\n          }, serializedAddressTableLookups, serializedLength);\n        }\n      } catch (err) {\n        _iterator6.e(err);\n      } finally {\n        _iterator6.f();\n      }\n      return serializedAddressTableLookups.slice(0, serializedLength);\n    }\n  }], [{\n    key: \"compile\",\n    value: function compile(args) {\n      var compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);\n      var addressTableLookups = new Array();\n      var accountKeysFromLookups = {\n        writable: new Array(),\n        readonly: new Array()\n      };\n      var lookupTableAccounts = args.addressLookupTableAccounts || [];\n      var _iterator7 = _createForOfIteratorHelper$3(lookupTableAccounts),\n        _step7;\n      try {\n        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n          var lookupTable = _step7.value;\n          var extractResult = compiledKeys.extractTableLookup(lookupTable);\n          if (extractResult !== undefined) {\n            var _accountKeysFromLooku, _accountKeysFromLooku2;\n            var _extractResult = _slicedToArray(extractResult, 2),\n              addressTableLookup = _extractResult[0],\n              _extractResult$ = _extractResult[1],\n              writable = _extractResult$.writable,\n              readonly = _extractResult$.readonly;\n            addressTableLookups.push(addressTableLookup);\n            (_accountKeysFromLooku = accountKeysFromLookups.writable).push.apply(_accountKeysFromLooku, _toConsumableArray(writable));\n            (_accountKeysFromLooku2 = accountKeysFromLookups.readonly).push.apply(_accountKeysFromLooku2, _toConsumableArray(readonly));\n          }\n        }\n      } catch (err) {\n        _iterator7.e(err);\n      } finally {\n        _iterator7.f();\n      }\n      var _compiledKeys$getMess = compiledKeys.getMessageComponents(),\n        _compiledKeys$getMess2 = _slicedToArray(_compiledKeys$getMess, 2),\n        header = _compiledKeys$getMess2[0],\n        staticAccountKeys = _compiledKeys$getMess2[1];\n      var accountKeys = new MessageAccountKeys(staticAccountKeys, accountKeysFromLookups);\n      var compiledInstructions = accountKeys.compileInstructions(args.instructions);\n      return new MessageV0({\n        header: header,\n        staticAccountKeys: staticAccountKeys,\n        recentBlockhash: args.recentBlockhash,\n        compiledInstructions: compiledInstructions,\n        addressTableLookups: addressTableLookups\n      });\n    }\n  }, {\n    key: \"deserialize\",\n    value: function deserialize(serializedMessage) {\n      var byteArray = _toConsumableArray(serializedMessage);\n      var prefix = byteArray.shift();\n      var maskedPrefix = prefix & VERSION_PREFIX_MASK;\n      assert(prefix !== maskedPrefix, \"Expected versioned message but received legacy message\");\n      var version = maskedPrefix;\n      assert(version === 0, \"Expected versioned message with version 0 but found version \".concat(version));\n      var header = {\n        numRequiredSignatures: byteArray.shift(),\n        numReadonlySignedAccounts: byteArray.shift(),\n        numReadonlyUnsignedAccounts: byteArray.shift()\n      };\n      var staticAccountKeys = [];\n      var staticAccountKeysLength = decodeLength(byteArray);\n      for (var i = 0; i < staticAccountKeysLength; i++) {\n        staticAccountKeys.push(new PublicKey(byteArray.splice(0, PUBLIC_KEY_LENGTH)));\n      }\n      var recentBlockhash = bs58.encode(byteArray.splice(0, PUBLIC_KEY_LENGTH));\n      var instructionCount = decodeLength(byteArray);\n      var compiledInstructions = [];\n      for (var _i = 0; _i < instructionCount; _i++) {\n        var programIdIndex = byteArray.shift();\n        var accountKeyIndexesLength = decodeLength(byteArray);\n        var accountKeyIndexes = byteArray.splice(0, accountKeyIndexesLength);\n        var dataLength = decodeLength(byteArray);\n        var data = new Uint8Array(byteArray.splice(0, dataLength));\n        compiledInstructions.push({\n          programIdIndex: programIdIndex,\n          accountKeyIndexes: accountKeyIndexes,\n          data: data\n        });\n      }\n      var addressTableLookupsCount = decodeLength(byteArray);\n      var addressTableLookups = [];\n      for (var _i2 = 0; _i2 < addressTableLookupsCount; _i2++) {\n        var accountKey = new PublicKey(byteArray.splice(0, PUBLIC_KEY_LENGTH));\n        var writableIndexesLength = decodeLength(byteArray);\n        var writableIndexes = byteArray.splice(0, writableIndexesLength);\n        var readonlyIndexesLength = decodeLength(byteArray);\n        var readonlyIndexes = byteArray.splice(0, readonlyIndexesLength);\n        addressTableLookups.push({\n          accountKey: accountKey,\n          writableIndexes: writableIndexes,\n          readonlyIndexes: readonlyIndexes\n        });\n      }\n      return new MessageV0({\n        header: header,\n        staticAccountKeys: staticAccountKeys,\n        recentBlockhash: recentBlockhash,\n        compiledInstructions: compiledInstructions,\n        addressTableLookups: addressTableLookups\n      });\n    }\n  }]);\n  return MessageV0;\n}();\n\n// eslint-disable-next-line no-redeclare\nvar VersionedMessage = {\n  deserializeMessageVersion: function deserializeMessageVersion(serializedMessage) {\n    var prefix = serializedMessage[0];\n    var maskedPrefix = prefix & VERSION_PREFIX_MASK;\n\n    // if the highest bit of the prefix is not set, the message is not versioned\n    if (maskedPrefix === prefix) {\n      return 'legacy';\n    }\n\n    // the lower 7 bits of the prefix indicate the message version\n    return maskedPrefix;\n  },\n  deserialize: function deserialize(serializedMessage) {\n    var version = VersionedMessage.deserializeMessageVersion(serializedMessage);\n    if (version === 'legacy') {\n      return Message.from(serializedMessage);\n    }\n    if (version === 0) {\n      return MessageV0.deserialize(serializedMessage);\n    } else {\n      throw new Error(\"Transaction message version \".concat(version, \" deserialization is not supported\"));\n    }\n  }\n};\nfunction _createForOfIteratorHelper$2(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (!it) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray$2(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n      var F = function F() {};\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n  var normalCompletion = true,\n    didErr = false,\n    err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\nfunction _unsupportedIterableToArray$2(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray$2(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$2(o, minLen);\n}\nfunction _arrayLikeToArray$2(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n  return arr2;\n}\nfunction ownKeys$2(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread$2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys$2(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\n\n/**\n * Transaction signature as base-58 encoded string\n */\n\nvar TransactionStatus = /*#__PURE__*/function (TransactionStatus) {\n  TransactionStatus[TransactionStatus[\"BLOCKHEIGHT_EXCEEDED\"] = 0] = \"BLOCKHEIGHT_EXCEEDED\";\n  TransactionStatus[TransactionStatus[\"PROCESSED\"] = 1] = \"PROCESSED\";\n  TransactionStatus[TransactionStatus[\"TIMED_OUT\"] = 2] = \"TIMED_OUT\";\n  TransactionStatus[TransactionStatus[\"NONCE_INVALID\"] = 3] = \"NONCE_INVALID\";\n  return TransactionStatus;\n}({});\n\n/**\n * Default (empty) signature\n */\nvar DEFAULT_SIGNATURE = Buffer.alloc(SIGNATURE_LENGTH_IN_BYTES).fill(0);\n\n/**\n * Account metadata used to define instructions\n */\n\n/**\n * List of TransactionInstruction object fields that may be initialized at construction\n */\n\n/**\n * Configuration object for Transaction.serialize()\n */\n\n/**\n * @internal\n */\n\n/**\n * Transaction Instruction class\n */\nvar TransactionInstruction = /*#__PURE__*/function () {\n  function TransactionInstruction(opts) {\n    _classCallCheck(this, TransactionInstruction);\n    /**\n     * Public keys to include in this transaction\n     * Boolean represents whether this pubkey needs to sign the transaction\n     */\n    this.keys = void 0;\n    /**\n     * Program Id to execute\n     */\n    this.programId = void 0;\n    /**\n     * Program input\n     */\n    this.data = Buffer.alloc(0);\n    this.programId = opts.programId;\n    this.keys = opts.keys;\n    if (opts.data) {\n      this.data = opts.data;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _createClass(TransactionInstruction, [{\n    key: \"toJSON\",\n    value: function toJSON() {\n      return {\n        keys: this.keys.map(function (_ref) {\n          var pubkey = _ref.pubkey,\n            isSigner = _ref.isSigner,\n            isWritable = _ref.isWritable;\n          return {\n            pubkey: pubkey.toJSON(),\n            isSigner: isSigner,\n            isWritable: isWritable\n          };\n        }),\n        programId: this.programId.toJSON(),\n        data: _toConsumableArray(this.data)\n      };\n    }\n  }]);\n  return TransactionInstruction;\n}();\n\n/**\n * Pair of signature and corresponding public key\n */\n\n/**\n * List of Transaction object fields that may be initialized at construction\n */\n\n// For backward compatibility; an unfortunate consequence of being\n// forced to over-export types by the documentation generator.\n// See https://github.com/solana-labs/solana/pull/25820\n/**\n * Blockhash-based transactions have a lifetime that are defined by\n * the blockhash they include. Any transaction whose blockhash is\n * too old will be rejected.\n */\n/**\n * Use these options to construct a durable nonce transaction.\n */\n/**\n * Nonce information to be used to build an offline Transaction.\n */\n/**\n * @internal\n */\n/**\n * Transaction class\n */\nvar Transaction = /*#__PURE__*/function () {\n  /**\n   * Construct an empty Transaction\n   */\n  function Transaction(opts) {\n    _classCallCheck(this, Transaction);\n    /**\n     * Signatures for the transaction.  Typically created by invoking the\n     * `sign()` method\n     */\n    this.signatures = [];\n    /**\n     * The transaction fee payer\n     */\n    this.feePayer = void 0;\n    /**\n     * The instructions to atomically execute\n     */\n    this.instructions = [];\n    /**\n     * A recent transaction id. Must be populated by the caller\n     */\n    this.recentBlockhash = void 0;\n    /**\n     * the last block chain can advance to before tx is declared expired\n     * */\n    this.lastValidBlockHeight = void 0;\n    /**\n     * Optional Nonce information. If populated, transaction will use a durable\n     * Nonce hash instead of a recentBlockhash. Must be populated by the caller\n     */\n    this.nonceInfo = void 0;\n    /**\n     * If this is a nonce transaction this represents the minimum slot from which\n     * to evaluate if the nonce has advanced when attempting to confirm the\n     * transaction. This protects against a case where the transaction confirmation\n     * logic loads the nonce account from an old slot and assumes the mismatch in\n     * nonce value implies that the nonce has been advanced.\n     */\n    this.minNonceContextSlot = void 0;\n    /**\n     * @internal\n     */\n    this._message = void 0;\n    /**\n     * @internal\n     */\n    this._json = void 0;\n    if (!opts) {\n      return;\n    }\n    if (opts.feePayer) {\n      this.feePayer = opts.feePayer;\n    }\n    if (opts.signatures) {\n      this.signatures = opts.signatures;\n    }\n    if (Object.prototype.hasOwnProperty.call(opts, 'nonceInfo')) {\n      var _ref2 = opts,\n        minContextSlot = _ref2.minContextSlot,\n        nonceInfo = _ref2.nonceInfo;\n      this.minNonceContextSlot = minContextSlot;\n      this.nonceInfo = nonceInfo;\n    } else if (Object.prototype.hasOwnProperty.call(opts, 'lastValidBlockHeight')) {\n      var _ref3 = opts,\n        blockhash = _ref3.blockhash,\n        lastValidBlockHeight = _ref3.lastValidBlockHeight;\n      this.recentBlockhash = blockhash;\n      this.lastValidBlockHeight = lastValidBlockHeight;\n    } else {\n      var _ref4 = opts,\n        recentBlockhash = _ref4.recentBlockhash,\n        _nonceInfo = _ref4.nonceInfo;\n      if (_nonceInfo) {\n        this.nonceInfo = _nonceInfo;\n      }\n      this.recentBlockhash = recentBlockhash;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _createClass(Transaction, [{\n    key: \"signature\",\n    get:\n    /**\n     * The first (payer) Transaction signature\n     *\n     * @returns {Buffer | null} Buffer of payer's signature\n     */\n    function get() {\n      if (this.signatures.length > 0) {\n        return this.signatures[0].signature;\n      }\n      return null;\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return {\n        recentBlockhash: this.recentBlockhash || null,\n        feePayer: this.feePayer ? this.feePayer.toJSON() : null,\n        nonceInfo: this.nonceInfo ? {\n          nonce: this.nonceInfo.nonce,\n          nonceInstruction: this.nonceInfo.nonceInstruction.toJSON()\n        } : null,\n        instructions: this.instructions.map(function (instruction) {\n          return instruction.toJSON();\n        }),\n        signers: this.signatures.map(function (_ref5) {\n          var publicKey = _ref5.publicKey;\n          return publicKey.toJSON();\n        })\n      };\n    }\n\n    /**\n     * Add one or more instructions to this Transaction\n     *\n     * @param {Array< Transaction | TransactionInstruction | TransactionInstructionCtorFields >} items - Instructions to add to the Transaction\n     */\n  }, {\n    key: \"add\",\n    value: function add() {\n      var _this = this;\n      for (var _len = arguments.length, items = new Array(_len), _key = 0; _key < _len; _key++) {\n        items[_key] = arguments[_key];\n      }\n      if (items.length === 0) {\n        throw new Error('No instructions');\n      }\n      items.forEach(function (item) {\n        if ('instructions' in item) {\n          _this.instructions = _this.instructions.concat(item.instructions);\n        } else if ('data' in item && 'programId' in item && 'keys' in item) {\n          _this.instructions.push(item);\n        } else {\n          _this.instructions.push(new TransactionInstruction(item));\n        }\n      });\n      return this;\n    }\n\n    /**\n     * Compile transaction data\n     */\n  }, {\n    key: \"compileMessage\",\n    value: function compileMessage() {\n      if (this._message && JSON.stringify(this.toJSON()) === JSON.stringify(this._json)) {\n        return this._message;\n      }\n      var recentBlockhash;\n      var instructions;\n      if (this.nonceInfo) {\n        recentBlockhash = this.nonceInfo.nonce;\n        if (this.instructions[0] != this.nonceInfo.nonceInstruction) {\n          instructions = [this.nonceInfo.nonceInstruction].concat(_toConsumableArray(this.instructions));\n        } else {\n          instructions = this.instructions;\n        }\n      } else {\n        recentBlockhash = this.recentBlockhash;\n        instructions = this.instructions;\n      }\n      if (!recentBlockhash) {\n        throw new Error('Transaction recentBlockhash required');\n      }\n      if (instructions.length < 1) {\n        console.warn('No instructions provided');\n      }\n      var feePayer;\n      if (this.feePayer) {\n        feePayer = this.feePayer;\n      } else if (this.signatures.length > 0 && this.signatures[0].publicKey) {\n        // Use implicit fee payer\n        feePayer = this.signatures[0].publicKey;\n      } else {\n        throw new Error('Transaction fee payer required');\n      }\n      for (var i = 0; i < instructions.length; i++) {\n        if (instructions[i].programId === undefined) {\n          throw new Error(\"Transaction instruction index \".concat(i, \" has undefined program id\"));\n        }\n      }\n      var programIds = [];\n      var accountMetas = [];\n      instructions.forEach(function (instruction) {\n        instruction.keys.forEach(function (accountMeta) {\n          accountMetas.push(_objectSpread$2({}, accountMeta));\n        });\n        var programId = instruction.programId.toString();\n        if (!programIds.includes(programId)) {\n          programIds.push(programId);\n        }\n      });\n\n      // Append programID account metas\n      programIds.forEach(function (programId) {\n        accountMetas.push({\n          pubkey: new PublicKey(programId),\n          isSigner: false,\n          isWritable: false\n        });\n      });\n\n      // Cull duplicate account metas\n      var uniqueMetas = [];\n      accountMetas.forEach(function (accountMeta) {\n        var pubkeyString = accountMeta.pubkey.toString();\n        var uniqueIndex = uniqueMetas.findIndex(function (x) {\n          return x.pubkey.toString() === pubkeyString;\n        });\n        if (uniqueIndex > -1) {\n          uniqueMetas[uniqueIndex].isWritable = uniqueMetas[uniqueIndex].isWritable || accountMeta.isWritable;\n          uniqueMetas[uniqueIndex].isSigner = uniqueMetas[uniqueIndex].isSigner || accountMeta.isSigner;\n        } else {\n          uniqueMetas.push(accountMeta);\n        }\n      });\n\n      // Sort. Prioritizing first by signer, then by writable\n      uniqueMetas.sort(function (x, y) {\n        if (x.isSigner !== y.isSigner) {\n          // Signers always come before non-signers\n          return x.isSigner ? -1 : 1;\n        }\n        if (x.isWritable !== y.isWritable) {\n          // Writable accounts always come before read-only accounts\n          return x.isWritable ? -1 : 1;\n        }\n        // Otherwise, sort by pubkey, stringwise.\n        var options = {\n          localeMatcher: 'best fit',\n          usage: 'sort',\n          sensitivity: 'variant',\n          ignorePunctuation: false,\n          numeric: false,\n          caseFirst: 'lower'\n        };\n        return x.pubkey.toBase58().localeCompare(y.pubkey.toBase58(), 'en', options);\n      });\n\n      // Move fee payer to the front\n      var feePayerIndex = uniqueMetas.findIndex(function (x) {\n        return x.pubkey.equals(feePayer);\n      });\n      if (feePayerIndex > -1) {\n        var _uniqueMetas$splice = uniqueMetas.splice(feePayerIndex, 1),\n          _uniqueMetas$splice2 = _slicedToArray(_uniqueMetas$splice, 1),\n          payerMeta = _uniqueMetas$splice2[0];\n        payerMeta.isSigner = true;\n        payerMeta.isWritable = true;\n        uniqueMetas.unshift(payerMeta);\n      } else {\n        uniqueMetas.unshift({\n          pubkey: feePayer,\n          isSigner: true,\n          isWritable: true\n        });\n      }\n\n      // Disallow unknown signers\n      var _iterator = _createForOfIteratorHelper$2(this.signatures),\n        _step;\n      try {\n        var _loop = function _loop() {\n          var signature = _step.value;\n          var uniqueIndex = uniqueMetas.findIndex(function (x) {\n            return x.pubkey.equals(signature.publicKey);\n          });\n          if (uniqueIndex > -1) {\n            if (!uniqueMetas[uniqueIndex].isSigner) {\n              uniqueMetas[uniqueIndex].isSigner = true;\n              console.warn('Transaction references a signature that is unnecessary, ' + 'only the fee payer and instruction signer accounts should sign a transaction. ' + 'This behavior is deprecated and will throw an error in the next major version release.');\n            }\n          } else {\n            throw new Error(\"unknown signer: \".concat(signature.publicKey.toString()));\n          }\n        };\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          _loop();\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      var numRequiredSignatures = 0;\n      var numReadonlySignedAccounts = 0;\n      var numReadonlyUnsignedAccounts = 0;\n\n      // Split out signing from non-signing keys and count header values\n      var signedKeys = [];\n      var unsignedKeys = [];\n      uniqueMetas.forEach(function (_ref6) {\n        var pubkey = _ref6.pubkey,\n          isSigner = _ref6.isSigner,\n          isWritable = _ref6.isWritable;\n        if (isSigner) {\n          signedKeys.push(pubkey.toString());\n          numRequiredSignatures += 1;\n          if (!isWritable) {\n            numReadonlySignedAccounts += 1;\n          }\n        } else {\n          unsignedKeys.push(pubkey.toString());\n          if (!isWritable) {\n            numReadonlyUnsignedAccounts += 1;\n          }\n        }\n      });\n      var accountKeys = signedKeys.concat(unsignedKeys);\n      var compiledInstructions = instructions.map(function (instruction) {\n        var data = instruction.data,\n          programId = instruction.programId;\n        return {\n          programIdIndex: accountKeys.indexOf(programId.toString()),\n          accounts: instruction.keys.map(function (meta) {\n            return accountKeys.indexOf(meta.pubkey.toString());\n          }),\n          data: bs58.encode(data)\n        };\n      });\n      compiledInstructions.forEach(function (instruction) {\n        assert(instruction.programIdIndex >= 0);\n        instruction.accounts.forEach(function (keyIndex) {\n          return assert(keyIndex >= 0);\n        });\n      });\n      return new Message({\n        header: {\n          numRequiredSignatures: numRequiredSignatures,\n          numReadonlySignedAccounts: numReadonlySignedAccounts,\n          numReadonlyUnsignedAccounts: numReadonlyUnsignedAccounts\n        },\n        accountKeys: accountKeys,\n        recentBlockhash: recentBlockhash,\n        instructions: compiledInstructions\n      });\n    }\n\n    /**\n     * @internal\n     */\n  }, {\n    key: \"_compile\",\n    value: function _compile() {\n      var message = this.compileMessage();\n      var signedKeys = message.accountKeys.slice(0, message.header.numRequiredSignatures);\n      if (this.signatures.length === signedKeys.length) {\n        var valid = this.signatures.every(function (pair, index) {\n          return signedKeys[index].equals(pair.publicKey);\n        });\n        if (valid) return message;\n      }\n      this.signatures = signedKeys.map(function (publicKey) {\n        return {\n          signature: null,\n          publicKey: publicKey\n        };\n      });\n      return message;\n    }\n\n    /**\n     * Get a buffer of the Transaction data that need to be covered by signatures\n     */\n  }, {\n    key: \"serializeMessage\",\n    value: function serializeMessage() {\n      return this._compile().serialize();\n    }\n\n    /**\n     * Get the estimated fee associated with a transaction\n     *\n     * @param {Connection} connection Connection to RPC Endpoint.\n     *\n     * @returns {Promise<number | null>} The estimated fee for the transaction\n     */\n  }, {\n    key: \"getEstimatedFee\",\n    value: function () {\n      var _getEstimatedFee = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(connection) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return connection.getFeeForMessage(this.compileMessage());\n            case 2:\n              return _context.abrupt(\"return\", _context.sent.value);\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function getEstimatedFee(_x) {\n        return _getEstimatedFee.apply(this, arguments);\n      }\n      return getEstimatedFee;\n    }()\n    /**\n     * Specify the public keys which will be used to sign the Transaction.\n     * The first signer will be used as the transaction fee payer account.\n     *\n     * Signatures can be added with either `partialSign` or `addSignature`\n     *\n     * @deprecated Deprecated since v0.84.0. Only the fee payer needs to be\n     * specified and it can be set in the Transaction constructor or with the\n     * `feePayer` property.\n     */\n  }, {\n    key: \"setSigners\",\n    value: function setSigners() {\n      for (var _len2 = arguments.length, signers = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        signers[_key2] = arguments[_key2];\n      }\n      if (signers.length === 0) {\n        throw new Error('No signers');\n      }\n      var seen = new Set();\n      this.signatures = signers.filter(function (publicKey) {\n        var key = publicKey.toString();\n        if (seen.has(key)) {\n          return false;\n        } else {\n          seen.add(key);\n          return true;\n        }\n      }).map(function (publicKey) {\n        return {\n          signature: null,\n          publicKey: publicKey\n        };\n      });\n    }\n\n    /**\n     * Sign the Transaction with the specified signers. Multiple signatures may\n     * be applied to a Transaction. The first signature is considered \"primary\"\n     * and is used identify and confirm transactions.\n     *\n     * If the Transaction `feePayer` is not set, the first signer will be used\n     * as the transaction fee payer account.\n     *\n     * Transaction fields should not be modified after the first call to `sign`,\n     * as doing so may invalidate the signature and cause the Transaction to be\n     * rejected.\n     *\n     * The Transaction must be assigned a valid `recentBlockhash` before invoking this method\n     *\n     * @param {Array<Signer>} signers Array of signers that will sign the transaction\n     */\n  }, {\n    key: \"sign\",\n    value: function sign() {\n      for (var _len3 = arguments.length, signers = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        signers[_key3] = arguments[_key3];\n      }\n      if (signers.length === 0) {\n        throw new Error('No signers');\n      }\n\n      // Dedupe signers\n      var seen = new Set();\n      var uniqueSigners = [];\n      for (var _i = 0, _signers = signers; _i < _signers.length; _i++) {\n        var signer = _signers[_i];\n        var key = signer.publicKey.toString();\n        if (seen.has(key)) {\n          continue;\n        } else {\n          seen.add(key);\n          uniqueSigners.push(signer);\n        }\n      }\n      this.signatures = uniqueSigners.map(function (signer) {\n        return {\n          signature: null,\n          publicKey: signer.publicKey\n        };\n      });\n      var message = this._compile();\n      this._partialSign.apply(this, [message].concat(uniqueSigners));\n    }\n\n    /**\n     * Partially sign a transaction with the specified accounts. All accounts must\n     * correspond to either the fee payer or a signer account in the transaction\n     * instructions.\n     *\n     * All the caveats from the `sign` method apply to `partialSign`\n     *\n     * @param {Array<Signer>} signers Array of signers that will sign the transaction\n     */\n  }, {\n    key: \"partialSign\",\n    value: function partialSign() {\n      for (var _len4 = arguments.length, signers = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n        signers[_key4] = arguments[_key4];\n      }\n      if (signers.length === 0) {\n        throw new Error('No signers');\n      }\n\n      // Dedupe signers\n      var seen = new Set();\n      var uniqueSigners = [];\n      for (var _i2 = 0, _signers2 = signers; _i2 < _signers2.length; _i2++) {\n        var signer = _signers2[_i2];\n        var key = signer.publicKey.toString();\n        if (seen.has(key)) {\n          continue;\n        } else {\n          seen.add(key);\n          uniqueSigners.push(signer);\n        }\n      }\n      var message = this._compile();\n      this._partialSign.apply(this, [message].concat(uniqueSigners));\n    }\n\n    /**\n     * @internal\n     */\n  }, {\n    key: \"_partialSign\",\n    value: function _partialSign(message) {\n      var _this2 = this;\n      var signData = message.serialize();\n      for (var _len5 = arguments.length, signers = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {\n        signers[_key5 - 1] = arguments[_key5];\n      }\n      signers.forEach(function (signer) {\n        var signature = sign(signData, signer.secretKey);\n        _this2._addSignature(signer.publicKey, toBuffer(signature));\n      });\n    }\n\n    /**\n     * Add an externally created signature to a transaction. The public key\n     * must correspond to either the fee payer or a signer account in the transaction\n     * instructions.\n     *\n     * @param {PublicKey} pubkey Public key that will be added to the transaction.\n     * @param {Buffer} signature An externally created signature to add to the transaction.\n     */\n  }, {\n    key: \"addSignature\",\n    value: function addSignature(pubkey, signature) {\n      this._compile(); // Ensure signatures array is populated\n      this._addSignature(pubkey, signature);\n    }\n\n    /**\n     * @internal\n     */\n  }, {\n    key: \"_addSignature\",\n    value: function _addSignature(pubkey, signature) {\n      assert(signature.length === 64);\n      var index = this.signatures.findIndex(function (sigpair) {\n        return pubkey.equals(sigpair.publicKey);\n      });\n      if (index < 0) {\n        throw new Error(\"unknown signer: \".concat(pubkey.toString()));\n      }\n      this.signatures[index].signature = Buffer.from(signature);\n    }\n\n    /**\n     * Verify signatures of a Transaction\n     * Optional parameter specifies if we're expecting a fully signed Transaction or a partially signed one.\n     * If no boolean is provided, we expect a fully signed Transaction by default.\n     *\n     * @param {boolean} [requireAllSignatures=true] Require a fully signed Transaction\n     */\n  }, {\n    key: \"verifySignatures\",\n    value: function verifySignatures(requireAllSignatures) {\n      return this._verifySignatures(this.serializeMessage(), requireAllSignatures === undefined ? true : requireAllSignatures);\n    }\n\n    /**\n     * @internal\n     */\n  }, {\n    key: \"_verifySignatures\",\n    value: function _verifySignatures(signData, requireAllSignatures) {\n      var _iterator2 = _createForOfIteratorHelper$2(this.signatures),\n        _step2;\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var _step2$value = _step2.value,\n            signature = _step2$value.signature,\n            publicKey = _step2$value.publicKey;\n          if (signature === null) {\n            if (requireAllSignatures) {\n              return false;\n            }\n          } else {\n            if (!verify(signature, signData, publicKey.toBytes())) {\n              return false;\n            }\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n      return true;\n    }\n\n    /**\n     * Serialize the Transaction in the wire format.\n     *\n     * @param {Buffer} [config] Config of transaction.\n     *\n     * @returns {Buffer} Signature of transaction in wire format.\n     */\n  }, {\n    key: \"serialize\",\n    value: function serialize(config) {\n      var _Object$assign = Object.assign({\n          requireAllSignatures: true,\n          verifySignatures: true\n        }, config),\n        requireAllSignatures = _Object$assign.requireAllSignatures,\n        verifySignatures = _Object$assign.verifySignatures;\n      var signData = this.serializeMessage();\n      if (verifySignatures && !this._verifySignatures(signData, requireAllSignatures)) {\n        throw new Error('Signature verification failed');\n      }\n      return this._serialize(signData);\n    }\n\n    /**\n     * @internal\n     */\n  }, {\n    key: \"_serialize\",\n    value: function _serialize(signData) {\n      var signatures = this.signatures;\n      var signatureCount = [];\n      encodeLength(signatureCount, signatures.length);\n      var transactionLength = signatureCount.length + signatures.length * 64 + signData.length;\n      var wireTransaction = Buffer.alloc(transactionLength);\n      assert(signatures.length < 256);\n      Buffer.from(signatureCount).copy(wireTransaction, 0);\n      signatures.forEach(function (_ref7, index) {\n        var signature = _ref7.signature;\n        if (signature !== null) {\n          assert(signature.length === 64, \"signature has invalid length\");\n          Buffer.from(signature).copy(wireTransaction, signatureCount.length + index * 64);\n        }\n      });\n      signData.copy(wireTransaction, signatureCount.length + signatures.length * 64);\n      assert(wireTransaction.length <= PACKET_DATA_SIZE, \"Transaction too large: \".concat(wireTransaction.length, \" > \").concat(PACKET_DATA_SIZE));\n      return wireTransaction;\n    }\n\n    /**\n     * Deprecated method\n     * @internal\n     */\n  }, {\n    key: \"keys\",\n    get: function get() {\n      assert(this.instructions.length === 1);\n      return this.instructions[0].keys.map(function (keyObj) {\n        return keyObj.pubkey;\n      });\n    }\n\n    /**\n     * Deprecated method\n     * @internal\n     */\n  }, {\n    key: \"programId\",\n    get: function get() {\n      assert(this.instructions.length === 1);\n      return this.instructions[0].programId;\n    }\n\n    /**\n     * Deprecated method\n     * @internal\n     */\n  }, {\n    key: \"data\",\n    get: function get() {\n      assert(this.instructions.length === 1);\n      return this.instructions[0].data;\n    }\n\n    /**\n     * Parse a wire transaction into a Transaction object.\n     *\n     * @param {Buffer | Uint8Array | Array<number>} buffer Signature of wire Transaction\n     *\n     * @returns {Transaction} Transaction associated with the signature\n     */\n  }], [{\n    key: \"from\",\n    value: function from(buffer) {\n      // Slice up wire data\n      var byteArray = _toConsumableArray(buffer);\n      var signatureCount = decodeLength(byteArray);\n      var signatures = [];\n      for (var i = 0; i < signatureCount; i++) {\n        var signature = byteArray.slice(0, SIGNATURE_LENGTH_IN_BYTES);\n        byteArray = byteArray.slice(SIGNATURE_LENGTH_IN_BYTES);\n        signatures.push(bs58.encode(Buffer.from(signature)));\n      }\n      return Transaction.populate(Message.from(byteArray), signatures);\n    }\n\n    /**\n     * Populate Transaction object from message and signatures\n     *\n     * @param {Message} message Message of transaction\n     * @param {Array<string>} signatures List of signatures to assign to the transaction\n     *\n     * @returns {Transaction} The populated Transaction\n     */\n  }, {\n    key: \"populate\",\n    value: function populate(message) {\n      var signatures = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n      var transaction = new Transaction();\n      transaction.recentBlockhash = message.recentBlockhash;\n      if (message.header.numRequiredSignatures > 0) {\n        transaction.feePayer = message.accountKeys[0];\n      }\n      signatures.forEach(function (signature, index) {\n        var sigPubkeyPair = {\n          signature: signature == bs58.encode(DEFAULT_SIGNATURE) ? null : bs58.decode(signature),\n          publicKey: message.accountKeys[index]\n        };\n        transaction.signatures.push(sigPubkeyPair);\n      });\n      message.instructions.forEach(function (instruction) {\n        var keys = instruction.accounts.map(function (account) {\n          var pubkey = message.accountKeys[account];\n          return {\n            pubkey: pubkey,\n            isSigner: transaction.signatures.some(function (keyObj) {\n              return keyObj.publicKey.toString() === pubkey.toString();\n            }) || message.isAccountSigner(account),\n            isWritable: message.isAccountWritable(account)\n          };\n        });\n        transaction.instructions.push(new TransactionInstruction({\n          keys: keys,\n          programId: message.accountKeys[instruction.programIdIndex],\n          data: bs58.decode(instruction.data)\n        }));\n      });\n      transaction._message = message;\n      transaction._json = transaction.toJSON();\n      return transaction;\n    }\n  }]);\n  return Transaction;\n}();\nfunction _createForOfIteratorHelper$1(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (!it) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray$1(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n      var F = function F() {};\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n  var normalCompletion = true,\n    didErr = false,\n    err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\nfunction _unsupportedIterableToArray$1(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray$1(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$1(o, minLen);\n}\nfunction _arrayLikeToArray$1(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n  return arr2;\n}\nvar TransactionMessage = /*#__PURE__*/function () {\n  function TransactionMessage(args) {\n    _classCallCheck(this, TransactionMessage);\n    this.payerKey = void 0;\n    this.instructions = void 0;\n    this.recentBlockhash = void 0;\n    this.payerKey = args.payerKey;\n    this.instructions = args.instructions;\n    this.recentBlockhash = args.recentBlockhash;\n  }\n  _createClass(TransactionMessage, [{\n    key: \"compileToLegacyMessage\",\n    value: function compileToLegacyMessage() {\n      return Message.compile({\n        payerKey: this.payerKey,\n        recentBlockhash: this.recentBlockhash,\n        instructions: this.instructions\n      });\n    }\n  }, {\n    key: \"compileToV0Message\",\n    value: function compileToV0Message(addressLookupTableAccounts) {\n      return MessageV0.compile({\n        payerKey: this.payerKey,\n        recentBlockhash: this.recentBlockhash,\n        instructions: this.instructions,\n        addressLookupTableAccounts: addressLookupTableAccounts\n      });\n    }\n  }], [{\n    key: \"decompile\",\n    value: function decompile(message, args) {\n      var header = message.header,\n        compiledInstructions = message.compiledInstructions,\n        recentBlockhash = message.recentBlockhash;\n      var numRequiredSignatures = header.numRequiredSignatures,\n        numReadonlySignedAccounts = header.numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts = header.numReadonlyUnsignedAccounts;\n      var numWritableSignedAccounts = numRequiredSignatures - numReadonlySignedAccounts;\n      assert(numWritableSignedAccounts > 0, 'Message header is invalid');\n      var numWritableUnsignedAccounts = message.staticAccountKeys.length - numRequiredSignatures - numReadonlyUnsignedAccounts;\n      assert(numWritableUnsignedAccounts >= 0, 'Message header is invalid');\n      var accountKeys = message.getAccountKeys(args);\n      var payerKey = accountKeys.get(0);\n      if (payerKey === undefined) {\n        throw new Error('Failed to decompile message because no account keys were found');\n      }\n      var instructions = [];\n      var _iterator = _createForOfIteratorHelper$1(compiledInstructions),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var compiledIx = _step.value;\n          var keys = [];\n          var _iterator2 = _createForOfIteratorHelper$1(compiledIx.accountKeyIndexes),\n            _step2;\n          try {\n            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n              var keyIndex = _step2.value;\n              var pubkey = accountKeys.get(keyIndex);\n              if (pubkey === undefined) {\n                throw new Error(\"Failed to find key for account key index \".concat(keyIndex));\n              }\n              var isSigner = keyIndex < numRequiredSignatures;\n              var isWritable = void 0;\n              if (isSigner) {\n                isWritable = keyIndex < numWritableSignedAccounts;\n              } else if (keyIndex < accountKeys.staticAccountKeys.length) {\n                isWritable = keyIndex - numRequiredSignatures < numWritableUnsignedAccounts;\n              } else {\n                isWritable = keyIndex - accountKeys.staticAccountKeys.length <\n                // accountKeysFromLookups cannot be undefined because we already found a pubkey for this index above\n                accountKeys.accountKeysFromLookups.writable.length;\n              }\n              keys.push({\n                pubkey: pubkey,\n                isSigner: keyIndex < header.numRequiredSignatures,\n                isWritable: isWritable\n              });\n            }\n          } catch (err) {\n            _iterator2.e(err);\n          } finally {\n            _iterator2.f();\n          }\n          var programId = accountKeys.get(compiledIx.programIdIndex);\n          if (programId === undefined) {\n            throw new Error(\"Failed to find program id for program id index \".concat(compiledIx.programIdIndex));\n          }\n          instructions.push(new TransactionInstruction({\n            programId: programId,\n            data: toBuffer(compiledIx.data),\n            keys: keys\n          }));\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      return new TransactionMessage({\n        payerKey: payerKey,\n        instructions: instructions,\n        recentBlockhash: recentBlockhash\n      });\n    }\n  }]);\n  return TransactionMessage;\n}();\nfunction _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (!it) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n      var F = function F() {};\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n  var normalCompletion = true,\n    didErr = false,\n    err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n  return arr2;\n}\n/**\n * Versioned transaction class\n */\nvar VersionedTransaction = /*#__PURE__*/function () {\n  function VersionedTransaction(message, signatures) {\n    _classCallCheck(this, VersionedTransaction);\n    this.signatures = void 0;\n    this.message = void 0;\n    if (signatures !== undefined) {\n      assert(signatures.length === message.header.numRequiredSignatures, 'Expected signatures length to be equal to the number of required signatures');\n      this.signatures = signatures;\n    } else {\n      var defaultSignatures = [];\n      for (var i = 0; i < message.header.numRequiredSignatures; i++) {\n        defaultSignatures.push(new Uint8Array(SIGNATURE_LENGTH_IN_BYTES));\n      }\n      this.signatures = defaultSignatures;\n    }\n    this.message = message;\n  }\n  _createClass(VersionedTransaction, [{\n    key: \"version\",\n    get: function get() {\n      return this.message.version;\n    }\n  }, {\n    key: \"serialize\",\n    value: function serialize() {\n      var serializedMessage = this.message.serialize();\n      var encodedSignaturesLength = Array();\n      encodeLength(encodedSignaturesLength, this.signatures.length);\n      var transactionLayout = BufferLayout.struct([BufferLayout.blob(encodedSignaturesLength.length, 'encodedSignaturesLength'), BufferLayout.seq(signature(), this.signatures.length, 'signatures'), BufferLayout.blob(serializedMessage.length, 'serializedMessage')]);\n      var serializedTransaction = new Uint8Array(2048);\n      var serializedTransactionLength = transactionLayout.encode({\n        encodedSignaturesLength: new Uint8Array(encodedSignaturesLength),\n        signatures: this.signatures,\n        serializedMessage: serializedMessage\n      }, serializedTransaction);\n      return serializedTransaction.slice(0, serializedTransactionLength);\n    }\n  }, {\n    key: \"sign\",\n    value: function sign$1(signers) {\n      var _this = this;\n      var messageData = this.message.serialize();\n      var signerPubkeys = this.message.staticAccountKeys.slice(0, this.message.header.numRequiredSignatures);\n      var _iterator = _createForOfIteratorHelper(signers),\n        _step;\n      try {\n        var _loop = function _loop() {\n          var signer = _step.value;\n          var signerIndex = signerPubkeys.findIndex(function (pubkey) {\n            return pubkey.equals(signer.publicKey);\n          });\n          assert(signerIndex >= 0, \"Cannot sign with non signer key \".concat(signer.publicKey.toBase58()));\n          _this.signatures[signerIndex] = sign(messageData, signer.secretKey);\n        };\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          _loop();\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  }, {\n    key: \"addSignature\",\n    value: function addSignature(publicKey, signature) {\n      assert(signature.byteLength === 64, 'Signature must be 64 bytes long');\n      var signerPubkeys = this.message.staticAccountKeys.slice(0, this.message.header.numRequiredSignatures);\n      var signerIndex = signerPubkeys.findIndex(function (pubkey) {\n        return pubkey.equals(publicKey);\n      });\n      assert(signerIndex >= 0, \"Can not add signature; `\".concat(publicKey.toBase58(), \"` is not required to sign this transaction\"));\n      this.signatures[signerIndex] = signature;\n    }\n  }], [{\n    key: \"deserialize\",\n    value: function deserialize(serializedTransaction) {\n      var byteArray = _toConsumableArray(serializedTransaction);\n      var signatures = [];\n      var signaturesLength = decodeLength(byteArray);\n      for (var i = 0; i < signaturesLength; i++) {\n        signatures.push(new Uint8Array(byteArray.splice(0, SIGNATURE_LENGTH_IN_BYTES)));\n      }\n      var message = VersionedMessage.deserialize(new Uint8Array(byteArray));\n      return new VersionedTransaction(message, signatures);\n    }\n  }]);\n  return VersionedTransaction;\n}();\n\n// TODO: These constants should be removed in favor of reading them out of a\n// Syscall account\n\n/**\n * @internal\n */\nvar NUM_TICKS_PER_SECOND = 160;\n\n/**\n * @internal\n */\nvar DEFAULT_TICKS_PER_SLOT = 64;\n\n/**\n * @internal\n */\nvar NUM_SLOTS_PER_SECOND = NUM_TICKS_PER_SECOND / DEFAULT_TICKS_PER_SLOT;\n\n/**\n * @internal\n */\nvar MS_PER_SLOT = 1000 / NUM_SLOTS_PER_SECOND;\nvar SYSVAR_CLOCK_PUBKEY = new PublicKey('SysvarC1ock11111111111111111111111111111111');\nvar SYSVAR_EPOCH_SCHEDULE_PUBKEY = new PublicKey('SysvarEpochSchedu1e111111111111111111111111');\nvar SYSVAR_INSTRUCTIONS_PUBKEY = new PublicKey('Sysvar1nstructions1111111111111111111111111');\nvar SYSVAR_RECENT_BLOCKHASHES_PUBKEY = new PublicKey('SysvarRecentB1ockHashes11111111111111111111');\nvar SYSVAR_RENT_PUBKEY = new PublicKey('SysvarRent111111111111111111111111111111111');\nvar SYSVAR_REWARDS_PUBKEY = new PublicKey('SysvarRewards111111111111111111111111111111');\nvar SYSVAR_SLOT_HASHES_PUBKEY = new PublicKey('SysvarS1otHashes111111111111111111111111111');\nvar SYSVAR_SLOT_HISTORY_PUBKEY = new PublicKey('SysvarS1otHistory11111111111111111111111111');\nvar SYSVAR_STAKE_HISTORY_PUBKEY = new PublicKey('SysvarStakeHistory1111111111111111111111111');\n\n/**\n * Sign, send and confirm a transaction.\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Transaction} transaction\n * @param {Array<Signer>} signers\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nfunction sendAndConfirmTransaction(_x, _x2, _x3, _x4) {\n  return _sendAndConfirmTransaction.apply(this, arguments);\n}\nfunction _sendAndConfirmTransaction() {\n  _sendAndConfirmTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(connection, transaction, signers, options) {\n    var sendOptions, signature, status, nonceInstruction, nonceAccountPubkey;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          sendOptions = options && {\n            skipPreflight: options.skipPreflight,\n            preflightCommitment: options.preflightCommitment || options.commitment,\n            maxRetries: options.maxRetries,\n            minContextSlot: options.minContextSlot\n          };\n          _context.next = 3;\n          return connection.sendTransaction(transaction, signers, sendOptions);\n        case 3:\n          signature = _context.sent;\n          if (!(transaction.recentBlockhash != null && transaction.lastValidBlockHeight != null)) {\n            _context.next = 10;\n            break;\n          }\n          _context.next = 7;\n          return connection.confirmTransaction({\n            abortSignal: options === null || options === void 0 ? void 0 : options.abortSignal,\n            signature: signature,\n            blockhash: transaction.recentBlockhash,\n            lastValidBlockHeight: transaction.lastValidBlockHeight\n          }, options && options.commitment);\n        case 7:\n          status = _context.sent.value;\n          _context.next = 22;\n          break;\n        case 10:\n          if (!(transaction.minNonceContextSlot != null && transaction.nonceInfo != null)) {\n            _context.next = 18;\n            break;\n          }\n          nonceInstruction = transaction.nonceInfo.nonceInstruction;\n          nonceAccountPubkey = nonceInstruction.keys[0].pubkey;\n          _context.next = 15;\n          return connection.confirmTransaction({\n            abortSignal: options === null || options === void 0 ? void 0 : options.abortSignal,\n            minContextSlot: transaction.minNonceContextSlot,\n            nonceAccountPubkey: nonceAccountPubkey,\n            nonceValue: transaction.nonceInfo.nonce,\n            signature: signature\n          }, options && options.commitment);\n        case 15:\n          status = _context.sent.value;\n          _context.next = 22;\n          break;\n        case 18:\n          if ((options === null || options === void 0 ? void 0 : options.abortSignal) != null) {\n            console.warn('sendAndConfirmTransaction(): A transaction with a deprecated confirmation strategy was ' + 'supplied along with an `abortSignal`. Only transactions having `lastValidBlockHeight` ' + 'or a combination of `nonceInfo` and `minNonceContextSlot` are abortable.');\n          }\n          _context.next = 21;\n          return connection.confirmTransaction(signature, options && options.commitment);\n        case 21:\n          status = _context.sent.value;\n        case 22:\n          if (!status.err) {\n            _context.next = 24;\n            break;\n          }\n          throw new Error(\"Transaction \".concat(signature, \" failed (\").concat(JSON.stringify(status), \")\"));\n        case 24:\n          return _context.abrupt(\"return\", signature);\n        case 25:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return _sendAndConfirmTransaction.apply(this, arguments);\n}\n\n// zzz\nfunction sleep(ms) {\n  return new Promise(function (resolve) {\n    return setTimeout(resolve, ms);\n  });\n}\n\n/**\n * @internal\n */\n\n/**\n * Populate a buffer of instruction data using an InstructionType\n * @internal\n */\nfunction encodeData(type, fields) {\n  var allocLength = type.layout.span >= 0 ? type.layout.span : getAlloc(type, fields);\n  var data = Buffer.alloc(allocLength);\n  var layoutFields = Object.assign({\n    instruction: type.index\n  }, fields);\n  type.layout.encode(layoutFields, data);\n  return data;\n}\n\n/**\n * Decode instruction data buffer using an InstructionType\n * @internal\n */\nfunction decodeData$1(type, buffer) {\n  var data;\n  try {\n    data = type.layout.decode(buffer);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n  if (data.instruction !== type.index) {\n    throw new Error(\"invalid instruction; instruction index mismatch \".concat(data.instruction, \" != \").concat(type.index));\n  }\n  return data;\n}\n\n/**\n * https://github.com/solana-labs/solana/blob/90bedd7e067b5b8f3ddbb45da00a4e9cabb22c62/sdk/src/fee_calculator.rs#L7-L11\n *\n * @internal\n */\nvar FeeCalculatorLayout = BufferLayout.nu64('lamportsPerSignature');\n\n/**\n * Calculator for transaction fees.\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\n\n/**\n * See https://github.com/solana-labs/solana/blob/0ea2843ec9cdc517572b8e62c959f41b55cf4453/sdk/src/nonce_state.rs#L29-L32\n *\n * @internal\n */\nvar NonceAccountLayout = BufferLayout.struct([BufferLayout.u32('version'), BufferLayout.u32('state'), publicKey('authorizedPubkey'), publicKey('nonce'), BufferLayout.struct([FeeCalculatorLayout], 'feeCalculator')]);\nvar NONCE_ACCOUNT_LENGTH = NonceAccountLayout.span;\n\n/**\n * A durable nonce is a 32 byte value encoded as a base58 string.\n */\n\n/**\n * NonceAccount class\n */\nvar NonceAccount = /*#__PURE__*/function () {\n  /**\n   * @internal\n   */\n  function NonceAccount(args) {\n    _classCallCheck(this, NonceAccount);\n    this.authorizedPubkey = void 0;\n    this.nonce = void 0;\n    this.feeCalculator = void 0;\n    this.authorizedPubkey = args.authorizedPubkey;\n    this.nonce = args.nonce;\n    this.feeCalculator = args.feeCalculator;\n  }\n\n  /**\n   * Deserialize NonceAccount from the account data.\n   *\n   * @param buffer account data\n   * @return NonceAccount\n   */\n  _createClass(NonceAccount, null, [{\n    key: \"fromAccountData\",\n    value: function fromAccountData(buffer) {\n      var nonceAccount = NonceAccountLayout.decode(toBuffer(buffer), 0);\n      return new NonceAccount({\n        authorizedPubkey: new PublicKey(nonceAccount.authorizedPubkey),\n        nonce: new PublicKey(nonceAccount.nonce).toString(),\n        feeCalculator: nonceAccount.feeCalculator\n      });\n    }\n  }]);\n  return NonceAccount;\n}();\nvar encodeDecode = function encodeDecode(layout) {\n  var decode = layout.decode.bind(layout);\n  var encode = layout.encode.bind(layout);\n  return {\n    decode: decode,\n    encode: encode\n  };\n};\nvar bigInt = function bigInt(length) {\n  return function (property) {\n    var layout = blob(length, property);\n    var _encodeDecode = encodeDecode(layout),\n      encode = _encodeDecode.encode,\n      decode = _encodeDecode.decode;\n    var bigIntLayout = layout;\n    bigIntLayout.decode = function (buffer, offset) {\n      var src = decode(buffer, offset);\n      return toBigIntLE(Buffer.from(src));\n    };\n    bigIntLayout.encode = function (bigInt, buffer, offset) {\n      var src = toBufferLE(bigInt, length);\n      return encode(src, buffer, offset);\n    };\n    return bigIntLayout;\n  };\n};\nvar u64 = bigInt(8);\n\n/**\n * Create account system transaction params\n */\n\n/**\n * Transfer system transaction params\n */\n\n/**\n * Assign system transaction params\n */\n\n/**\n * Create account with seed system transaction params\n */\n\n/**\n * Create nonce account system transaction params\n */\n\n/**\n * Create nonce account with seed system transaction params\n */\n\n/**\n * Initialize nonce account system instruction params\n */\n\n/**\n * Advance nonce account system instruction params\n */\n\n/**\n * Withdraw nonce account system transaction params\n */\n\n/**\n * Authorize nonce account system transaction params\n */\n\n/**\n * Allocate account system transaction params\n */\n\n/**\n * Allocate account with seed system transaction params\n */\n\n/**\n * Assign account with seed system transaction params\n */\n\n/**\n * Transfer with seed system transaction params\n */\n\n/** Decoded transfer system transaction instruction */\n\n/** Decoded transferWithSeed system transaction instruction */\n\n/**\n * System Instruction class\n */\nvar SystemInstruction = /*#__PURE__*/function () {\n  /**\n   * @internal\n   */\n  function SystemInstruction() {\n    _classCallCheck(this, SystemInstruction);\n  }\n\n  /**\n   * Decode a system instruction and retrieve the instruction type.\n   */\n  _createClass(SystemInstruction, null, [{\n    key: \"decodeInstructionType\",\n    value: function decodeInstructionType(instruction) {\n      this.checkProgramId(instruction.programId);\n      var instructionTypeLayout = BufferLayout.u32('instruction');\n      var typeIndex = instructionTypeLayout.decode(instruction.data);\n      var type;\n      for (var _i = 0, _Object$entries = Object.entries(SYSTEM_INSTRUCTION_LAYOUTS); _i < _Object$entries.length; _i++) {\n        var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n          ixType = _Object$entries$_i[0],\n          layout = _Object$entries$_i[1];\n        if (layout.index == typeIndex) {\n          type = ixType;\n          break;\n        }\n      }\n      if (!type) {\n        throw new Error('Instruction type incorrect; not a SystemInstruction');\n      }\n      return type;\n    }\n\n    /**\n     * Decode a create account system instruction and retrieve the instruction params.\n     */\n  }, {\n    key: \"decodeCreateAccount\",\n    value: function decodeCreateAccount(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 2);\n      var _decodeData = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.Create, instruction.data),\n        lamports = _decodeData.lamports,\n        space = _decodeData.space,\n        programId = _decodeData.programId;\n      return {\n        fromPubkey: instruction.keys[0].pubkey,\n        newAccountPubkey: instruction.keys[1].pubkey,\n        lamports: lamports,\n        space: space,\n        programId: new PublicKey(programId)\n      };\n    }\n\n    /**\n     * Decode a transfer system instruction and retrieve the instruction params.\n     */\n  }, {\n    key: \"decodeTransfer\",\n    value: function decodeTransfer(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 2);\n      var _decodeData2 = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.Transfer, instruction.data),\n        lamports = _decodeData2.lamports;\n      return {\n        fromPubkey: instruction.keys[0].pubkey,\n        toPubkey: instruction.keys[1].pubkey,\n        lamports: lamports\n      };\n    }\n\n    /**\n     * Decode a transfer with seed system instruction and retrieve the instruction params.\n     */\n  }, {\n    key: \"decodeTransferWithSeed\",\n    value: function decodeTransferWithSeed(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 3);\n      var _decodeData3 = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed, instruction.data),\n        lamports = _decodeData3.lamports,\n        seed = _decodeData3.seed,\n        programId = _decodeData3.programId;\n      return {\n        fromPubkey: instruction.keys[0].pubkey,\n        basePubkey: instruction.keys[1].pubkey,\n        toPubkey: instruction.keys[2].pubkey,\n        lamports: lamports,\n        seed: seed,\n        programId: new PublicKey(programId)\n      };\n    }\n\n    /**\n     * Decode an allocate system instruction and retrieve the instruction params.\n     */\n  }, {\n    key: \"decodeAllocate\",\n    value: function decodeAllocate(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 1);\n      var _decodeData4 = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.Allocate, instruction.data),\n        space = _decodeData4.space;\n      return {\n        accountPubkey: instruction.keys[0].pubkey,\n        space: space\n      };\n    }\n\n    /**\n     * Decode an allocate with seed system instruction and retrieve the instruction params.\n     */\n  }, {\n    key: \"decodeAllocateWithSeed\",\n    value: function decodeAllocateWithSeed(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 1);\n      var _decodeData5 = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed, instruction.data),\n        base = _decodeData5.base,\n        seed = _decodeData5.seed,\n        space = _decodeData5.space,\n        programId = _decodeData5.programId;\n      return {\n        accountPubkey: instruction.keys[0].pubkey,\n        basePubkey: new PublicKey(base),\n        seed: seed,\n        space: space,\n        programId: new PublicKey(programId)\n      };\n    }\n\n    /**\n     * Decode an assign system instruction and retrieve the instruction params.\n     */\n  }, {\n    key: \"decodeAssign\",\n    value: function decodeAssign(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 1);\n      var _decodeData6 = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.Assign, instruction.data),\n        programId = _decodeData6.programId;\n      return {\n        accountPubkey: instruction.keys[0].pubkey,\n        programId: new PublicKey(programId)\n      };\n    }\n\n    /**\n     * Decode an assign with seed system instruction and retrieve the instruction params.\n     */\n  }, {\n    key: \"decodeAssignWithSeed\",\n    value: function decodeAssignWithSeed(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 1);\n      var _decodeData7 = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed, instruction.data),\n        base = _decodeData7.base,\n        seed = _decodeData7.seed,\n        programId = _decodeData7.programId;\n      return {\n        accountPubkey: instruction.keys[0].pubkey,\n        basePubkey: new PublicKey(base),\n        seed: seed,\n        programId: new PublicKey(programId)\n      };\n    }\n\n    /**\n     * Decode a create account with seed system instruction and retrieve the instruction params.\n     */\n  }, {\n    key: \"decodeCreateWithSeed\",\n    value: function decodeCreateWithSeed(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 2);\n      var _decodeData8 = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed, instruction.data),\n        base = _decodeData8.base,\n        seed = _decodeData8.seed,\n        lamports = _decodeData8.lamports,\n        space = _decodeData8.space,\n        programId = _decodeData8.programId;\n      return {\n        fromPubkey: instruction.keys[0].pubkey,\n        newAccountPubkey: instruction.keys[1].pubkey,\n        basePubkey: new PublicKey(base),\n        seed: seed,\n        lamports: lamports,\n        space: space,\n        programId: new PublicKey(programId)\n      };\n    }\n\n    /**\n     * Decode a nonce initialize system instruction and retrieve the instruction params.\n     */\n  }, {\n    key: \"decodeNonceInitialize\",\n    value: function decodeNonceInitialize(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 3);\n      var _decodeData9 = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount, instruction.data),\n        authorized = _decodeData9.authorized;\n      return {\n        noncePubkey: instruction.keys[0].pubkey,\n        authorizedPubkey: new PublicKey(authorized)\n      };\n    }\n\n    /**\n     * Decode a nonce advance system instruction and retrieve the instruction params.\n     */\n  }, {\n    key: \"decodeNonceAdvance\",\n    value: function decodeNonceAdvance(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 3);\n      decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount, instruction.data);\n      return {\n        noncePubkey: instruction.keys[0].pubkey,\n        authorizedPubkey: instruction.keys[2].pubkey\n      };\n    }\n\n    /**\n     * Decode a nonce withdraw system instruction and retrieve the instruction params.\n     */\n  }, {\n    key: \"decodeNonceWithdraw\",\n    value: function decodeNonceWithdraw(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 5);\n      var _decodeData10 = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount, instruction.data),\n        lamports = _decodeData10.lamports;\n      return {\n        noncePubkey: instruction.keys[0].pubkey,\n        toPubkey: instruction.keys[1].pubkey,\n        authorizedPubkey: instruction.keys[4].pubkey,\n        lamports: lamports\n      };\n    }\n\n    /**\n     * Decode a nonce authorize system instruction and retrieve the instruction params.\n     */\n  }, {\n    key: \"decodeNonceAuthorize\",\n    value: function decodeNonceAuthorize(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 2);\n      var _decodeData11 = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount, instruction.data),\n        authorized = _decodeData11.authorized;\n      return {\n        noncePubkey: instruction.keys[0].pubkey,\n        authorizedPubkey: instruction.keys[1].pubkey,\n        newAuthorizedPubkey: new PublicKey(authorized)\n      };\n    }\n\n    /**\n     * @internal\n     */\n  }, {\n    key: \"checkProgramId\",\n    value: function checkProgramId(programId) {\n      if (!programId.equals(SystemProgram.programId)) {\n        throw new Error('invalid instruction; programId is not SystemProgram');\n      }\n    }\n\n    /**\n     * @internal\n     */\n  }, {\n    key: \"checkKeyLength\",\n    value: function checkKeyLength(keys, expectedLength) {\n      if (keys.length < expectedLength) {\n        throw new Error(\"invalid instruction; found \".concat(keys.length, \" keys, expected at least \").concat(expectedLength));\n      }\n    }\n  }]);\n  return SystemInstruction;\n}();\n\n/**\n * An enumeration of valid SystemInstructionType's\n */\n\n/**\n * An enumeration of valid system InstructionType's\n * @internal\n */\nvar SYSTEM_INSTRUCTION_LAYOUTS = Object.freeze({\n  Create: {\n    index: 0,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports'), BufferLayout.ns64('space'), publicKey('programId')])\n  },\n  Assign: {\n    index: 1,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('programId')])\n  },\n  Transfer: {\n    index: 2,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), u64('lamports')])\n  },\n  CreateWithSeed: {\n    index: 3,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('base'), rustString('seed'), BufferLayout.ns64('lamports'), BufferLayout.ns64('space'), publicKey('programId')])\n  },\n  AdvanceNonceAccount: {\n    index: 4,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  WithdrawNonceAccount: {\n    index: 5,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')])\n  },\n  InitializeNonceAccount: {\n    index: 6,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('authorized')])\n  },\n  AuthorizeNonceAccount: {\n    index: 7,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('authorized')])\n  },\n  Allocate: {\n    index: 8,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('space')])\n  },\n  AllocateWithSeed: {\n    index: 9,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('base'), rustString('seed'), BufferLayout.ns64('space'), publicKey('programId')])\n  },\n  AssignWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('base'), rustString('seed'), publicKey('programId')])\n  },\n  TransferWithSeed: {\n    index: 11,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), u64('lamports'), rustString('seed'), publicKey('programId')])\n  },\n  UpgradeNonceAccount: {\n    index: 12,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  }\n});\n\n/**\n * Factory class for transactions to interact with the System program\n */\nvar SystemProgram = /*#__PURE__*/function () {\n  /**\n   * @internal\n   */\n  function SystemProgram() {\n    _classCallCheck(this, SystemProgram);\n  }\n\n  /**\n   * Public key that identifies the System program\n   */\n  _createClass(SystemProgram, null, [{\n    key: \"createAccount\",\n    value:\n    /**\n     * Generate a transaction instruction that creates a new account\n     */\n    function createAccount(params) {\n      var type = SYSTEM_INSTRUCTION_LAYOUTS.Create;\n      var data = encodeData(type, {\n        lamports: params.lamports,\n        space: params.space,\n        programId: toBuffer(params.programId.toBuffer())\n      });\n      return new TransactionInstruction({\n        keys: [{\n          pubkey: params.fromPubkey,\n          isSigner: true,\n          isWritable: true\n        }, {\n          pubkey: params.newAccountPubkey,\n          isSigner: true,\n          isWritable: true\n        }],\n        programId: this.programId,\n        data: data\n      });\n    }\n\n    /**\n     * Generate a transaction instruction that transfers lamports from one account to another\n     */\n  }, {\n    key: \"transfer\",\n    value: function transfer(params) {\n      var data;\n      var keys;\n      if ('basePubkey' in params) {\n        var type = SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed;\n        data = encodeData(type, {\n          lamports: BigInt(params.lamports),\n          seed: params.seed,\n          programId: toBuffer(params.programId.toBuffer())\n        });\n        keys = [{\n          pubkey: params.fromPubkey,\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: params.basePubkey,\n          isSigner: true,\n          isWritable: false\n        }, {\n          pubkey: params.toPubkey,\n          isSigner: false,\n          isWritable: true\n        }];\n      } else {\n        var _type = SYSTEM_INSTRUCTION_LAYOUTS.Transfer;\n        data = encodeData(_type, {\n          lamports: BigInt(params.lamports)\n        });\n        keys = [{\n          pubkey: params.fromPubkey,\n          isSigner: true,\n          isWritable: true\n        }, {\n          pubkey: params.toPubkey,\n          isSigner: false,\n          isWritable: true\n        }];\n      }\n      return new TransactionInstruction({\n        keys: keys,\n        programId: this.programId,\n        data: data\n      });\n    }\n\n    /**\n     * Generate a transaction instruction that assigns an account to a program\n     */\n  }, {\n    key: \"assign\",\n    value: function assign(params) {\n      var data;\n      var keys;\n      if ('basePubkey' in params) {\n        var type = SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed;\n        data = encodeData(type, {\n          base: toBuffer(params.basePubkey.toBuffer()),\n          seed: params.seed,\n          programId: toBuffer(params.programId.toBuffer())\n        });\n        keys = [{\n          pubkey: params.accountPubkey,\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: params.basePubkey,\n          isSigner: true,\n          isWritable: false\n        }];\n      } else {\n        var _type2 = SYSTEM_INSTRUCTION_LAYOUTS.Assign;\n        data = encodeData(_type2, {\n          programId: toBuffer(params.programId.toBuffer())\n        });\n        keys = [{\n          pubkey: params.accountPubkey,\n          isSigner: true,\n          isWritable: true\n        }];\n      }\n      return new TransactionInstruction({\n        keys: keys,\n        programId: this.programId,\n        data: data\n      });\n    }\n\n    /**\n     * Generate a transaction instruction that creates a new account at\n     *   an address generated with `from`, a seed, and programId\n     */\n  }, {\n    key: \"createAccountWithSeed\",\n    value: function createAccountWithSeed(params) {\n      var type = SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed;\n      var data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        lamports: params.lamports,\n        space: params.space,\n        programId: toBuffer(params.programId.toBuffer())\n      });\n      var keys = [{\n        pubkey: params.fromPubkey,\n        isSigner: true,\n        isWritable: true\n      }, {\n        pubkey: params.newAccountPubkey,\n        isSigner: false,\n        isWritable: true\n      }];\n      if (params.basePubkey != params.fromPubkey) {\n        keys.push({\n          pubkey: params.basePubkey,\n          isSigner: true,\n          isWritable: false\n        });\n      }\n      return new TransactionInstruction({\n        keys: keys,\n        programId: this.programId,\n        data: data\n      });\n    }\n\n    /**\n     * Generate a transaction that creates a new Nonce account\n     */\n  }, {\n    key: \"createNonceAccount\",\n    value: function createNonceAccount(params) {\n      var transaction = new Transaction();\n      if ('basePubkey' in params && 'seed' in params) {\n        transaction.add(SystemProgram.createAccountWithSeed({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          basePubkey: params.basePubkey,\n          seed: params.seed,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId\n        }));\n      } else {\n        transaction.add(SystemProgram.createAccount({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId\n        }));\n      }\n      var initParams = {\n        noncePubkey: params.noncePubkey,\n        authorizedPubkey: params.authorizedPubkey\n      };\n      transaction.add(this.nonceInitialize(initParams));\n      return transaction;\n    }\n\n    /**\n     * Generate an instruction to initialize a Nonce account\n     */\n  }, {\n    key: \"nonceInitialize\",\n    value: function nonceInitialize(params) {\n      var type = SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount;\n      var data = encodeData(type, {\n        authorized: toBuffer(params.authorizedPubkey.toBuffer())\n      });\n      var instructionData = {\n        keys: [{\n          pubkey: params.noncePubkey,\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false\n        }, {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false\n        }],\n        programId: this.programId,\n        data: data\n      };\n      return new TransactionInstruction(instructionData);\n    }\n\n    /**\n     * Generate an instruction to advance the nonce in a Nonce account\n     */\n  }, {\n    key: \"nonceAdvance\",\n    value: function nonceAdvance(params) {\n      var type = SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount;\n      var data = encodeData(type);\n      var instructionData = {\n        keys: [{\n          pubkey: params.noncePubkey,\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false\n        }, {\n          pubkey: params.authorizedPubkey,\n          isSigner: true,\n          isWritable: false\n        }],\n        programId: this.programId,\n        data: data\n      };\n      return new TransactionInstruction(instructionData);\n    }\n\n    /**\n     * Generate a transaction instruction that withdraws lamports from a Nonce account\n     */\n  }, {\n    key: \"nonceWithdraw\",\n    value: function nonceWithdraw(params) {\n      var type = SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount;\n      var data = encodeData(type, {\n        lamports: params.lamports\n      });\n      return new TransactionInstruction({\n        keys: [{\n          pubkey: params.noncePubkey,\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: params.toPubkey,\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false\n        }, {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false\n        }, {\n          pubkey: params.authorizedPubkey,\n          isSigner: true,\n          isWritable: false\n        }],\n        programId: this.programId,\n        data: data\n      });\n    }\n\n    /**\n     * Generate a transaction instruction that authorizes a new PublicKey as the authority\n     * on a Nonce account.\n     */\n  }, {\n    key: \"nonceAuthorize\",\n    value: function nonceAuthorize(params) {\n      var type = SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount;\n      var data = encodeData(type, {\n        authorized: toBuffer(params.newAuthorizedPubkey.toBuffer())\n      });\n      return new TransactionInstruction({\n        keys: [{\n          pubkey: params.noncePubkey,\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: params.authorizedPubkey,\n          isSigner: true,\n          isWritable: false\n        }],\n        programId: this.programId,\n        data: data\n      });\n    }\n\n    /**\n     * Generate a transaction instruction that allocates space in an account without funding\n     */\n  }, {\n    key: \"allocate\",\n    value: function allocate(params) {\n      var data;\n      var keys;\n      if ('basePubkey' in params) {\n        var type = SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed;\n        data = encodeData(type, {\n          base: toBuffer(params.basePubkey.toBuffer()),\n          seed: params.seed,\n          space: params.space,\n          programId: toBuffer(params.programId.toBuffer())\n        });\n        keys = [{\n          pubkey: params.accountPubkey,\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: params.basePubkey,\n          isSigner: true,\n          isWritable: false\n        }];\n      } else {\n        var _type3 = SYSTEM_INSTRUCTION_LAYOUTS.Allocate;\n        data = encodeData(_type3, {\n          space: params.space\n        });\n        keys = [{\n          pubkey: params.accountPubkey,\n          isSigner: true,\n          isWritable: true\n        }];\n      }\n      return new TransactionInstruction({\n        keys: keys,\n        programId: this.programId,\n        data: data\n      });\n    }\n  }]);\n  return SystemProgram;\n}();\nSystemProgram.programId = new PublicKey('11111111111111111111111111111111');\n\n// Keep program chunks under PACKET_DATA_SIZE, leaving enough room for the\n// rest of the Transaction fields\n//\n// TODO: replace 300 with a proper constant for the size of the other\n// Transaction fields\nvar CHUNK_SIZE = PACKET_DATA_SIZE - 300;\n\n/**\n * Program loader interface\n */\nvar Loader = /*#__PURE__*/function () {\n  /**\n   * @internal\n   */\n  function Loader() {\n    _classCallCheck(this, Loader);\n  }\n\n  /**\n   * Amount of program data placed in each load Transaction\n   */\n  _createClass(Loader, null, [{\n    key: \"getMinNumSignatures\",\n    value:\n    /**\n     * Minimum number of signatures required to load a program not including\n     * retries\n     *\n     * Can be used to calculate transaction fees\n     */\n    function getMinNumSignatures(dataLength) {\n      return 2 * (\n      // Every transaction requires two signatures (payer + program)\n      Math.ceil(dataLength / Loader.chunkSize) + 1 +\n      // Add one for Create transaction\n      1) // Add one for Finalize transaction\n      ;\n    }\n\n    /**\n     * Loads a generic program\n     *\n     * @param connection The connection to use\n     * @param payer System account that pays to load the program\n     * @param program Account to load the program into\n     * @param programId Public key that identifies the loader\n     * @param data Program octets\n     * @return true if program was loaded successfully, false if program was already loaded\n     */\n  }, {\n    key: \"load\",\n    value: function () {\n      var _load = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(connection, payer, program, programId, data) {\n        var balanceNeeded, programInfo, transaction, dataLayout, chunkSize, offset, array, transactions, bytes, _data, _transaction, REQUESTS_PER_SECOND, _dataLayout, _data2, _transaction2, deployCommitment, finalizeSignature, _yield$connection$con, context, value, currentSlot;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return connection.getMinimumBalanceForRentExemption(data.length);\n            case 2:\n              balanceNeeded = _context.sent;\n              _context.next = 5;\n              return connection.getAccountInfo(program.publicKey, 'confirmed');\n            case 5:\n              programInfo = _context.sent;\n              transaction = null;\n              if (!(programInfo !== null)) {\n                _context.next = 16;\n                break;\n              }\n              if (!programInfo.executable) {\n                _context.next = 11;\n                break;\n              }\n              console.error('Program load failed, account is already executable');\n              return _context.abrupt(\"return\", false);\n            case 11:\n              if (programInfo.data.length !== data.length) {\n                transaction = transaction || new Transaction();\n                transaction.add(SystemProgram.allocate({\n                  accountPubkey: program.publicKey,\n                  space: data.length\n                }));\n              }\n              if (!programInfo.owner.equals(programId)) {\n                transaction = transaction || new Transaction();\n                transaction.add(SystemProgram.assign({\n                  accountPubkey: program.publicKey,\n                  programId: programId\n                }));\n              }\n              if (programInfo.lamports < balanceNeeded) {\n                transaction = transaction || new Transaction();\n                transaction.add(SystemProgram.transfer({\n                  fromPubkey: payer.publicKey,\n                  toPubkey: program.publicKey,\n                  lamports: balanceNeeded - programInfo.lamports\n                }));\n              }\n              _context.next = 17;\n              break;\n            case 16:\n              transaction = new Transaction().add(SystemProgram.createAccount({\n                fromPubkey: payer.publicKey,\n                newAccountPubkey: program.publicKey,\n                lamports: balanceNeeded > 0 ? balanceNeeded : 1,\n                space: data.length,\n                programId: programId\n              }));\n            case 17:\n              if (!(transaction !== null)) {\n                _context.next = 20;\n                break;\n              }\n              _context.next = 20;\n              return sendAndConfirmTransaction(connection, transaction, [payer, program], {\n                commitment: 'confirmed'\n              });\n            case 20:\n              dataLayout = BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.u32('offset'), BufferLayout.u32('bytesLength'), BufferLayout.u32('bytesLengthPadding'), BufferLayout.seq(BufferLayout.u8('byte'), BufferLayout.offset(BufferLayout.u32(), -8), 'bytes')]);\n              chunkSize = Loader.chunkSize;\n              offset = 0;\n              array = data;\n              transactions = [];\n            case 25:\n              if (!(array.length > 0)) {\n                _context.next = 39;\n                break;\n              }\n              bytes = array.slice(0, chunkSize);\n              _data = Buffer.alloc(chunkSize + 16);\n              dataLayout.encode({\n                instruction: 0,\n                // Load instruction\n                offset: offset,\n                bytes: bytes,\n                bytesLength: 0,\n                bytesLengthPadding: 0\n              }, _data);\n              _transaction = new Transaction().add({\n                keys: [{\n                  pubkey: program.publicKey,\n                  isSigner: true,\n                  isWritable: true\n                }],\n                programId: programId,\n                data: _data\n              });\n              transactions.push(sendAndConfirmTransaction(connection, _transaction, [payer, program], {\n                commitment: 'confirmed'\n              }));\n\n              // Delay between sends in an attempt to reduce rate limit errors\n              if (!connection._rpcEndpoint.includes('solana.com')) {\n                _context.next = 35;\n                break;\n              }\n              REQUESTS_PER_SECOND = 4;\n              _context.next = 35;\n              return sleep(1000 / REQUESTS_PER_SECOND);\n            case 35:\n              offset += chunkSize;\n              array = array.slice(chunkSize);\n              _context.next = 25;\n              break;\n            case 39:\n              _context.next = 41;\n              return Promise.all(transactions);\n            case 41:\n              _dataLayout = BufferLayout.struct([BufferLayout.u32('instruction')]);\n              _data2 = Buffer.alloc(_dataLayout.span);\n              _dataLayout.encode({\n                instruction: 1 // Finalize instruction\n              }, _data2);\n              _transaction2 = new Transaction().add({\n                keys: [{\n                  pubkey: program.publicKey,\n                  isSigner: true,\n                  isWritable: true\n                }, {\n                  pubkey: SYSVAR_RENT_PUBKEY,\n                  isSigner: false,\n                  isWritable: false\n                }],\n                programId: programId,\n                data: _data2\n              });\n              deployCommitment = 'processed';\n              _context.next = 48;\n              return connection.sendTransaction(_transaction2, [payer, program], {\n                preflightCommitment: deployCommitment\n              });\n            case 48:\n              finalizeSignature = _context.sent;\n              _context.next = 51;\n              return connection.confirmTransaction({\n                signature: finalizeSignature,\n                lastValidBlockHeight: _transaction2.lastValidBlockHeight,\n                blockhash: _transaction2.recentBlockhash\n              }, deployCommitment);\n            case 51:\n              _yield$connection$con = _context.sent;\n              context = _yield$connection$con.context;\n              value = _yield$connection$con.value;\n              if (!value.err) {\n                _context.next = 56;\n                break;\n              }\n              throw new Error(\"Transaction \".concat(finalizeSignature, \" failed (\").concat(JSON.stringify(value), \")\"));\n            case 56:\n              _context.prev = 57;\n              _context.next = 60;\n              return connection.getSlot({\n                commitment: deployCommitment\n              });\n            case 60:\n              currentSlot = _context.sent;\n              if (!(currentSlot > context.slot)) {\n                _context.next = 63;\n                break;\n              }\n              return _context.abrupt(\"break\", 71);\n            case 63:\n              _context.next = 67;\n              break;\n            case 65:\n              _context.prev = 65;\n              _context.t0 = _context[\"catch\"](57);\n            case 67:\n              _context.next = 69;\n              return new Promise(function (resolve) {\n                return setTimeout(resolve, Math.round(MS_PER_SLOT / 2));\n              });\n            case 69:\n              _context.next = 56;\n              break;\n            case 71:\n              return _context.abrupt(\"return\", true);\n            case 72:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, null, [[57, 65]]);\n      }));\n      function load(_x, _x2, _x3, _x4, _x5) {\n        return _load.apply(this, arguments);\n      }\n      return load;\n    }()\n  }]);\n  return Loader;\n}();\nLoader.chunkSize = CHUNK_SIZE;\nvar BPF_LOADER_PROGRAM_ID = new PublicKey('BPFLoader2111111111111111111111111111111111');\n\n/**\n * Factory class for transactions to interact with a program loader\n */\nvar BpfLoader = /*#__PURE__*/function () {\n  function BpfLoader() {\n    _classCallCheck(this, BpfLoader);\n  }\n  _createClass(BpfLoader, null, [{\n    key: \"getMinNumSignatures\",\n    value:\n    /**\n     * Minimum number of signatures required to load a program not including\n     * retries\n     *\n     * Can be used to calculate transaction fees\n     */\n    function getMinNumSignatures(dataLength) {\n      return Loader.getMinNumSignatures(dataLength);\n    }\n\n    /**\n     * Load a SBF program\n     *\n     * @param connection The connection to use\n     * @param payer Account that will pay program loading fees\n     * @param program Account to load the program into\n     * @param elf The entire ELF containing the SBF program\n     * @param loaderProgramId The program id of the BPF loader to use\n     * @return true if program was loaded successfully, false if program was already loaded\n     */\n  }, {\n    key: \"load\",\n    value: function load(connection, payer, program, elf, loaderProgramId) {\n      return Loader.load(connection, payer, program, loaderProgramId, elf);\n    }\n  }]);\n  return BpfLoader;\n}();\nfunction getDefaultExportFromCjs(x) {\n  return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;\n}\nvar objToString = Object.prototype.toString;\nvar objKeys = Object.keys || function (obj) {\n  var keys = [];\n  for (var name in obj) {\n    keys.push(name);\n  }\n  return keys;\n};\nfunction stringify(val, isArrayProp) {\n  var i, max, str, keys, key, propVal, toStr;\n  if (val === true) {\n    return \"true\";\n  }\n  if (val === false) {\n    return \"false\";\n  }\n  switch (typeof val) {\n    case \"object\":\n      if (val === null) {\n        return null;\n      } else if (val.toJSON && typeof val.toJSON === \"function\") {\n        return stringify(val.toJSON(), isArrayProp);\n      } else {\n        toStr = objToString.call(val);\n        if (toStr === \"[object Array]\") {\n          str = '[';\n          max = val.length - 1;\n          for (i = 0; i < max; i++) {\n            str += stringify(val[i], true) + ',';\n          }\n          if (max > -1) {\n            str += stringify(val[i], true);\n          }\n          return str + ']';\n        } else if (toStr === \"[object Object]\") {\n          // only object is left\n          keys = objKeys(val).sort();\n          max = keys.length;\n          str = \"\";\n          i = 0;\n          while (i < max) {\n            key = keys[i];\n            propVal = stringify(val[key], false);\n            if (propVal !== undefined) {\n              if (str) {\n                str += ',';\n              }\n              str += JSON.stringify(key) + ':' + propVal;\n            }\n            i++;\n          }\n          return '{' + str + '}';\n        } else {\n          return JSON.stringify(val);\n        }\n      }\n    case \"function\":\n    case \"undefined\":\n      return isArrayProp ? null : undefined;\n    case \"string\":\n      return JSON.stringify(val);\n    default:\n      return isFinite(val) ? val : null;\n  }\n}\nvar fastStableStringify = function (val) {\n  var returnVal = stringify(val, false);\n  if (returnVal !== undefined) {\n    return '' + returnVal;\n  }\n};\nvar fastStableStringify$1 = /*@__PURE__*/getDefaultExportFromCjs(fastStableStringify);\nvar MINIMUM_SLOT_PER_EPOCH = 32;\n\n// Returns the number of trailing zeros in the binary representation of self.\nfunction trailingZeros(n) {\n  var trailingZeros = 0;\n  while (n > 1) {\n    n /= 2;\n    trailingZeros++;\n  }\n  return trailingZeros;\n}\n\n// Returns the smallest power of two greater than or equal to n\nfunction nextPowerOfTwo(n) {\n  if (n === 0) return 1;\n  n--;\n  n |= n >> 1;\n  n |= n >> 2;\n  n |= n >> 4;\n  n |= n >> 8;\n  n |= n >> 16;\n  n |= n >> 32;\n  return n + 1;\n}\n\n/**\n * Epoch schedule\n * (see https://docs.solana.com/terminology#epoch)\n * Can be retrieved with the {@link Connection.getEpochSchedule} method\n */\nvar EpochSchedule = /*#__PURE__*/function () {\n  function EpochSchedule(slotsPerEpoch, leaderScheduleSlotOffset, warmup, firstNormalEpoch, firstNormalSlot) {\n    _classCallCheck(this, EpochSchedule);\n    /** The maximum number of slots in each epoch */\n    this.slotsPerEpoch = void 0;\n    /** The number of slots before beginning of an epoch to calculate a leader schedule for that epoch */\n    this.leaderScheduleSlotOffset = void 0;\n    /** Indicates whether epochs start short and grow */\n    this.warmup = void 0;\n    /** The first epoch with `slotsPerEpoch` slots */\n    this.firstNormalEpoch = void 0;\n    /** The first slot of `firstNormalEpoch` */\n    this.firstNormalSlot = void 0;\n    this.slotsPerEpoch = slotsPerEpoch;\n    this.leaderScheduleSlotOffset = leaderScheduleSlotOffset;\n    this.warmup = warmup;\n    this.firstNormalEpoch = firstNormalEpoch;\n    this.firstNormalSlot = firstNormalSlot;\n  }\n  _createClass(EpochSchedule, [{\n    key: \"getEpoch\",\n    value: function getEpoch(slot) {\n      return this.getEpochAndSlotIndex(slot)[0];\n    }\n  }, {\n    key: \"getEpochAndSlotIndex\",\n    value: function getEpochAndSlotIndex(slot) {\n      if (slot < this.firstNormalSlot) {\n        var epoch = trailingZeros(nextPowerOfTwo(slot + MINIMUM_SLOT_PER_EPOCH + 1)) - trailingZeros(MINIMUM_SLOT_PER_EPOCH) - 1;\n        var epochLen = this.getSlotsInEpoch(epoch);\n        var slotIndex = slot - (epochLen - MINIMUM_SLOT_PER_EPOCH);\n        return [epoch, slotIndex];\n      } else {\n        var normalSlotIndex = slot - this.firstNormalSlot;\n        var normalEpochIndex = Math.floor(normalSlotIndex / this.slotsPerEpoch);\n        var _epoch = this.firstNormalEpoch + normalEpochIndex;\n        var _slotIndex = normalSlotIndex % this.slotsPerEpoch;\n        return [_epoch, _slotIndex];\n      }\n    }\n  }, {\n    key: \"getFirstSlotInEpoch\",\n    value: function getFirstSlotInEpoch(epoch) {\n      if (epoch <= this.firstNormalEpoch) {\n        return (Math.pow(2, epoch) - 1) * MINIMUM_SLOT_PER_EPOCH;\n      } else {\n        return (epoch - this.firstNormalEpoch) * this.slotsPerEpoch + this.firstNormalSlot;\n      }\n    }\n  }, {\n    key: \"getLastSlotInEpoch\",\n    value: function getLastSlotInEpoch(epoch) {\n      return this.getFirstSlotInEpoch(epoch) + this.getSlotsInEpoch(epoch) - 1;\n    }\n  }, {\n    key: \"getSlotsInEpoch\",\n    value: function getSlotsInEpoch(epoch) {\n      if (epoch < this.firstNormalEpoch) {\n        return Math.pow(2, epoch + trailingZeros(MINIMUM_SLOT_PER_EPOCH));\n      } else {\n        return this.slotsPerEpoch;\n      }\n    }\n  }]);\n  return EpochSchedule;\n}();\nfunction _createSuper$1(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct$1();\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n      result;\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n    return _possibleConstructorReturn(this, result);\n  };\n}\nfunction _isNativeReflectConstruct$1() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\nvar SendTransactionError = /*#__PURE__*/function (_Error) {\n  _inherits(SendTransactionError, _Error);\n  var _super = _createSuper$1(SendTransactionError);\n  function SendTransactionError(message, logs) {\n    var _this;\n    _classCallCheck(this, SendTransactionError);\n    _this = _super.call(this, message);\n    _this.logs = void 0;\n    _this.logs = logs;\n    return _this;\n  }\n  return _createClass(SendTransactionError);\n}( /*#__PURE__*/_wrapNativeSuper(Error));\n\n// Keep in sync with client/src/rpc_custom_errors.rs\n// Typescript `enums` thwart tree-shaking. See https://bargsten.org/jsts/enums/\nvar SolanaJSONRPCErrorCode = {\n  JSON_RPC_SERVER_ERROR_BLOCK_CLEANED_UP: -32001,\n  JSON_RPC_SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE: -32002,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_VERIFICATION_FAILURE: -32003,\n  JSON_RPC_SERVER_ERROR_BLOCK_NOT_AVAILABLE: -32004,\n  JSON_RPC_SERVER_ERROR_NODE_UNHEALTHY: -32005,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE: -32006,\n  JSON_RPC_SERVER_ERROR_SLOT_SKIPPED: -32007,\n  JSON_RPC_SERVER_ERROR_NO_SNAPSHOT: -32008,\n  JSON_RPC_SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED: -32009,\n  JSON_RPC_SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX: -32010,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_HISTORY_NOT_AVAILABLE: -32011,\n  JSON_RPC_SCAN_ERROR: -32012,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_LEN_MISMATCH: -32013,\n  JSON_RPC_SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET: -32014,\n  JSON_RPC_SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION: -32015,\n  JSON_RPC_SERVER_ERROR_MIN_CONTEXT_SLOT_NOT_REACHED: -32016\n};\nvar SolanaJSONRPCError = /*#__PURE__*/function (_Error2) {\n  _inherits(SolanaJSONRPCError, _Error2);\n  var _super2 = _createSuper$1(SolanaJSONRPCError);\n  function SolanaJSONRPCError(_ref, customMessage) {\n    var _this2;\n    var code = _ref.code,\n      message = _ref.message,\n      data = _ref.data;\n    _classCallCheck(this, SolanaJSONRPCError);\n    _this2 = _super2.call(this, customMessage != null ? \"\".concat(customMessage, \": \").concat(message) : message);\n    _this2.code = void 0;\n    _this2.data = void 0;\n    _this2.code = code;\n    _this2.data = data;\n    _this2.name = 'SolanaJSONRPCError';\n    return _this2;\n  }\n  return _createClass(SolanaJSONRPCError);\n}( /*#__PURE__*/_wrapNativeSuper(Error));\nvar fetchImpl = globalThis.fetch;\nfunction ownKeys$1(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread$1(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys$1(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n      result;\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n    return _possibleConstructorReturn(this, result);\n  };\n}\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\nvar RpcWebSocketClient = /*#__PURE__*/function (_RpcWebSocketCommonCl) {\n  _inherits(RpcWebSocketClient, _RpcWebSocketCommonCl);\n  var _super = _createSuper(RpcWebSocketClient);\n  function RpcWebSocketClient(address, options, generate_request_id) {\n    var _this;\n    _classCallCheck(this, RpcWebSocketClient);\n    var webSocketFactory = function webSocketFactory(url) {\n      var rpc = createRpc(url, _objectSpread$1({\n        autoconnect: true,\n        max_reconnects: 5,\n        reconnect: true,\n        reconnect_interval: 1000\n      }, options));\n      if ('socket' in rpc) {\n        _this.underlyingSocket = rpc.socket;\n      } else {\n        _this.underlyingSocket = rpc;\n      }\n      return rpc;\n    };\n    _this = _super.call(this, webSocketFactory, address, options, generate_request_id);\n    _this.underlyingSocket = void 0;\n    return _this;\n  }\n  _createClass(RpcWebSocketClient, [{\n    key: \"call\",\n    value: function call() {\n      var _this$underlyingSocke;\n      var readyState = (_this$underlyingSocke = this.underlyingSocket) === null || _this$underlyingSocke === void 0 ? void 0 : _this$underlyingSocke.readyState;\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      if (readyState === 1 /* WebSocket.OPEN */) {\n        var _get2;\n        return (_get2 = _get(_getPrototypeOf(RpcWebSocketClient.prototype), \"call\", this)).call.apply(_get2, [this].concat(args));\n      }\n      return Promise.reject(new Error('Tried to call a JSON-RPC method `' + args[0] + '` but the socket was not `CONNECTING` or `OPEN` (`readyState` was ' + readyState + ')'));\n    }\n  }, {\n    key: \"notify\",\n    value: function notify() {\n      var _this$underlyingSocke2;\n      var readyState = (_this$underlyingSocke2 = this.underlyingSocket) === null || _this$underlyingSocke2 === void 0 ? void 0 : _this$underlyingSocke2.readyState;\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n      if (readyState === 1 /* WebSocket.OPEN */) {\n        var _get3;\n        return (_get3 = _get(_getPrototypeOf(RpcWebSocketClient.prototype), \"notify\", this)).call.apply(_get3, [this].concat(args));\n      }\n      return Promise.reject(new Error('Tried to send a JSON-RPC notification `' + args[0] + '` but the socket was not `CONNECTING` or `OPEN` (`readyState` was ' + readyState + ')'));\n    }\n  }]);\n  return RpcWebSocketClient;\n}(RpcWebSocketCommonClient);\n\n/**\n * @internal\n */\n\n/**\n * Decode account data buffer using an AccountType\n * @internal\n */\nfunction decodeData(type, data) {\n  var decoded;\n  try {\n    decoded = type.layout.decode(data);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n  if (decoded.typeIndex !== type.index) {\n    throw new Error(\"invalid account data; account type mismatch \".concat(decoded.typeIndex, \" != \").concat(type.index));\n  }\n  return decoded;\n}\n\n/// The serialized size of lookup table metadata\nvar LOOKUP_TABLE_META_SIZE = 56;\nvar AddressLookupTableAccount = /*#__PURE__*/function () {\n  function AddressLookupTableAccount(args) {\n    _classCallCheck(this, AddressLookupTableAccount);\n    this.key = void 0;\n    this.state = void 0;\n    this.key = args.key;\n    this.state = args.state;\n  }\n  _createClass(AddressLookupTableAccount, [{\n    key: \"isActive\",\n    value: function isActive() {\n      var U64_MAX = BigInt('0xffffffffffffffff');\n      return this.state.deactivationSlot === U64_MAX;\n    }\n  }], [{\n    key: \"deserialize\",\n    value: function deserialize(accountData) {\n      var meta = decodeData(LookupTableMetaLayout, accountData);\n      var serializedAddressesLen = accountData.length - LOOKUP_TABLE_META_SIZE;\n      assert(serializedAddressesLen >= 0, 'lookup table is invalid');\n      assert(serializedAddressesLen % 32 === 0, 'lookup table is invalid');\n      var numSerializedAddresses = serializedAddressesLen / 32;\n      var _BufferLayout$struct$ = BufferLayout.struct([BufferLayout.seq(publicKey(), numSerializedAddresses, 'addresses')]).decode(accountData.slice(LOOKUP_TABLE_META_SIZE)),\n        addresses = _BufferLayout$struct$.addresses;\n      return {\n        deactivationSlot: meta.deactivationSlot,\n        lastExtendedSlot: meta.lastExtendedSlot,\n        lastExtendedSlotStartIndex: meta.lastExtendedStartIndex,\n        authority: meta.authority.length !== 0 ? new PublicKey(meta.authority[0]) : undefined,\n        addresses: addresses.map(function (address) {\n          return new PublicKey(address);\n        })\n      };\n    }\n  }]);\n  return AddressLookupTableAccount;\n}();\nvar LookupTableMetaLayout = {\n  index: 1,\n  layout: BufferLayout.struct([BufferLayout.u32('typeIndex'), u64('deactivationSlot'), BufferLayout.nu64('lastExtendedSlot'), BufferLayout.u8('lastExtendedStartIndex'), BufferLayout.u8(),\n  // option\n  BufferLayout.seq(publicKey(), BufferLayout.offset(BufferLayout.u8(), -1), 'authority')])\n};\nvar URL_RE = /^[^:]+:\\/\\/([^:[]+|\\[[^\\]]+\\])(:\\d+)?(.*)/i;\nfunction makeWebsocketUrl(endpoint) {\n  var matches = endpoint.match(URL_RE);\n  if (matches == null) {\n    throw TypeError(\"Failed to validate endpoint URL `\".concat(endpoint, \"`\"));\n  }\n  var _matches = _slicedToArray(matches, 4);\n  _matches[0];\n  var\n    // eslint-disable-line @typescript-eslint/no-unused-vars\n    hostish = _matches[1],\n    portWithColon = _matches[2],\n    rest = _matches[3];\n  var protocol = endpoint.startsWith('https:') ? 'wss:' : 'ws:';\n  var startPort = portWithColon == null ? null : parseInt(portWithColon.slice(1), 10);\n  var websocketPort =\n  // Only shift the port by +1 as a convention for ws(s) only if given endpoint\n  // is explictly specifying the endpoint port (HTTP-based RPC), assuming\n  // we're directly trying to connect to solana-validator's ws listening port.\n  // When the endpoint omits the port, we're connecting to the protocol\n  // default ports: http(80) or https(443) and it's assumed we're behind a reverse\n  // proxy which manages WebSocket upgrade and backend port redirection.\n  startPort == null ? '' : \":\".concat(startPort + 1);\n  return \"\".concat(protocol, \"//\").concat(hostish).concat(websocketPort).concat(rest);\n}\nvar _process$env$npm_pack;\nvar _excluded = [\"commitment\"],\n  _excluded2 = [\"encoding\"],\n  _excluded3 = [\"commitment\"],\n  _excluded4 = [\"commitment\"];\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\nvar PublicKeyFromString = coerce(instance(PublicKey), string(), function (value) {\n  return new PublicKey(value);\n});\nvar RawAccountDataResult = tuple([string(), literal('base64')]);\nvar BufferFromRawAccountData = coerce(instance(Buffer), RawAccountDataResult, function (value) {\n  return Buffer.from(value[0], 'base64');\n});\n\n/**\n * Attempt to use a recent blockhash for up to 30 seconds\n * @internal\n */\nvar BLOCKHASH_CACHE_TIMEOUT_MS = 30 * 1000;\n\n/**\n * HACK.\n * Copied from rpc-websockets/dist/lib/client.\n * Otherwise, `yarn build` fails with:\n * https://gist.github.com/steveluscher/c057eca81d479ef705cdb53162f9971d\n */\n\n/** @internal */\n/** @internal */\n/** @internal */\n/** @internal */\n\n/** @internal */\n/**\n * @internal\n * Every subscription contains the args used to open the subscription with\n * the server, and a list of callers interested in notifications.\n */\n\n/**\n * @internal\n * A subscription may be in various states of connectedness. Only when it is\n * fully connected will it have a server subscription id associated with it.\n * This id can be returned to the server to unsubscribe the client entirely.\n */\n\n/**\n * A type that encapsulates a subscription's RPC method\n * names and notification (callback) signature.\n */\n\n/**\n * @internal\n * Utility type that keeps tagged unions intact while omitting properties.\n */\n\n/**\n * @internal\n * This type represents a single subscribable 'topic.' It's made up of:\n *\n * - The args used to open the subscription with the server,\n * - The state of the subscription, in terms of its connectedness, and\n * - The set of callbacks to call when the server publishes notifications\n *\n * This record gets indexed by `SubscriptionConfigHash` and is used to\n * set up subscriptions, fan out notifications, and track subscription state.\n */\n\n/**\n * @internal\n */\n\n/**\n * Extra contextual information for RPC responses\n */\n\n/**\n * Options for sending transactions\n */\n\n/**\n * Options for confirming transactions\n */\n\n/**\n * Options for getConfirmedSignaturesForAddress2\n */\n\n/**\n * Options for getSignaturesForAddress\n */\n\n/**\n * RPC Response with extra contextual information\n */\n\n/**\n * A strategy for confirming transactions that uses the last valid\n * block height for a given blockhash to check for transaction expiration.\n */\n\n/**\n * A strategy for confirming durable nonce transactions.\n */\n\n/**\n * Properties shared by all transaction confirmation strategies\n */\n\n/**\n * This type represents all transaction confirmation strategies\n */\n\n/* @internal */\nfunction assertEndpointUrl(putativeUrl) {\n  if (/^https?:/.test(putativeUrl) === false) {\n    throw new TypeError('Endpoint URL must start with `http:` or `https:`.');\n  }\n  return putativeUrl;\n}\n\n/** @internal */\nfunction extractCommitmentFromConfig(commitmentOrConfig) {\n  var commitment;\n  var config;\n  if (typeof commitmentOrConfig === 'string') {\n    commitment = commitmentOrConfig;\n  } else if (commitmentOrConfig) {\n    var specifiedCommitment = commitmentOrConfig.commitment,\n      specifiedConfig = _objectWithoutProperties(commitmentOrConfig, _excluded);\n    commitment = specifiedCommitment;\n    config = specifiedConfig;\n  }\n  return {\n    commitment: commitment,\n    config: config\n  };\n}\n\n/**\n * @internal\n */\nfunction createRpcResult(result) {\n  return union([type({\n    jsonrpc: literal('2.0'),\n    id: string(),\n    result: result\n  }), type({\n    jsonrpc: literal('2.0'),\n    id: string(),\n    error: type({\n      code: unknown(),\n      message: string(),\n      data: optional(any())\n    })\n  })]);\n}\nvar UnknownRpcResult = createRpcResult(unknown());\n\n/**\n * @internal\n */\nfunction jsonRpcResult(schema) {\n  return coerce(createRpcResult(schema), UnknownRpcResult, function (value) {\n    if ('error' in value) {\n      return value;\n    } else {\n      return _objectSpread(_objectSpread({}, value), {}, {\n        result: create(value.result, schema)\n      });\n    }\n  });\n}\n\n/**\n * @internal\n */\nfunction jsonRpcResultAndContext(value) {\n  return jsonRpcResult(type({\n    context: type({\n      slot: number()\n    }),\n    value: value\n  }));\n}\n\n/**\n * @internal\n */\nfunction notificationResultAndContext(value) {\n  return type({\n    context: type({\n      slot: number()\n    }),\n    value: value\n  });\n}\n\n/**\n * @internal\n */\nfunction versionedMessageFromResponse(version, response) {\n  if (version === 0) {\n    return new MessageV0({\n      header: response.header,\n      staticAccountKeys: response.accountKeys.map(function (accountKey) {\n        return new PublicKey(accountKey);\n      }),\n      recentBlockhash: response.recentBlockhash,\n      compiledInstructions: response.instructions.map(function (ix) {\n        return {\n          programIdIndex: ix.programIdIndex,\n          accountKeyIndexes: ix.accounts,\n          data: bs58.decode(ix.data)\n        };\n      }),\n      addressTableLookups: response.addressTableLookups\n    });\n  } else {\n    return new Message(response);\n  }\n}\n\n/**\n * The level of commitment desired when querying state\n * <pre>\n *   'processed': Query the most recent block which has reached 1 confirmation by the connected node\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\n\n// Deprecated as of v1.5.5\n/**\n * A subset of Commitment levels, which are at least optimistically confirmed\n * <pre>\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\n/**\n * Filter for largest accounts query\n * <pre>\n *   'circulating':    Return the largest accounts that are part of the circulating supply\n *   'nonCirculating': Return the largest accounts that are not part of the circulating supply\n * </pre>\n */\n/**\n * Configuration object for changing `getAccountInfo` query behavior\n */\n/**\n * Configuration object for changing `getBalance` query behavior\n */\n/**\n * Configuration object for changing `getBlock` query behavior\n */\n/**\n * Configuration object for changing `getBlock` query behavior\n */\n/**\n * Configuration object for changing `getStakeMinimumDelegation` query behavior\n */\n/**\n * Configuration object for changing `getBlockHeight` query behavior\n */\n/**\n * Configuration object for changing `getEpochInfo` query behavior\n */\n/**\n * Configuration object for changing `getInflationReward` query behavior\n */\n/**\n * Configuration object for changing `getLatestBlockhash` query behavior\n */\n/**\n * Configuration object for changing `isBlockhashValid` query behavior\n */\n/**\n * Configuration object for changing `getSlot` query behavior\n */\n/**\n * Configuration object for changing `getSlotLeader` query behavior\n */\n/**\n * Configuration object for changing `getTransaction` query behavior\n */\n/**\n * Configuration object for changing `getTransaction` query behavior\n */\n/**\n * Configuration object for changing `getLargestAccounts` query behavior\n */\n/**\n * Configuration object for changing `getSupply` request behavior\n */\n/**\n * Configuration object for changing query behavior\n */\n/**\n * Information describing a cluster node\n */\n/**\n * Information describing a vote account\n */\n/**\n * A collection of cluster vote accounts\n */\n/**\n * Network Inflation\n * (see https://docs.solana.com/implemented-proposals/ed_overview)\n */\nvar GetInflationGovernorResult = type({\n  foundation: number(),\n  foundationTerm: number(),\n  initial: number(),\n  taper: number(),\n  terminal: number()\n});\n\n/**\n * The inflation reward for an epoch\n */\n\n/**\n * Expected JSON RPC response for the \"getInflationReward\" message\n */\nvar GetInflationRewardResult = jsonRpcResult(array(nullable(type({\n  epoch: number(),\n  effectiveSlot: number(),\n  amount: number(),\n  postBalance: number(),\n  commission: optional(nullable(number()))\n}))));\n\n/**\n * Configuration object for changing `getRecentPrioritizationFees` query behavior\n */\n\n/**\n * Expected JSON RPC response for the \"getRecentPrioritizationFees\" message\n */\nvar GetRecentPrioritizationFeesResult = array(type({\n  slot: number(),\n  prioritizationFee: number()\n}));\n/**\n * Expected JSON RPC response for the \"getInflationRate\" message\n */\nvar GetInflationRateResult = type({\n  total: number(),\n  validator: number(),\n  foundation: number(),\n  epoch: number()\n});\n\n/**\n * Information about the current epoch\n */\n\nvar GetEpochInfoResult = type({\n  epoch: number(),\n  slotIndex: number(),\n  slotsInEpoch: number(),\n  absoluteSlot: number(),\n  blockHeight: optional(number()),\n  transactionCount: optional(number())\n});\nvar GetEpochScheduleResult = type({\n  slotsPerEpoch: number(),\n  leaderScheduleSlotOffset: number(),\n  warmup: boolean(),\n  firstNormalEpoch: number(),\n  firstNormalSlot: number()\n});\n\n/**\n * Leader schedule\n * (see https://docs.solana.com/terminology#leader-schedule)\n */\n\nvar GetLeaderScheduleResult = record(string(), array(number()));\n\n/**\n * Transaction error or null\n */\nvar TransactionErrorResult = nullable(union([type({}), string()]));\n\n/**\n * Signature status for a transaction\n */\nvar SignatureStatusResult = type({\n  err: TransactionErrorResult\n});\n\n/**\n * Transaction signature received notification\n */\nvar SignatureReceivedResult = literal('receivedSignature');\n\n/**\n * Version info for a node\n */\n\nvar VersionResult = type({\n  'solana-core': string(),\n  'feature-set': optional(number())\n});\nvar SimulatedTransactionResponseStruct = jsonRpcResultAndContext(type({\n  err: nullable(union([type({}), string()])),\n  logs: nullable(array(string())),\n  accounts: optional(nullable(array(nullable(type({\n    executable: boolean(),\n    owner: string(),\n    lamports: number(),\n    data: array(string()),\n    rentEpoch: optional(number())\n  }))))),\n  unitsConsumed: optional(number()),\n  returnData: optional(nullable(type({\n    programId: string(),\n    data: tuple([string(), literal('base64')])\n  })))\n}));\n\n/**\n * Metadata for a parsed confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link ParsedTransactionMeta} instead.\n */\n\n/**\n * Collection of addresses loaded by a transaction using address table lookups\n */\n\n/**\n * Metadata for a parsed transaction on the ledger\n */\n\n/**\n * Metadata for a confirmed transaction on the ledger\n */\n\n/**\n * A processed transaction from the RPC API\n */\n\n/**\n * A processed transaction from the RPC API\n */\n\n/**\n * A processed transaction message from the RPC API\n */\n\n/**\n * A confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\n\n/**\n * A partially decoded transaction instruction\n */\n\n/**\n * A parsed transaction message account\n */\n\n/**\n * A parsed transaction instruction\n */\n\n/**\n * A parsed address table lookup\n */\n\n/**\n * A parsed transaction message\n */\n\n/**\n * A parsed transaction\n */\n\n/**\n * A parsed and confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link ParsedTransactionWithMeta} instead.\n */\n\n/**\n * A parsed transaction on the ledger with meta\n */\n\n/**\n * A processed block fetched from the RPC API\n */\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `accounts`\n */\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `none`\n */\n\n/**\n * A block with parsed transactions\n */\n\n/**\n * A block with parsed transactions where the `transactionDetails` mode is `accounts`\n */\n\n/**\n * A block with parsed transactions where the `transactionDetails` mode is `none`\n */\n\n/**\n * A processed block fetched from the RPC API\n */\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `accounts`\n */\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `none`\n */\n\n/**\n * A confirmed block on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\n\n/**\n * A Block on the ledger with signatures only\n */\n\n/**\n * recent block production information\n */\n\n/**\n * Expected JSON RPC response for the \"getBlockProduction\" message\n */\nvar BlockProductionResponseStruct = jsonRpcResultAndContext(type({\n  byIdentity: record(string(), array(number())),\n  range: type({\n    firstSlot: number(),\n    lastSlot: number()\n  })\n}));\n\n/**\n * A performance sample\n */\n\nfunction createRpcClient(url, httpHeaders, customFetch, fetchMiddleware, disableRetryOnRateLimit, httpAgent) {\n  var fetch = customFetch ? customFetch : fetchImpl;\n  var agent;\n  {\n    if (httpAgent != null) {\n      console.warn('You have supplied an `httpAgent` when creating a `Connection` in a browser environment.' + 'It has been ignored; `httpAgent` is only used in Node environments.');\n    }\n  }\n  var fetchWithMiddleware;\n  if (fetchMiddleware) {\n    fetchWithMiddleware = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(info, init) {\n        var modifiedFetchArgs;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return new Promise(function (resolve, reject) {\n                try {\n                  fetchMiddleware(info, init, function (modifiedInfo, modifiedInit) {\n                    return resolve([modifiedInfo, modifiedInit]);\n                  });\n                } catch (error) {\n                  reject(error);\n                }\n              });\n            case 2:\n              modifiedFetchArgs = _context.sent;\n              _context.next = 5;\n              return fetch.apply(void 0, _toConsumableArray(modifiedFetchArgs));\n            case 5:\n              return _context.abrupt(\"return\", _context.sent);\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      }));\n      return function fetchWithMiddleware(_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n  }\n  var clientBrowser = new RpcClient( /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(request, callback) {\n      var options, too_many_requests_retries, res, waitTime, text;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) switch (_context2.prev = _context2.next) {\n          case 0:\n            options = {\n              method: 'POST',\n              body: request,\n              agent: agent,\n              headers: Object.assign({\n                'Content-Type': 'application/json'\n              }, httpHeaders || {}, COMMON_HTTP_HEADERS)\n            };\n            _context2.prev = 1;\n            too_many_requests_retries = 5;\n            waitTime = 500;\n          case 4:\n            if (!fetchWithMiddleware) {\n              _context2.next = 10;\n              break;\n            }\n            _context2.next = 7;\n            return fetchWithMiddleware(url, options);\n          case 7:\n            res = _context2.sent;\n            _context2.next = 13;\n            break;\n          case 10:\n            _context2.next = 12;\n            return fetch(url, options);\n          case 12:\n            res = _context2.sent;\n          case 13:\n            if (!(res.status !== 429 /* Too many requests */)) {\n              _context2.next = 15;\n              break;\n            }\n            return _context2.abrupt(\"break\", 26);\n          case 15:\n            if (!(disableRetryOnRateLimit === true)) {\n              _context2.next = 17;\n              break;\n            }\n            return _context2.abrupt(\"break\", 26);\n          case 17:\n            too_many_requests_retries -= 1;\n            if (!(too_many_requests_retries === 0)) {\n              _context2.next = 20;\n              break;\n            }\n            return _context2.abrupt(\"break\", 26);\n          case 20:\n            console.log(\"Server responded with \".concat(res.status, \" \").concat(res.statusText, \".  Retrying after \").concat(waitTime, \"ms delay...\"));\n            _context2.next = 23;\n            return sleep(waitTime);\n          case 23:\n            waitTime *= 2;\n          case 24:\n            _context2.next = 4;\n            break;\n          case 26:\n            _context2.next = 28;\n            return res.text();\n          case 28:\n            text = _context2.sent;\n            if (res.ok) {\n              callback(null, text);\n            } else {\n              callback(new Error(\"\".concat(res.status, \" \").concat(res.statusText, \": \").concat(text)));\n            }\n            _context2.next = 35;\n            break;\n          case 32:\n            _context2.prev = 32;\n            _context2.t0 = _context2[\"catch\"](1);\n            if (_context2.t0 instanceof Error) callback(_context2.t0);\n          case 35:\n          case \"end\":\n            return _context2.stop();\n        }\n      }, _callee2, null, [[1, 32]]);\n    }));\n    return function (_x3, _x4) {\n      return _ref2.apply(this, arguments);\n    };\n  }(), {});\n  return clientBrowser;\n}\nfunction createRpcRequest(client) {\n  return function (method, args) {\n    return new Promise(function (resolve, reject) {\n      client.request(method, args, function (err, response) {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\nfunction createRpcBatchRequest(client) {\n  return function (requests) {\n    return new Promise(function (resolve, reject) {\n      // Do nothing if requests is empty\n      if (requests.length === 0) resolve([]);\n      var batch = requests.map(function (params) {\n        return client.request(params.methodName, params.args);\n      });\n      client.request(batch, function (err, response) {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\n/**\n * Expected JSON RPC response for the \"getInflationGovernor\" message\n */\nvar GetInflationGovernorRpcResult = jsonRpcResult(GetInflationGovernorResult);\n\n/**\n * Expected JSON RPC response for the \"getInflationRate\" message\n */\nvar GetInflationRateRpcResult = jsonRpcResult(GetInflationRateResult);\n\n/**\n * Expected JSON RPC response for the \"getRecentPrioritizationFees\" message\n */\nvar GetRecentPrioritizationFeesRpcResult = jsonRpcResult(GetRecentPrioritizationFeesResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochInfo\" message\n */\nvar GetEpochInfoRpcResult = jsonRpcResult(GetEpochInfoResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochSchedule\" message\n */\nvar GetEpochScheduleRpcResult = jsonRpcResult(GetEpochScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"getLeaderSchedule\" message\n */\nvar GetLeaderScheduleRpcResult = jsonRpcResult(GetLeaderScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"minimumLedgerSlot\" and \"getFirstAvailableBlock\" messages\n */\nvar SlotRpcResult = jsonRpcResult(number());\n\n/**\n * Supply\n */\n\n/**\n * Expected JSON RPC response for the \"getSupply\" message\n */\nvar GetSupplyRpcResult = jsonRpcResultAndContext(type({\n  total: number(),\n  circulating: number(),\n  nonCirculating: number(),\n  nonCirculatingAccounts: array(PublicKeyFromString)\n}));\n\n/**\n * Token amount object which returns a token amount in different formats\n * for various client use cases.\n */\n\n/**\n * Expected JSON RPC structure for token amounts\n */\nvar TokenAmountResult = type({\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string())\n});\n\n/**\n * Token address and balance.\n */\n\n/**\n * Expected JSON RPC response for the \"getTokenLargestAccounts\" message\n */\nvar GetTokenLargestAccountsResult = jsonRpcResultAndContext(array(type({\n  address: PublicKeyFromString,\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string())\n})));\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message\n */\nvar GetTokenAccountsByOwner = jsonRpcResultAndContext(array(type({\n  pubkey: PublicKeyFromString,\n  account: type({\n    executable: boolean(),\n    owner: PublicKeyFromString,\n    lamports: number(),\n    data: BufferFromRawAccountData,\n    rentEpoch: number()\n  })\n})));\nvar ParsedAccountDataResult = type({\n  program: string(),\n  parsed: unknown(),\n  space: number()\n});\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message with parsed data\n */\nvar GetParsedTokenAccountsByOwner = jsonRpcResultAndContext(array(type({\n  pubkey: PublicKeyFromString,\n  account: type({\n    executable: boolean(),\n    owner: PublicKeyFromString,\n    lamports: number(),\n    data: ParsedAccountDataResult,\n    rentEpoch: number()\n  })\n})));\n\n/**\n * Pair of an account address and its balance\n */\n\n/**\n * Expected JSON RPC response for the \"getLargestAccounts\" message\n */\nvar GetLargestAccountsRpcResult = jsonRpcResultAndContext(array(type({\n  lamports: number(),\n  address: PublicKeyFromString\n})));\n\n/**\n * @internal\n */\nvar AccountInfoResult = type({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: BufferFromRawAccountData,\n  rentEpoch: number()\n});\n\n/**\n * @internal\n */\nvar KeyedAccountInfoResult = type({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult\n});\nvar ParsedOrRawAccountData = coerce(union([instance(Buffer), ParsedAccountDataResult]), union([RawAccountDataResult, ParsedAccountDataResult]), function (value) {\n  if (Array.isArray(value)) {\n    return create(value, BufferFromRawAccountData);\n  } else {\n    return value;\n  }\n});\n\n/**\n * @internal\n */\nvar ParsedAccountInfoResult = type({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: ParsedOrRawAccountData,\n  rentEpoch: number()\n});\nvar KeyedParsedAccountInfoResult = type({\n  pubkey: PublicKeyFromString,\n  account: ParsedAccountInfoResult\n});\n\n/**\n * @internal\n */\nvar StakeActivationResult = type({\n  state: union([literal('active'), literal('inactive'), literal('activating'), literal('deactivating')]),\n  active: number(),\n  inactive: number()\n});\n\n/**\n * Expected JSON RPC response for the \"getConfirmedSignaturesForAddress2\" message\n */\n\nvar GetConfirmedSignaturesForAddress2RpcResult = jsonRpcResult(array(type({\n  signature: string(),\n  slot: number(),\n  err: TransactionErrorResult,\n  memo: nullable(string()),\n  blockTime: optional(nullable(number()))\n})));\n\n/**\n * Expected JSON RPC response for the \"getSignaturesForAddress\" message\n */\nvar GetSignaturesForAddressRpcResult = jsonRpcResult(array(type({\n  signature: string(),\n  slot: number(),\n  err: TransactionErrorResult,\n  memo: nullable(string()),\n  blockTime: optional(nullable(number()))\n})));\n\n/***\n * Expected JSON RPC response for the \"accountNotification\" message\n */\nvar AccountNotificationResult = type({\n  subscription: number(),\n  result: notificationResultAndContext(AccountInfoResult)\n});\n\n/**\n * @internal\n */\nvar ProgramAccountInfoResult = type({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult\n});\n\n/***\n * Expected JSON RPC response for the \"programNotification\" message\n */\nvar ProgramAccountNotificationResult = type({\n  subscription: number(),\n  result: notificationResultAndContext(ProgramAccountInfoResult)\n});\n\n/**\n * @internal\n */\nvar SlotInfoResult = type({\n  parent: number(),\n  slot: number(),\n  root: number()\n});\n\n/**\n * Expected JSON RPC response for the \"slotNotification\" message\n */\nvar SlotNotificationResult = type({\n  subscription: number(),\n  result: SlotInfoResult\n});\n\n/**\n * Slot updates which can be used for tracking the live progress of a cluster.\n * - `\"firstShredReceived\"`: connected node received the first shred of a block.\n * Indicates that a new block that is being produced.\n * - `\"completed\"`: connected node has received all shreds of a block. Indicates\n * a block was recently produced.\n * - `\"optimisticConfirmation\"`: block was optimistically confirmed by the\n * cluster. It is not guaranteed that an optimistic confirmation notification\n * will be sent for every finalized blocks.\n * - `\"root\"`: the connected node rooted this block.\n * - `\"createdBank\"`: the connected node has started validating this block.\n * - `\"frozen\"`: the connected node has validated this block.\n * - `\"dead\"`: the connected node failed to validate this block.\n */\n\n/**\n * @internal\n */\nvar SlotUpdateResult = union([type({\n  type: union([literal('firstShredReceived'), literal('completed'), literal('optimisticConfirmation'), literal('root')]),\n  slot: number(),\n  timestamp: number()\n}), type({\n  type: literal('createdBank'),\n  parent: number(),\n  slot: number(),\n  timestamp: number()\n}), type({\n  type: literal('frozen'),\n  slot: number(),\n  timestamp: number(),\n  stats: type({\n    numTransactionEntries: number(),\n    numSuccessfulTransactions: number(),\n    numFailedTransactions: number(),\n    maxTransactionsPerEntry: number()\n  })\n}), type({\n  type: literal('dead'),\n  slot: number(),\n  timestamp: number(),\n  err: string()\n})]);\n\n/**\n * Expected JSON RPC response for the \"slotsUpdatesNotification\" message\n */\nvar SlotUpdateNotificationResult = type({\n  subscription: number(),\n  result: SlotUpdateResult\n});\n\n/**\n * Expected JSON RPC response for the \"signatureNotification\" message\n */\nvar SignatureNotificationResult = type({\n  subscription: number(),\n  result: notificationResultAndContext(union([SignatureStatusResult, SignatureReceivedResult]))\n});\n\n/**\n * Expected JSON RPC response for the \"rootNotification\" message\n */\nvar RootNotificationResult = type({\n  subscription: number(),\n  result: number()\n});\nvar ContactInfoResult = type({\n  pubkey: string(),\n  gossip: nullable(string()),\n  tpu: nullable(string()),\n  rpc: nullable(string()),\n  version: nullable(string())\n});\nvar VoteAccountInfoResult = type({\n  votePubkey: string(),\n  nodePubkey: string(),\n  activatedStake: number(),\n  epochVoteAccount: boolean(),\n  epochCredits: array(tuple([number(), number(), number()])),\n  commission: number(),\n  lastVote: number(),\n  rootSlot: nullable(number())\n});\n\n/**\n * Expected JSON RPC response for the \"getVoteAccounts\" message\n */\nvar GetVoteAccounts = jsonRpcResult(type({\n  current: array(VoteAccountInfoResult),\n  delinquent: array(VoteAccountInfoResult)\n}));\nvar ConfirmationStatus = union([literal('processed'), literal('confirmed'), literal('finalized')]);\nvar SignatureStatusResponse = type({\n  slot: number(),\n  confirmations: nullable(number()),\n  err: TransactionErrorResult,\n  confirmationStatus: optional(ConfirmationStatus)\n});\n\n/**\n * Expected JSON RPC response for the \"getSignatureStatuses\" message\n */\nvar GetSignatureStatusesRpcResult = jsonRpcResultAndContext(array(nullable(SignatureStatusResponse)));\n\n/**\n * Expected JSON RPC response for the \"getMinimumBalanceForRentExemption\" message\n */\nvar GetMinimumBalanceForRentExemptionRpcResult = jsonRpcResult(number());\nvar AddressTableLookupStruct = type({\n  accountKey: PublicKeyFromString,\n  writableIndexes: array(number()),\n  readonlyIndexes: array(number())\n});\nvar ConfirmedTransactionResult = type({\n  signatures: array(string()),\n  message: type({\n    accountKeys: array(string()),\n    header: type({\n      numRequiredSignatures: number(),\n      numReadonlySignedAccounts: number(),\n      numReadonlyUnsignedAccounts: number()\n    }),\n    instructions: array(type({\n      accounts: array(number()),\n      data: string(),\n      programIdIndex: number()\n    })),\n    recentBlockhash: string(),\n    addressTableLookups: optional(array(AddressTableLookupStruct))\n  })\n});\nvar AnnotatedAccountKey = type({\n  pubkey: PublicKeyFromString,\n  signer: boolean(),\n  writable: boolean(),\n  source: optional(union([literal('transaction'), literal('lookupTable')]))\n});\nvar ConfirmedTransactionAccountsModeResult = type({\n  accountKeys: array(AnnotatedAccountKey),\n  signatures: array(string())\n});\nvar ParsedInstructionResult = type({\n  parsed: unknown(),\n  program: string(),\n  programId: PublicKeyFromString\n});\nvar RawInstructionResult = type({\n  accounts: array(PublicKeyFromString),\n  data: string(),\n  programId: PublicKeyFromString\n});\nvar InstructionResult = union([RawInstructionResult, ParsedInstructionResult]);\nvar UnknownInstructionResult = union([type({\n  parsed: unknown(),\n  program: string(),\n  programId: string()\n}), type({\n  accounts: array(string()),\n  data: string(),\n  programId: string()\n})]);\nvar ParsedOrRawInstruction = coerce(InstructionResult, UnknownInstructionResult, function (value) {\n  if ('accounts' in value) {\n    return create(value, RawInstructionResult);\n  } else {\n    return create(value, ParsedInstructionResult);\n  }\n});\n\n/**\n * @internal\n */\nvar ParsedConfirmedTransactionResult = type({\n  signatures: array(string()),\n  message: type({\n    accountKeys: array(AnnotatedAccountKey),\n    instructions: array(ParsedOrRawInstruction),\n    recentBlockhash: string(),\n    addressTableLookups: optional(nullable(array(AddressTableLookupStruct)))\n  })\n});\nvar TokenBalanceResult = type({\n  accountIndex: number(),\n  mint: string(),\n  owner: optional(string()),\n  uiTokenAmount: TokenAmountResult\n});\nvar LoadedAddressesResult = type({\n  writable: array(PublicKeyFromString),\n  readonly: array(PublicKeyFromString)\n});\n\n/**\n * @internal\n */\nvar ConfirmedTransactionMetaResult = type({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(nullable(array(type({\n    index: number(),\n    instructions: array(type({\n      accounts: array(number()),\n      data: string(),\n      programIdIndex: number()\n    }))\n  })))),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n  computeUnitsConsumed: optional(number())\n});\n\n/**\n * @internal\n */\nvar ParsedConfirmedTransactionMetaResult = type({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(nullable(array(type({\n    index: number(),\n    instructions: array(ParsedOrRawInstruction)\n  })))),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n  computeUnitsConsumed: optional(number())\n});\nvar TransactionVersionStruct = union([literal(0), literal('legacy')]);\n\n/** @internal */\nvar RewardsResult = type({\n  pubkey: string(),\n  lamports: number(),\n  postBalance: nullable(number()),\n  rewardType: nullable(string()),\n  commission: optional(nullable(number()))\n});\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nvar GetBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  transactions: array(type({\n    transaction: ConfirmedTransactionResult,\n    meta: nullable(ConfirmedTransactionMetaResult),\n    version: optional(TransactionVersionStruct)\n  })),\n  rewards: optional(array(RewardsResult)),\n  blockTime: nullable(number()),\n  blockHeight: nullable(number())\n})));\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message when `transactionDetails` is `none`\n */\nvar GetNoneModeBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  rewards: optional(array(RewardsResult)),\n  blockTime: nullable(number()),\n  blockHeight: nullable(number())\n})));\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message when `transactionDetails` is `accounts`\n */\nvar GetAccountsModeBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  transactions: array(type({\n    transaction: ConfirmedTransactionAccountsModeResult,\n    meta: nullable(ConfirmedTransactionMetaResult),\n    version: optional(TransactionVersionStruct)\n  })),\n  rewards: optional(array(RewardsResult)),\n  blockTime: nullable(number()),\n  blockHeight: nullable(number())\n})));\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message\n */\nvar GetParsedBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  transactions: array(type({\n    transaction: ParsedConfirmedTransactionResult,\n    meta: nullable(ParsedConfirmedTransactionMetaResult),\n    version: optional(TransactionVersionStruct)\n  })),\n  rewards: optional(array(RewardsResult)),\n  blockTime: nullable(number()),\n  blockHeight: nullable(number())\n})));\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message  when `transactionDetails` is `accounts`\n */\nvar GetParsedAccountsModeBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  transactions: array(type({\n    transaction: ConfirmedTransactionAccountsModeResult,\n    meta: nullable(ParsedConfirmedTransactionMetaResult),\n    version: optional(TransactionVersionStruct)\n  })),\n  rewards: optional(array(RewardsResult)),\n  blockTime: nullable(number()),\n  blockHeight: nullable(number())\n})));\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message  when `transactionDetails` is `none`\n */\nvar GetParsedNoneModeBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  rewards: optional(array(RewardsResult)),\n  blockTime: nullable(number()),\n  blockHeight: nullable(number())\n})));\n\n/**\n * Expected JSON RPC response for the \"getConfirmedBlock\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetBlockRpcResult} instead.\n */\nvar GetConfirmedBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  transactions: array(type({\n    transaction: ConfirmedTransactionResult,\n    meta: nullable(ConfirmedTransactionMetaResult)\n  })),\n  rewards: optional(array(RewardsResult)),\n  blockTime: nullable(number())\n})));\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nvar GetBlockSignaturesRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  signatures: array(string()),\n  blockTime: nullable(number())\n})));\n\n/**\n * Expected JSON RPC response for the \"getTransaction\" message\n */\nvar GetTransactionRpcResult = jsonRpcResult(nullable(type({\n  slot: number(),\n  meta: ConfirmedTransactionMetaResult,\n  blockTime: optional(nullable(number())),\n  transaction: ConfirmedTransactionResult,\n  version: optional(TransactionVersionStruct)\n})));\n\n/**\n * Expected parsed JSON RPC response for the \"getTransaction\" message\n */\nvar GetParsedTransactionRpcResult = jsonRpcResult(nullable(type({\n  slot: number(),\n  transaction: ParsedConfirmedTransactionResult,\n  meta: nullable(ParsedConfirmedTransactionMetaResult),\n  blockTime: optional(nullable(number())),\n  version: optional(TransactionVersionStruct)\n})));\n\n/**\n * Expected JSON RPC response for the \"getRecentBlockhash\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetLatestBlockhashRpcResult} instead.\n */\nvar GetRecentBlockhashAndContextRpcResult = jsonRpcResultAndContext(type({\n  blockhash: string(),\n  feeCalculator: type({\n    lamportsPerSignature: number()\n  })\n}));\n\n/**\n * Expected JSON RPC response for the \"getLatestBlockhash\" message\n */\nvar GetLatestBlockhashRpcResult = jsonRpcResultAndContext(type({\n  blockhash: string(),\n  lastValidBlockHeight: number()\n}));\n\n/**\n * Expected JSON RPC response for the \"isBlockhashValid\" message\n */\nvar IsBlockhashValidRpcResult = jsonRpcResultAndContext(boolean());\nvar PerfSampleResult = type({\n  slot: number(),\n  numTransactions: number(),\n  numSlots: number(),\n  samplePeriodSecs: number()\n});\n\n/*\n * Expected JSON RPC response for \"getRecentPerformanceSamples\" message\n */\nvar GetRecentPerformanceSamplesRpcResult = jsonRpcResult(array(PerfSampleResult));\n\n/**\n * Expected JSON RPC response for the \"getFeeCalculatorForBlockhash\" message\n */\nvar GetFeeCalculatorRpcResult = jsonRpcResultAndContext(nullable(type({\n  feeCalculator: type({\n    lamportsPerSignature: number()\n  })\n})));\n\n/**\n * Expected JSON RPC response for the \"requestAirdrop\" message\n */\nvar RequestAirdropRpcResult = jsonRpcResult(string());\n\n/**\n * Expected JSON RPC response for the \"sendTransaction\" message\n */\nvar SendTransactionRpcResult = jsonRpcResult(string());\n\n/**\n * Information about the latest slot being processed by a node\n */\n\n/**\n * Parsed account data\n */\n\n/**\n * Stake Activation data\n */\n\n/**\n * Data slice argument for getProgramAccounts\n */\n\n/**\n * Memory comparison filter for getProgramAccounts\n */\n\n/**\n * Data size comparison filter for getProgramAccounts\n */\n\n/**\n * A filter object for getProgramAccounts\n */\n\n/**\n * Configuration object for getProgramAccounts requests\n */\n\n/**\n * Configuration object for getParsedProgramAccounts\n */\n\n/**\n * Configuration object for getMultipleAccounts\n */\n\n/**\n * Configuration object for `getStakeActivation`\n */\n\n/**\n * Configuration object for `getStakeActivation`\n */\n\n/**\n * Configuration object for `getStakeActivation`\n */\n\n/**\n * Configuration object for `getNonce`\n */\n\n/**\n * Configuration object for `getNonceAndContext`\n */\n\n/**\n * Information describing an account\n */\n\n/**\n * Account information identified by pubkey\n */\n\n/**\n * Callback function for account change notifications\n */\n\n/**\n * Callback function for program account change notifications\n */\n\n/**\n * Callback function for slot change notifications\n */\n\n/**\n * Callback function for slot update notifications\n */\n\n/**\n * Callback function for signature status notifications\n */\n\n/**\n * Signature status notification with transaction result\n */\n\n/**\n * Signature received notification\n */\n\n/**\n * Callback function for signature notifications\n */\n\n/**\n * Signature subscription options\n */\n\n/**\n * Callback function for root change notifications\n */\n\n/**\n * @internal\n */\nvar LogsResult = type({\n  err: TransactionErrorResult,\n  logs: array(string()),\n  signature: string()\n});\n\n/**\n * Logs result.\n */\n\n/**\n * Expected JSON RPC response for the \"logsNotification\" message.\n */\nvar LogsNotificationResult = type({\n  result: notificationResultAndContext(LogsResult),\n  subscription: number()\n});\n\n/**\n * Filter for log subscriptions.\n */\n\n/**\n * Callback function for log notifications.\n */\n\n/**\n * Signature result\n */\n\n/**\n * Transaction error\n */\n\n/**\n * Transaction confirmation status\n * <pre>\n *   'processed': Transaction landed in a block which has reached 1 confirmation by the connected node\n *   'confirmed': Transaction landed in a block which has reached 1 confirmation by the cluster\n *   'finalized': Transaction landed in a block which has been finalized by the cluster\n * </pre>\n */\n\n/**\n * Signature status\n */\n\n/**\n * A confirmed signature with its status\n */\n\n/**\n * An object defining headers to be passed to the RPC server\n */\n\n/**\n * The type of the JavaScript `fetch()` API\n */\n\n/**\n * A callback used to augment the outgoing HTTP request\n */\n\n/**\n * Configuration for instantiating a Connection\n */\n\n/** @internal */\nvar COMMON_HTTP_HEADERS = {\n  'solana-client': \"js/\".concat((_process$env$npm_pack = \"0.0.0-development\") !== null && _process$env$npm_pack !== void 0 ? _process$env$npm_pack : 'UNKNOWN')\n};\n\n/**\n * A connection to a fullnode JSON RPC endpoint\n */\nvar Connection = /*#__PURE__*/function () {\n  /**\n   * Establish a JSON RPC connection\n   *\n   * @param endpoint URL to the fullnode JSON RPC endpoint\n   * @param commitmentOrConfig optional default commitment level or optional ConnectionConfig configuration object\n   */\n  function Connection(endpoint, _commitmentOrConfig) {\n    var _this = this;\n    _classCallCheck(this, Connection);\n    /** @internal */\n    this._commitment = void 0;\n    /** @internal */\n    this._confirmTransactionInitialTimeout = void 0;\n    /** @internal */\n    this._rpcEndpoint = void 0;\n    /** @internal */\n    this._rpcWsEndpoint = void 0;\n    /** @internal */\n    this._rpcClient = void 0;\n    /** @internal */\n    this._rpcRequest = void 0;\n    /** @internal */\n    this._rpcBatchRequest = void 0;\n    /** @internal */\n    this._rpcWebSocket = void 0;\n    /** @internal */\n    this._rpcWebSocketConnected = false;\n    /** @internal */\n    this._rpcWebSocketHeartbeat = null;\n    /** @internal */\n    this._rpcWebSocketIdleTimeout = null;\n    /** @internal\n     * A number that we increment every time an active connection closes.\n     * Used to determine whether the same socket connection that was open\n     * when an async operation started is the same one that's active when\n     * its continuation fires.\n     *\n     */\n    this._rpcWebSocketGeneration = 0;\n    /** @internal */\n    this._disableBlockhashCaching = false;\n    /** @internal */\n    this._pollingBlockhash = false;\n    /** @internal */\n    this._blockhashInfo = {\n      latestBlockhash: null,\n      lastFetch: 0,\n      transactionSignatures: [],\n      simulatedSignatures: []\n    };\n    /** @internal */\n    this._nextClientSubscriptionId = 0;\n    /** @internal */\n    this._subscriptionDisposeFunctionsByClientSubscriptionId = {};\n    /** @internal */\n    this._subscriptionHashByClientSubscriptionId = {};\n    /** @internal */\n    this._subscriptionStateChangeCallbacksByHash = {};\n    /** @internal */\n    this._subscriptionCallbacksByServerSubscriptionId = {};\n    /** @internal */\n    this._subscriptionsByHash = {};\n    /**\n     * Special case.\n     * After a signature is processed, RPCs automatically dispose of the\n     * subscription on the server side. We need to track which of these\n     * subscriptions have been disposed in such a way, so that we know\n     * whether the client is dealing with a not-yet-processed signature\n     * (in which case we must tear down the server subscription) or an\n     * already-processed signature (in which case the client can simply\n     * clear out the subscription locally without telling the server).\n     *\n     * NOTE: There is a proposal to eliminate this special case, here:\n     * https://github.com/solana-labs/solana/issues/18892\n     */\n    /** @internal */\n    this._subscriptionsAutoDisposedByRpc = new Set();\n    /*\n     * Returns the current block height of the node\n     */\n    this.getBlockHeight = function () {\n      var requestPromises = {};\n      return /*#__PURE__*/function () {\n        var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(commitmentOrConfig) {\n          var _requestPromises$requ;\n          var _extractCommitmentFro, commitment, config, args, requestHash;\n          return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n            while (1) switch (_context4.prev = _context4.next) {\n              case 0:\n                _extractCommitmentFro = extractCommitmentFromConfig(commitmentOrConfig), commitment = _extractCommitmentFro.commitment, config = _extractCommitmentFro.config;\n                args = _this._buildArgs([], commitment, undefined /* encoding */, config);\n                requestHash = fastStableStringify$1(args);\n                requestPromises[requestHash] = (_requestPromises$requ = requestPromises[requestHash]) !== null && _requestPromises$requ !== void 0 ? _requestPromises$requ : _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n                  var unsafeRes, res;\n                  return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n                    while (1) switch (_context3.prev = _context3.next) {\n                      case 0:\n                        _context3.prev = 0;\n                        _context3.next = 3;\n                        return _this._rpcRequest('getBlockHeight', args);\n                      case 3:\n                        unsafeRes = _context3.sent;\n                        res = create(unsafeRes, jsonRpcResult(number()));\n                        if (!('error' in res)) {\n                          _context3.next = 7;\n                          break;\n                        }\n                        throw new SolanaJSONRPCError(res.error, 'failed to get block height information');\n                      case 7:\n                        return _context3.abrupt(\"return\", res.result);\n                      case 8:\n                        _context3.prev = 8;\n                        delete requestPromises[requestHash];\n                        return _context3.finish(8);\n                      case 11:\n                      case \"end\":\n                        return _context3.stop();\n                    }\n                  }, _callee3, null, [[0,, 8, 11]]);\n                }))();\n                _context4.next = 6;\n                return requestPromises[requestHash];\n              case 6:\n                return _context4.abrupt(\"return\", _context4.sent);\n              case 7:\n              case \"end\":\n                return _context4.stop();\n            }\n          }, _callee4);\n        }));\n        return function (_x5) {\n          return _ref3.apply(this, arguments);\n        };\n      }();\n    }();\n    var wsEndpoint;\n    var httpHeaders;\n    var fetch;\n    var fetchMiddleware;\n    var disableRetryOnRateLimit;\n    var httpAgent;\n    if (_commitmentOrConfig && typeof _commitmentOrConfig === 'string') {\n      this._commitment = _commitmentOrConfig;\n    } else if (_commitmentOrConfig) {\n      this._commitment = _commitmentOrConfig.commitment;\n      this._confirmTransactionInitialTimeout = _commitmentOrConfig.confirmTransactionInitialTimeout;\n      wsEndpoint = _commitmentOrConfig.wsEndpoint;\n      httpHeaders = _commitmentOrConfig.httpHeaders;\n      fetch = _commitmentOrConfig.fetch;\n      fetchMiddleware = _commitmentOrConfig.fetchMiddleware;\n      disableRetryOnRateLimit = _commitmentOrConfig.disableRetryOnRateLimit;\n      httpAgent = _commitmentOrConfig.httpAgent;\n    }\n    this._rpcEndpoint = assertEndpointUrl(endpoint);\n    this._rpcWsEndpoint = wsEndpoint || makeWebsocketUrl(endpoint);\n    this._rpcClient = createRpcClient(endpoint, httpHeaders, fetch, fetchMiddleware, disableRetryOnRateLimit, httpAgent);\n    this._rpcRequest = createRpcRequest(this._rpcClient);\n    this._rpcBatchRequest = createRpcBatchRequest(this._rpcClient);\n    this._rpcWebSocket = new RpcWebSocketClient(this._rpcWsEndpoint, {\n      autoconnect: false,\n      max_reconnects: Infinity\n    });\n    this._rpcWebSocket.on('open', this._wsOnOpen.bind(this));\n    this._rpcWebSocket.on('error', this._wsOnError.bind(this));\n    this._rpcWebSocket.on('close', this._wsOnClose.bind(this));\n    this._rpcWebSocket.on('accountNotification', this._wsOnAccountNotification.bind(this));\n    this._rpcWebSocket.on('programNotification', this._wsOnProgramAccountNotification.bind(this));\n    this._rpcWebSocket.on('slotNotification', this._wsOnSlotNotification.bind(this));\n    this._rpcWebSocket.on('slotsUpdatesNotification', this._wsOnSlotUpdatesNotification.bind(this));\n    this._rpcWebSocket.on('signatureNotification', this._wsOnSignatureNotification.bind(this));\n    this._rpcWebSocket.on('rootNotification', this._wsOnRootNotification.bind(this));\n    this._rpcWebSocket.on('logsNotification', this._wsOnLogsNotification.bind(this));\n  }\n\n  /**\n   * The default commitment used for requests\n   */\n  _createClass(Connection, [{\n    key: \"commitment\",\n    get: function get() {\n      return this._commitment;\n    }\n\n    /**\n     * The RPC endpoint\n     */\n  }, {\n    key: \"rpcEndpoint\",\n    get: function get() {\n      return this._rpcEndpoint;\n    }\n\n    /**\n     * Fetch the balance for the specified public key, return with context\n     */\n  }, {\n    key: \"getBalanceAndContext\",\n    value: function () {\n      var _getBalanceAndContext = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(publicKey, commitmentOrConfig) {\n        var _extractCommitmentFro2, commitment, config, args, unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) switch (_context5.prev = _context5.next) {\n            case 0:\n              /** @internal */\n              _extractCommitmentFro2 = extractCommitmentFromConfig(commitmentOrConfig), commitment = _extractCommitmentFro2.commitment, config = _extractCommitmentFro2.config;\n              args = this._buildArgs([publicKey.toBase58()], commitment, undefined /* encoding */, config);\n              _context5.next = 4;\n              return this._rpcRequest('getBalance', args);\n            case 4:\n              unsafeRes = _context5.sent;\n              res = create(unsafeRes, jsonRpcResultAndContext(number()));\n              if (!('error' in res)) {\n                _context5.next = 8;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, \"failed to get balance for \".concat(publicKey.toBase58()));\n            case 8:\n              return _context5.abrupt(\"return\", res.result);\n            case 9:\n            case \"end\":\n              return _context5.stop();\n          }\n        }, _callee5, this);\n      }));\n      function getBalanceAndContext(_x6, _x7) {\n        return _getBalanceAndContext.apply(this, arguments);\n      }\n      return getBalanceAndContext;\n    }()\n    /**\n     * Fetch the balance for the specified public key\n     */\n  }, {\n    key: \"getBalance\",\n    value: function () {\n      var _getBalance = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(publicKey, commitmentOrConfig) {\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) switch (_context6.prev = _context6.next) {\n            case 0:\n              _context6.next = 2;\n              return this.getBalanceAndContext(publicKey, commitmentOrConfig).then(function (x) {\n                return x.value;\n              })[\"catch\"](function (e) {\n                throw new Error('failed to get balance of account ' + publicKey.toBase58() + ': ' + e);\n              });\n            case 2:\n              return _context6.abrupt(\"return\", _context6.sent);\n            case 3:\n            case \"end\":\n              return _context6.stop();\n          }\n        }, _callee6, this);\n      }));\n      function getBalance(_x8, _x9) {\n        return _getBalance.apply(this, arguments);\n      }\n      return getBalance;\n    }()\n    /**\n     * Fetch the estimated production time of a block\n     */\n  }, {\n    key: \"getBlockTime\",\n    value: function () {\n      var _getBlockTime = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(slot) {\n        var unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) switch (_context7.prev = _context7.next) {\n            case 0:\n              _context7.next = 2;\n              return this._rpcRequest('getBlockTime', [slot]);\n            case 2:\n              unsafeRes = _context7.sent;\n              res = create(unsafeRes, jsonRpcResult(nullable(number())));\n              if (!('error' in res)) {\n                _context7.next = 6;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, \"failed to get block time for slot \".concat(slot));\n            case 6:\n              return _context7.abrupt(\"return\", res.result);\n            case 7:\n            case \"end\":\n              return _context7.stop();\n          }\n        }, _callee7, this);\n      }));\n      function getBlockTime(_x10) {\n        return _getBlockTime.apply(this, arguments);\n      }\n      return getBlockTime;\n    }()\n    /**\n     * Fetch the lowest slot that the node has information about in its ledger.\n     * This value may increase over time if the node is configured to purge older ledger data\n     */\n  }, {\n    key: \"getMinimumLedgerSlot\",\n    value: function () {\n      var _getMinimumLedgerSlot = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8() {\n        var unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) switch (_context8.prev = _context8.next) {\n            case 0:\n              _context8.next = 2;\n              return this._rpcRequest('minimumLedgerSlot', []);\n            case 2:\n              unsafeRes = _context8.sent;\n              res = create(unsafeRes, jsonRpcResult(number()));\n              if (!('error' in res)) {\n                _context8.next = 6;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, 'failed to get minimum ledger slot');\n            case 6:\n              return _context8.abrupt(\"return\", res.result);\n            case 7:\n            case \"end\":\n              return _context8.stop();\n          }\n        }, _callee8, this);\n      }));\n      function getMinimumLedgerSlot() {\n        return _getMinimumLedgerSlot.apply(this, arguments);\n      }\n      return getMinimumLedgerSlot;\n    }()\n    /**\n     * Fetch the slot of the lowest confirmed block that has not been purged from the ledger\n     */\n  }, {\n    key: \"getFirstAvailableBlock\",\n    value: function () {\n      var _getFirstAvailableBlock = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9() {\n        var unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) switch (_context9.prev = _context9.next) {\n            case 0:\n              _context9.next = 2;\n              return this._rpcRequest('getFirstAvailableBlock', []);\n            case 2:\n              unsafeRes = _context9.sent;\n              res = create(unsafeRes, SlotRpcResult);\n              if (!('error' in res)) {\n                _context9.next = 6;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, 'failed to get first available block');\n            case 6:\n              return _context9.abrupt(\"return\", res.result);\n            case 7:\n            case \"end\":\n              return _context9.stop();\n          }\n        }, _callee9, this);\n      }));\n      function getFirstAvailableBlock() {\n        return _getFirstAvailableBlock.apply(this, arguments);\n      }\n      return getFirstAvailableBlock;\n    }()\n    /**\n     * Fetch information about the current supply\n     */\n  }, {\n    key: \"getSupply\",\n    value: function () {\n      var _getSupply = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10(config) {\n        var configArg, unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n          while (1) switch (_context10.prev = _context10.next) {\n            case 0:\n              configArg = {};\n              if (typeof config === 'string') {\n                configArg = {\n                  commitment: config\n                };\n              } else if (config) {\n                configArg = _objectSpread(_objectSpread({}, config), {}, {\n                  commitment: config && config.commitment || this.commitment\n                });\n              } else {\n                configArg = {\n                  commitment: this.commitment\n                };\n              }\n              _context10.next = 4;\n              return this._rpcRequest('getSupply', [configArg]);\n            case 4:\n              unsafeRes = _context10.sent;\n              res = create(unsafeRes, GetSupplyRpcResult);\n              if (!('error' in res)) {\n                _context10.next = 8;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, 'failed to get supply');\n            case 8:\n              return _context10.abrupt(\"return\", res.result);\n            case 9:\n            case \"end\":\n              return _context10.stop();\n          }\n        }, _callee10, this);\n      }));\n      function getSupply(_x11) {\n        return _getSupply.apply(this, arguments);\n      }\n      return getSupply;\n    }()\n    /**\n     * Fetch the current supply of a token mint\n     */\n  }, {\n    key: \"getTokenSupply\",\n    value: function () {\n      var _getTokenSupply = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11(tokenMintAddress, commitment) {\n        var args, unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n          while (1) switch (_context11.prev = _context11.next) {\n            case 0:\n              args = this._buildArgs([tokenMintAddress.toBase58()], commitment);\n              _context11.next = 3;\n              return this._rpcRequest('getTokenSupply', args);\n            case 3:\n              unsafeRes = _context11.sent;\n              res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n              if (!('error' in res)) {\n                _context11.next = 7;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, 'failed to get token supply');\n            case 7:\n              return _context11.abrupt(\"return\", res.result);\n            case 8:\n            case \"end\":\n              return _context11.stop();\n          }\n        }, _callee11, this);\n      }));\n      function getTokenSupply(_x12, _x13) {\n        return _getTokenSupply.apply(this, arguments);\n      }\n      return getTokenSupply;\n    }()\n    /**\n     * Fetch the current balance of a token account\n     */\n  }, {\n    key: \"getTokenAccountBalance\",\n    value: function () {\n      var _getTokenAccountBalance = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee12(tokenAddress, commitment) {\n        var args, unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee12$(_context12) {\n          while (1) switch (_context12.prev = _context12.next) {\n            case 0:\n              args = this._buildArgs([tokenAddress.toBase58()], commitment);\n              _context12.next = 3;\n              return this._rpcRequest('getTokenAccountBalance', args);\n            case 3:\n              unsafeRes = _context12.sent;\n              res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n              if (!('error' in res)) {\n                _context12.next = 7;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, 'failed to get token account balance');\n            case 7:\n              return _context12.abrupt(\"return\", res.result);\n            case 8:\n            case \"end\":\n              return _context12.stop();\n          }\n        }, _callee12, this);\n      }));\n      function getTokenAccountBalance(_x14, _x15) {\n        return _getTokenAccountBalance.apply(this, arguments);\n      }\n      return getTokenAccountBalance;\n    }()\n    /**\n     * Fetch all the token accounts owned by the specified account\n     *\n     * @return {Promise<RpcResponseAndContext<GetProgramAccountsResponse>}\n     */\n  }, {\n    key: \"getTokenAccountsByOwner\",\n    value: function () {\n      var _getTokenAccountsByOwner = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee13(ownerAddress, filter, commitmentOrConfig) {\n        var _extractCommitmentFro3, commitment, config, _args, args, unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee13$(_context13) {\n          while (1) switch (_context13.prev = _context13.next) {\n            case 0:\n              _extractCommitmentFro3 = extractCommitmentFromConfig(commitmentOrConfig), commitment = _extractCommitmentFro3.commitment, config = _extractCommitmentFro3.config;\n              _args = [ownerAddress.toBase58()];\n              if ('mint' in filter) {\n                _args.push({\n                  mint: filter.mint.toBase58()\n                });\n              } else {\n                _args.push({\n                  programId: filter.programId.toBase58()\n                });\n              }\n              args = this._buildArgs(_args, commitment, 'base64', config);\n              _context13.next = 6;\n              return this._rpcRequest('getTokenAccountsByOwner', args);\n            case 6:\n              unsafeRes = _context13.sent;\n              res = create(unsafeRes, GetTokenAccountsByOwner);\n              if (!('error' in res)) {\n                _context13.next = 10;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, \"failed to get token accounts owned by account \".concat(ownerAddress.toBase58()));\n            case 10:\n              return _context13.abrupt(\"return\", res.result);\n            case 11:\n            case \"end\":\n              return _context13.stop();\n          }\n        }, _callee13, this);\n      }));\n      function getTokenAccountsByOwner(_x16, _x17, _x18) {\n        return _getTokenAccountsByOwner.apply(this, arguments);\n      }\n      return getTokenAccountsByOwner;\n    }()\n    /**\n     * Fetch parsed token accounts owned by the specified account\n     *\n     * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>>>}\n     */\n  }, {\n    key: \"getParsedTokenAccountsByOwner\",\n    value: function () {\n      var _getParsedTokenAccountsByOwner = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee14(ownerAddress, filter, commitment) {\n        var _args, args, unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee14$(_context14) {\n          while (1) switch (_context14.prev = _context14.next) {\n            case 0:\n              _args = [ownerAddress.toBase58()];\n              if ('mint' in filter) {\n                _args.push({\n                  mint: filter.mint.toBase58()\n                });\n              } else {\n                _args.push({\n                  programId: filter.programId.toBase58()\n                });\n              }\n              args = this._buildArgs(_args, commitment, 'jsonParsed');\n              _context14.next = 5;\n              return this._rpcRequest('getTokenAccountsByOwner', args);\n            case 5:\n              unsafeRes = _context14.sent;\n              res = create(unsafeRes, GetParsedTokenAccountsByOwner);\n              if (!('error' in res)) {\n                _context14.next = 9;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, \"failed to get token accounts owned by account \".concat(ownerAddress.toBase58()));\n            case 9:\n              return _context14.abrupt(\"return\", res.result);\n            case 10:\n            case \"end\":\n              return _context14.stop();\n          }\n        }, _callee14, this);\n      }));\n      function getParsedTokenAccountsByOwner(_x19, _x20, _x21) {\n        return _getParsedTokenAccountsByOwner.apply(this, arguments);\n      }\n      return getParsedTokenAccountsByOwner;\n    }()\n    /**\n     * Fetch the 20 largest accounts with their current balances\n     */\n  }, {\n    key: \"getLargestAccounts\",\n    value: function () {\n      var _getLargestAccounts = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee15(config) {\n        var arg, args, unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee15$(_context15) {\n          while (1) switch (_context15.prev = _context15.next) {\n            case 0:\n              arg = _objectSpread(_objectSpread({}, config), {}, {\n                commitment: config && config.commitment || this.commitment\n              });\n              args = arg.filter || arg.commitment ? [arg] : [];\n              _context15.next = 4;\n              return this._rpcRequest('getLargestAccounts', args);\n            case 4:\n              unsafeRes = _context15.sent;\n              res = create(unsafeRes, GetLargestAccountsRpcResult);\n              if (!('error' in res)) {\n                _context15.next = 8;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, 'failed to get largest accounts');\n            case 8:\n              return _context15.abrupt(\"return\", res.result);\n            case 9:\n            case \"end\":\n              return _context15.stop();\n          }\n        }, _callee15, this);\n      }));\n      function getLargestAccounts(_x22) {\n        return _getLargestAccounts.apply(this, arguments);\n      }\n      return getLargestAccounts;\n    }()\n    /**\n     * Fetch the 20 largest token accounts with their current balances\n     * for a given mint.\n     */\n  }, {\n    key: \"getTokenLargestAccounts\",\n    value: function () {\n      var _getTokenLargestAccounts = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee16(mintAddress, commitment) {\n        var args, unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee16$(_context16) {\n          while (1) switch (_context16.prev = _context16.next) {\n            case 0:\n              args = this._buildArgs([mintAddress.toBase58()], commitment);\n              _context16.next = 3;\n              return this._rpcRequest('getTokenLargestAccounts', args);\n            case 3:\n              unsafeRes = _context16.sent;\n              res = create(unsafeRes, GetTokenLargestAccountsResult);\n              if (!('error' in res)) {\n                _context16.next = 7;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, 'failed to get token largest accounts');\n            case 7:\n              return _context16.abrupt(\"return\", res.result);\n            case 8:\n            case \"end\":\n              return _context16.stop();\n          }\n        }, _callee16, this);\n      }));\n      function getTokenLargestAccounts(_x23, _x24) {\n        return _getTokenLargestAccounts.apply(this, arguments);\n      }\n      return getTokenLargestAccounts;\n    }()\n    /**\n     * Fetch all the account info for the specified public key, return with context\n     */\n  }, {\n    key: \"getAccountInfoAndContext\",\n    value: function () {\n      var _getAccountInfoAndContext = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee17(publicKey, commitmentOrConfig) {\n        var _extractCommitmentFro4, commitment, config, args, unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee17$(_context17) {\n          while (1) switch (_context17.prev = _context17.next) {\n            case 0:\n              _extractCommitmentFro4 = extractCommitmentFromConfig(commitmentOrConfig), commitment = _extractCommitmentFro4.commitment, config = _extractCommitmentFro4.config;\n              args = this._buildArgs([publicKey.toBase58()], commitment, 'base64', config);\n              _context17.next = 4;\n              return this._rpcRequest('getAccountInfo', args);\n            case 4:\n              unsafeRes = _context17.sent;\n              res = create(unsafeRes, jsonRpcResultAndContext(nullable(AccountInfoResult)));\n              if (!('error' in res)) {\n                _context17.next = 8;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, \"failed to get info about account \".concat(publicKey.toBase58()));\n            case 8:\n              return _context17.abrupt(\"return\", res.result);\n            case 9:\n            case \"end\":\n              return _context17.stop();\n          }\n        }, _callee17, this);\n      }));\n      function getAccountInfoAndContext(_x25, _x26) {\n        return _getAccountInfoAndContext.apply(this, arguments);\n      }\n      return getAccountInfoAndContext;\n    }()\n    /**\n     * Fetch parsed account info for the specified public key\n     */\n  }, {\n    key: \"getParsedAccountInfo\",\n    value: function () {\n      var _getParsedAccountInfo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee18(publicKey, commitmentOrConfig) {\n        var _extractCommitmentFro5, commitment, config, args, unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee18$(_context18) {\n          while (1) switch (_context18.prev = _context18.next) {\n            case 0:\n              _extractCommitmentFro5 = extractCommitmentFromConfig(commitmentOrConfig), commitment = _extractCommitmentFro5.commitment, config = _extractCommitmentFro5.config;\n              args = this._buildArgs([publicKey.toBase58()], commitment, 'jsonParsed', config);\n              _context18.next = 4;\n              return this._rpcRequest('getAccountInfo', args);\n            case 4:\n              unsafeRes = _context18.sent;\n              res = create(unsafeRes, jsonRpcResultAndContext(nullable(ParsedAccountInfoResult)));\n              if (!('error' in res)) {\n                _context18.next = 8;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, \"failed to get info about account \".concat(publicKey.toBase58()));\n            case 8:\n              return _context18.abrupt(\"return\", res.result);\n            case 9:\n            case \"end\":\n              return _context18.stop();\n          }\n        }, _callee18, this);\n      }));\n      function getParsedAccountInfo(_x27, _x28) {\n        return _getParsedAccountInfo.apply(this, arguments);\n      }\n      return getParsedAccountInfo;\n    }()\n    /**\n     * Fetch all the account info for the specified public key\n     */\n  }, {\n    key: \"getAccountInfo\",\n    value: function () {\n      var _getAccountInfo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee19(publicKey, commitmentOrConfig) {\n        var res;\n        return _regeneratorRuntime.wrap(function _callee19$(_context19) {\n          while (1) switch (_context19.prev = _context19.next) {\n            case 0:\n              _context19.prev = 0;\n              _context19.next = 3;\n              return this.getAccountInfoAndContext(publicKey, commitmentOrConfig);\n            case 3:\n              res = _context19.sent;\n              return _context19.abrupt(\"return\", res.value);\n            case 7:\n              _context19.prev = 7;\n              _context19.t0 = _context19[\"catch\"](0);\n              throw new Error('failed to get info about account ' + publicKey.toBase58() + ': ' + _context19.t0);\n            case 10:\n            case \"end\":\n              return _context19.stop();\n          }\n        }, _callee19, this, [[0, 7]]);\n      }));\n      function getAccountInfo(_x29, _x30) {\n        return _getAccountInfo.apply(this, arguments);\n      }\n      return getAccountInfo;\n    }()\n    /**\n     * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n     */\n  }, {\n    key: \"getMultipleParsedAccounts\",\n    value: function () {\n      var _getMultipleParsedAccounts = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee20(publicKeys, rawConfig) {\n        var _extractCommitmentFro6, commitment, config, keys, args, unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee20$(_context20) {\n          while (1) switch (_context20.prev = _context20.next) {\n            case 0:\n              _extractCommitmentFro6 = extractCommitmentFromConfig(rawConfig), commitment = _extractCommitmentFro6.commitment, config = _extractCommitmentFro6.config;\n              keys = publicKeys.map(function (key) {\n                return key.toBase58();\n              });\n              args = this._buildArgs([keys], commitment, 'jsonParsed', config);\n              _context20.next = 5;\n              return this._rpcRequest('getMultipleAccounts', args);\n            case 5:\n              unsafeRes = _context20.sent;\n              res = create(unsafeRes, jsonRpcResultAndContext(array(nullable(ParsedAccountInfoResult))));\n              if (!('error' in res)) {\n                _context20.next = 9;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, \"failed to get info for accounts \".concat(keys));\n            case 9:\n              return _context20.abrupt(\"return\", res.result);\n            case 10:\n            case \"end\":\n              return _context20.stop();\n          }\n        }, _callee20, this);\n      }));\n      function getMultipleParsedAccounts(_x31, _x32) {\n        return _getMultipleParsedAccounts.apply(this, arguments);\n      }\n      return getMultipleParsedAccounts;\n    }()\n    /**\n     * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n     */\n  }, {\n    key: \"getMultipleAccountsInfoAndContext\",\n    value: function () {\n      var _getMultipleAccountsInfoAndContext = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee21(publicKeys, commitmentOrConfig) {\n        var _extractCommitmentFro7, commitment, config, keys, args, unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee21$(_context21) {\n          while (1) switch (_context21.prev = _context21.next) {\n            case 0:\n              _extractCommitmentFro7 = extractCommitmentFromConfig(commitmentOrConfig), commitment = _extractCommitmentFro7.commitment, config = _extractCommitmentFro7.config;\n              keys = publicKeys.map(function (key) {\n                return key.toBase58();\n              });\n              args = this._buildArgs([keys], commitment, 'base64', config);\n              _context21.next = 5;\n              return this._rpcRequest('getMultipleAccounts', args);\n            case 5:\n              unsafeRes = _context21.sent;\n              res = create(unsafeRes, jsonRpcResultAndContext(array(nullable(AccountInfoResult))));\n              if (!('error' in res)) {\n                _context21.next = 9;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, \"failed to get info for accounts \".concat(keys));\n            case 9:\n              return _context21.abrupt(\"return\", res.result);\n            case 10:\n            case \"end\":\n              return _context21.stop();\n          }\n        }, _callee21, this);\n      }));\n      function getMultipleAccountsInfoAndContext(_x33, _x34) {\n        return _getMultipleAccountsInfoAndContext.apply(this, arguments);\n      }\n      return getMultipleAccountsInfoAndContext;\n    }()\n    /**\n     * Fetch all the account info for multiple accounts specified by an array of public keys\n     */\n  }, {\n    key: \"getMultipleAccountsInfo\",\n    value: function () {\n      var _getMultipleAccountsInfo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee22(publicKeys, commitmentOrConfig) {\n        var res;\n        return _regeneratorRuntime.wrap(function _callee22$(_context22) {\n          while (1) switch (_context22.prev = _context22.next) {\n            case 0:\n              _context22.next = 2;\n              return this.getMultipleAccountsInfoAndContext(publicKeys, commitmentOrConfig);\n            case 2:\n              res = _context22.sent;\n              return _context22.abrupt(\"return\", res.value);\n            case 4:\n            case \"end\":\n              return _context22.stop();\n          }\n        }, _callee22, this);\n      }));\n      function getMultipleAccountsInfo(_x35, _x36) {\n        return _getMultipleAccountsInfo.apply(this, arguments);\n      }\n      return getMultipleAccountsInfo;\n    }()\n    /**\n     * Returns epoch activation information for a stake account that has been delegated\n     */\n  }, {\n    key: \"getStakeActivation\",\n    value: function () {\n      var _getStakeActivation = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee23(publicKey, commitmentOrConfig, epoch) {\n        var _extractCommitmentFro8, commitment, config, args, unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee23$(_context23) {\n          while (1) switch (_context23.prev = _context23.next) {\n            case 0:\n              _extractCommitmentFro8 = extractCommitmentFromConfig(commitmentOrConfig), commitment = _extractCommitmentFro8.commitment, config = _extractCommitmentFro8.config;\n              args = this._buildArgs([publicKey.toBase58()], commitment, undefined /* encoding */, _objectSpread(_objectSpread({}, config), {}, {\n                epoch: epoch != null ? epoch : config === null || config === void 0 ? void 0 : config.epoch\n              }));\n              _context23.next = 4;\n              return this._rpcRequest('getStakeActivation', args);\n            case 4:\n              unsafeRes = _context23.sent;\n              res = create(unsafeRes, jsonRpcResult(StakeActivationResult));\n              if (!('error' in res)) {\n                _context23.next = 8;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, \"failed to get Stake Activation \".concat(publicKey.toBase58()));\n            case 8:\n              return _context23.abrupt(\"return\", res.result);\n            case 9:\n            case \"end\":\n              return _context23.stop();\n          }\n        }, _callee23, this);\n      }));\n      function getStakeActivation(_x37, _x38, _x39) {\n        return _getStakeActivation.apply(this, arguments);\n      }\n      return getStakeActivation;\n    }()\n    /**\n     * Fetch all the accounts owned by the specified program id\n     *\n     * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>}\n     */\n  }, {\n    key: \"getProgramAccounts\",\n    value:\n    // eslint-disable-next-line no-dupe-class-members\n    function () {\n      var _getProgramAccounts = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee24(programId, configOrCommitment) {\n        var _extractCommitmentFro9, commitment, config, _ref5, encoding, configWithoutEncoding, args, unsafeRes, baseSchema, res;\n        return _regeneratorRuntime.wrap(function _callee24$(_context24) {\n          while (1) switch (_context24.prev = _context24.next) {\n            case 0:\n              _extractCommitmentFro9 = extractCommitmentFromConfig(configOrCommitment), commitment = _extractCommitmentFro9.commitment, config = _extractCommitmentFro9.config;\n              _ref5 = config || {}, encoding = _ref5.encoding, configWithoutEncoding = _objectWithoutProperties(_ref5, _excluded2);\n              args = this._buildArgs([programId.toBase58()], commitment, encoding || 'base64', configWithoutEncoding);\n              _context24.next = 5;\n              return this._rpcRequest('getProgramAccounts', args);\n            case 5:\n              unsafeRes = _context24.sent;\n              baseSchema = array(KeyedAccountInfoResult);\n              res = configWithoutEncoding.withContext === true ? create(unsafeRes, jsonRpcResultAndContext(baseSchema)) : create(unsafeRes, jsonRpcResult(baseSchema));\n              if (!('error' in res)) {\n                _context24.next = 10;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, \"failed to get accounts owned by program \".concat(programId.toBase58()));\n            case 10:\n              return _context24.abrupt(\"return\", res.result);\n            case 11:\n            case \"end\":\n              return _context24.stop();\n          }\n        }, _callee24, this);\n      }));\n      function getProgramAccounts(_x40, _x41) {\n        return _getProgramAccounts.apply(this, arguments);\n      }\n      return getProgramAccounts;\n    }()\n    /**\n     * Fetch and parse all the accounts owned by the specified program id\n     *\n     * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer | ParsedAccountData>}>>}\n     */\n  }, {\n    key: \"getParsedProgramAccounts\",\n    value: function () {\n      var _getParsedProgramAccounts = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee25(programId, configOrCommitment) {\n        var _extractCommitmentFro10, commitment, config, args, unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee25$(_context25) {\n          while (1) switch (_context25.prev = _context25.next) {\n            case 0:\n              _extractCommitmentFro10 = extractCommitmentFromConfig(configOrCommitment), commitment = _extractCommitmentFro10.commitment, config = _extractCommitmentFro10.config;\n              args = this._buildArgs([programId.toBase58()], commitment, 'jsonParsed', config);\n              _context25.next = 4;\n              return this._rpcRequest('getProgramAccounts', args);\n            case 4:\n              unsafeRes = _context25.sent;\n              res = create(unsafeRes, jsonRpcResult(array(KeyedParsedAccountInfoResult)));\n              if (!('error' in res)) {\n                _context25.next = 8;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, \"failed to get accounts owned by program \".concat(programId.toBase58()));\n            case 8:\n              return _context25.abrupt(\"return\", res.result);\n            case 9:\n            case \"end\":\n              return _context25.stop();\n          }\n        }, _callee25, this);\n      }));\n      function getParsedProgramAccounts(_x42, _x43) {\n        return _getParsedProgramAccounts.apply(this, arguments);\n      }\n      return getParsedProgramAccounts;\n    }()\n  }, {\n    key: \"confirmTransaction\",\n    value:\n    // eslint-disable-next-line no-dupe-class-members\n    function () {\n      var _confirmTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee26(strategy, commitment) {\n        var rawSignature, _config$abortSignal, _config, decodedSignature;\n        return _regeneratorRuntime.wrap(function _callee26$(_context26) {\n          while (1) switch (_context26.prev = _context26.next) {\n            case 0:\n              if (!(typeof strategy == 'string')) {\n                _context26.next = 4;\n                break;\n              }\n              rawSignature = strategy;\n              _context26.next = 8;\n              break;\n            case 4:\n              _config = strategy;\n              if (!((_config$abortSignal = _config.abortSignal) !== null && _config$abortSignal !== void 0 && _config$abortSignal.aborted)) {\n                _context26.next = 7;\n                break;\n              }\n              return _context26.abrupt(\"return\", Promise.reject(_config.abortSignal.reason));\n            case 7:\n              rawSignature = _config.signature;\n            case 8:\n              _context26.prev = 8;\n              decodedSignature = bs58.decode(rawSignature);\n              _context26.next = 15;\n              break;\n            case 12:\n              _context26.prev = 12;\n              _context26.t0 = _context26[\"catch\"](8);\n              throw new Error('signature must be base58 encoded: ' + rawSignature);\n            case 15:\n              assert(decodedSignature.length === 64, 'signature has invalid length');\n              if (!(typeof strategy === 'string')) {\n                _context26.next = 22;\n                break;\n              }\n              _context26.next = 19;\n              return this.confirmTransactionUsingLegacyTimeoutStrategy({\n                commitment: commitment || this.commitment,\n                signature: rawSignature\n              });\n            case 19:\n              return _context26.abrupt(\"return\", _context26.sent);\n            case 22:\n              if (!('lastValidBlockHeight' in strategy)) {\n                _context26.next = 28;\n                break;\n              }\n              _context26.next = 25;\n              return this.confirmTransactionUsingBlockHeightExceedanceStrategy({\n                commitment: commitment || this.commitment,\n                strategy: strategy\n              });\n            case 25:\n              return _context26.abrupt(\"return\", _context26.sent);\n            case 28:\n              _context26.next = 30;\n              return this.confirmTransactionUsingDurableNonceStrategy({\n                commitment: commitment || this.commitment,\n                strategy: strategy\n              });\n            case 30:\n              return _context26.abrupt(\"return\", _context26.sent);\n            case 31:\n            case \"end\":\n              return _context26.stop();\n          }\n        }, _callee26, this, [[8, 12]]);\n      }));\n      function confirmTransaction(_x44, _x45) {\n        return _confirmTransaction.apply(this, arguments);\n      }\n      return confirmTransaction;\n    }()\n  }, {\n    key: \"getCancellationPromise\",\n    value: function getCancellationPromise(signal) {\n      return new Promise(function (_, reject) {\n        if (signal == null) {\n          return;\n        }\n        if (signal.aborted) {\n          reject(signal.reason);\n        } else {\n          signal.addEventListener('abort', function () {\n            reject(signal.reason);\n          });\n        }\n      });\n    }\n  }, {\n    key: \"getTransactionConfirmationPromise\",\n    value: function getTransactionConfirmationPromise(_ref6) {\n      var _this2 = this;\n      var commitment = _ref6.commitment,\n        signature = _ref6.signature;\n      var signatureSubscriptionId;\n      var disposeSignatureSubscriptionStateChangeObserver;\n      var done = false;\n      var confirmationPromise = new Promise(function (resolve, reject) {\n        try {\n          signatureSubscriptionId = _this2.onSignature(signature, function (result, context) {\n            signatureSubscriptionId = undefined;\n            var response = {\n              context: context,\n              value: result\n            };\n            resolve({\n              __type: TransactionStatus.PROCESSED,\n              response: response\n            });\n          }, commitment);\n          var subscriptionSetupPromise = new Promise(function (resolveSubscriptionSetup) {\n            if (signatureSubscriptionId == null) {\n              resolveSubscriptionSetup();\n            } else {\n              disposeSignatureSubscriptionStateChangeObserver = _this2._onSubscriptionStateChange(signatureSubscriptionId, function (nextState) {\n                if (nextState === 'subscribed') {\n                  resolveSubscriptionSetup();\n                }\n              });\n            }\n          });\n          _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee27() {\n            var response, context, value;\n            return _regeneratorRuntime.wrap(function _callee27$(_context27) {\n              while (1) switch (_context27.prev = _context27.next) {\n                case 0:\n                  _context27.next = 2;\n                  return subscriptionSetupPromise;\n                case 2:\n                  if (!done) {\n                    _context27.next = 4;\n                    break;\n                  }\n                  return _context27.abrupt(\"return\");\n                case 4:\n                  _context27.next = 6;\n                  return _this2.getSignatureStatus(signature);\n                case 6:\n                  response = _context27.sent;\n                  if (!done) {\n                    _context27.next = 9;\n                    break;\n                  }\n                  return _context27.abrupt(\"return\");\n                case 9:\n                  if (!(response == null)) {\n                    _context27.next = 11;\n                    break;\n                  }\n                  return _context27.abrupt(\"return\");\n                case 11:\n                  context = response.context, value = response.value;\n                  if (!(value == null)) {\n                    _context27.next = 14;\n                    break;\n                  }\n                  return _context27.abrupt(\"return\");\n                case 14:\n                  if (!(value !== null && value !== void 0 && value.err)) {\n                    _context27.next = 18;\n                    break;\n                  }\n                  reject(value.err);\n                  _context27.next = 29;\n                  break;\n                case 18:\n                  _context27.t0 = commitment;\n                  _context27.next = _context27.t0 === 'confirmed' ? 21 : _context27.t0 === 'single' ? 21 : _context27.t0 === 'singleGossip' ? 21 : _context27.t0 === 'finalized' ? 24 : _context27.t0 === 'max' ? 24 : _context27.t0 === 'root' ? 24 : _context27.t0 === 'processed' ? 27 : _context27.t0 === 'recent' ? 27 : 27;\n                  break;\n                case 21:\n                  if (!(value.confirmationStatus === 'processed')) {\n                    _context27.next = 23;\n                    break;\n                  }\n                  return _context27.abrupt(\"return\");\n                case 23:\n                  return _context27.abrupt(\"break\", 27);\n                case 24:\n                  if (!(value.confirmationStatus === 'processed' || value.confirmationStatus === 'confirmed')) {\n                    _context27.next = 26;\n                    break;\n                  }\n                  return _context27.abrupt(\"return\");\n                case 26:\n                  return _context27.abrupt(\"break\", 27);\n                case 27:\n                  done = true;\n                  resolve({\n                    __type: TransactionStatus.PROCESSED,\n                    response: {\n                      context: context,\n                      value: value\n                    }\n                  });\n                case 29:\n                case \"end\":\n                  return _context27.stop();\n              }\n            }, _callee27);\n          }))();\n        } catch (err) {\n          reject(err);\n        }\n      });\n      var abortConfirmation = function abortConfirmation() {\n        if (disposeSignatureSubscriptionStateChangeObserver) {\n          disposeSignatureSubscriptionStateChangeObserver();\n          disposeSignatureSubscriptionStateChangeObserver = undefined;\n        }\n        if (signatureSubscriptionId != null) {\n          _this2.removeSignatureListener(signatureSubscriptionId);\n          signatureSubscriptionId = undefined;\n        }\n      };\n      return {\n        abortConfirmation: abortConfirmation,\n        confirmationPromise: confirmationPromise\n      };\n    }\n  }, {\n    key: \"confirmTransactionUsingBlockHeightExceedanceStrategy\",\n    value: function () {\n      var _confirmTransactionUsingBlockHeightExceedanceStrategy = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee30(_ref8) {\n        var _this3 = this;\n        var commitment, _ref8$strategy, abortSignal, lastValidBlockHeight, signature, done, expiryPromise, _this$getTransactionC, abortConfirmation, confirmationPromise, cancellationPromise, result, outcome;\n        return _regeneratorRuntime.wrap(function _callee30$(_context30) {\n          while (1) switch (_context30.prev = _context30.next) {\n            case 0:\n              commitment = _ref8.commitment, _ref8$strategy = _ref8.strategy, abortSignal = _ref8$strategy.abortSignal, lastValidBlockHeight = _ref8$strategy.lastValidBlockHeight, signature = _ref8$strategy.signature;\n              done = false;\n              expiryPromise = new Promise(function (resolve) {\n                var checkBlockHeight = /*#__PURE__*/function () {\n                  var _ref9 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee28() {\n                    var blockHeight;\n                    return _regeneratorRuntime.wrap(function _callee28$(_context28) {\n                      while (1) switch (_context28.prev = _context28.next) {\n                        case 0:\n                          _context28.prev = 0;\n                          _context28.next = 3;\n                          return _this3.getBlockHeight(commitment);\n                        case 3:\n                          blockHeight = _context28.sent;\n                          return _context28.abrupt(\"return\", blockHeight);\n                        case 7:\n                          _context28.prev = 7;\n                          _context28.t0 = _context28[\"catch\"](0);\n                          return _context28.abrupt(\"return\", -1);\n                        case 10:\n                        case \"end\":\n                          return _context28.stop();\n                      }\n                    }, _callee28, null, [[0, 7]]);\n                  }));\n                  return function checkBlockHeight() {\n                    return _ref9.apply(this, arguments);\n                  };\n                }();\n                _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee29() {\n                  var currentBlockHeight;\n                  return _regeneratorRuntime.wrap(function _callee29$(_context29) {\n                    while (1) switch (_context29.prev = _context29.next) {\n                      case 0:\n                        _context29.next = 2;\n                        return checkBlockHeight();\n                      case 2:\n                        currentBlockHeight = _context29.sent;\n                        if (!done) {\n                          _context29.next = 5;\n                          break;\n                        }\n                        return _context29.abrupt(\"return\");\n                      case 5:\n                        if (!(currentBlockHeight <= lastValidBlockHeight)) {\n                          _context29.next = 17;\n                          break;\n                        }\n                        _context29.next = 8;\n                        return sleep(1000);\n                      case 8:\n                        if (!done) {\n                          _context29.next = 10;\n                          break;\n                        }\n                        return _context29.abrupt(\"return\");\n                      case 10:\n                        _context29.next = 12;\n                        return checkBlockHeight();\n                      case 12:\n                        currentBlockHeight = _context29.sent;\n                        if (!done) {\n                          _context29.next = 15;\n                          break;\n                        }\n                        return _context29.abrupt(\"return\");\n                      case 15:\n                        _context29.next = 5;\n                        break;\n                      case 17:\n                        resolve({\n                          __type: TransactionStatus.BLOCKHEIGHT_EXCEEDED\n                        });\n                      case 18:\n                      case \"end\":\n                        return _context29.stop();\n                    }\n                  }, _callee29);\n                }))();\n              });\n              _this$getTransactionC = this.getTransactionConfirmationPromise({\n                commitment: commitment,\n                signature: signature\n              }), abortConfirmation = _this$getTransactionC.abortConfirmation, confirmationPromise = _this$getTransactionC.confirmationPromise;\n              cancellationPromise = this.getCancellationPromise(abortSignal);\n              _context30.prev = 5;\n              _context30.next = 8;\n              return Promise.race([cancellationPromise, confirmationPromise, expiryPromise]);\n            case 8:\n              outcome = _context30.sent;\n              if (!(outcome.__type === TransactionStatus.PROCESSED)) {\n                _context30.next = 13;\n                break;\n              }\n              result = outcome.response;\n              _context30.next = 14;\n              break;\n            case 13:\n              throw new TransactionExpiredBlockheightExceededError(signature);\n            case 14:\n              _context30.prev = 14;\n              done = true;\n              abortConfirmation();\n              return _context30.finish(14);\n            case 18:\n              return _context30.abrupt(\"return\", result);\n            case 19:\n            case \"end\":\n              return _context30.stop();\n          }\n        }, _callee30, this, [[5,, 14, 18]]);\n      }));\n      function confirmTransactionUsingBlockHeightExceedanceStrategy(_x46) {\n        return _confirmTransactionUsingBlockHeightExceedanceStrategy.apply(this, arguments);\n      }\n      return confirmTransactionUsingBlockHeightExceedanceStrategy;\n    }()\n  }, {\n    key: \"confirmTransactionUsingDurableNonceStrategy\",\n    value: function () {\n      var _confirmTransactionUsingDurableNonceStrategy = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee33(_ref11) {\n        var _this4 = this;\n        var commitment, _ref11$strategy, abortSignal, minContextSlot, nonceAccountPubkey, nonceValue, signature, done, expiryPromise, _this$getTransactionC2, abortConfirmation, confirmationPromise, cancellationPromise, result, outcome, _signatureStatus, signatureStatus, _outcome$slotInWhichN, status, commitmentForStatus, confirmationStatus;\n        return _regeneratorRuntime.wrap(function _callee33$(_context34) {\n          while (1) switch (_context34.prev = _context34.next) {\n            case 0:\n              commitment = _ref11.commitment, _ref11$strategy = _ref11.strategy, abortSignal = _ref11$strategy.abortSignal, minContextSlot = _ref11$strategy.minContextSlot, nonceAccountPubkey = _ref11$strategy.nonceAccountPubkey, nonceValue = _ref11$strategy.nonceValue, signature = _ref11$strategy.signature;\n              done = false;\n              expiryPromise = new Promise(function (resolve) {\n                var currentNonceValue = nonceValue;\n                var lastCheckedSlot = null;\n                var getCurrentNonceValue = /*#__PURE__*/function () {\n                  var _ref12 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee31() {\n                    var _yield$_this4$getNonc, _context31, nonceAccount;\n                    return _regeneratorRuntime.wrap(function _callee31$(_context32) {\n                      while (1) switch (_context32.prev = _context32.next) {\n                        case 0:\n                          _context32.prev = 0;\n                          _context32.next = 3;\n                          return _this4.getNonceAndContext(nonceAccountPubkey, {\n                            commitment: commitment,\n                            minContextSlot: minContextSlot\n                          });\n                        case 3:\n                          _yield$_this4$getNonc = _context32.sent;\n                          _context31 = _yield$_this4$getNonc.context;\n                          nonceAccount = _yield$_this4$getNonc.value;\n                          lastCheckedSlot = _context31.slot;\n                          return _context32.abrupt(\"return\", nonceAccount === null || nonceAccount === void 0 ? void 0 : nonceAccount.nonce);\n                        case 10:\n                          _context32.prev = 10;\n                          _context32.t0 = _context32[\"catch\"](0);\n                          return _context32.abrupt(\"return\", currentNonceValue);\n                        case 13:\n                        case \"end\":\n                          return _context32.stop();\n                      }\n                    }, _callee31, null, [[0, 10]]);\n                  }));\n                  return function getCurrentNonceValue() {\n                    return _ref12.apply(this, arguments);\n                  };\n                }();\n                _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee32() {\n                  return _regeneratorRuntime.wrap(function _callee32$(_context33) {\n                    while (1) switch (_context33.prev = _context33.next) {\n                      case 0:\n                        _context33.next = 2;\n                        return getCurrentNonceValue();\n                      case 2:\n                        currentNonceValue = _context33.sent;\n                        if (!done) {\n                          _context33.next = 5;\n                          break;\n                        }\n                        return _context33.abrupt(\"return\");\n                      case 5:\n                        if (!(nonceValue !== currentNonceValue)) {\n                          _context33.next = 9;\n                          break;\n                        }\n                        resolve({\n                          __type: TransactionStatus.NONCE_INVALID,\n                          slotInWhichNonceDidAdvance: lastCheckedSlot\n                        });\n                        return _context33.abrupt(\"return\");\n                      case 9:\n                        _context33.next = 11;\n                        return sleep(2000);\n                      case 11:\n                        if (!done) {\n                          _context33.next = 13;\n                          break;\n                        }\n                        return _context33.abrupt(\"return\");\n                      case 13:\n                        _context33.next = 15;\n                        return getCurrentNonceValue();\n                      case 15:\n                        currentNonceValue = _context33.sent;\n                        if (!done) {\n                          _context33.next = 18;\n                          break;\n                        }\n                        return _context33.abrupt(\"return\");\n                      case 18:\n                        _context33.next = 5;\n                        break;\n                      case 20:\n                      case \"end\":\n                        return _context33.stop();\n                    }\n                  }, _callee32);\n                }))();\n              });\n              _this$getTransactionC2 = this.getTransactionConfirmationPromise({\n                commitment: commitment,\n                signature: signature\n              }), abortConfirmation = _this$getTransactionC2.abortConfirmation, confirmationPromise = _this$getTransactionC2.confirmationPromise;\n              cancellationPromise = this.getCancellationPromise(abortSignal);\n              _context34.prev = 5;\n              _context34.next = 8;\n              return Promise.race([cancellationPromise, confirmationPromise, expiryPromise]);\n            case 8:\n              outcome = _context34.sent;\n              if (!(outcome.__type === TransactionStatus.PROCESSED)) {\n                _context34.next = 13;\n                break;\n              }\n              result = outcome.response;\n              _context34.next = 47;\n              break;\n            case 13:\n              _context34.next = 16;\n              return this.getSignatureStatus(signature);\n            case 16:\n              status = _context34.sent;\n              if (!(status == null)) {\n                _context34.next = 19;\n                break;\n              }\n              return _context34.abrupt(\"break\", 27);\n            case 19:\n              if (!(status.context.slot < ((_outcome$slotInWhichN = outcome.slotInWhichNonceDidAdvance) !== null && _outcome$slotInWhichN !== void 0 ? _outcome$slotInWhichN : minContextSlot))) {\n                _context34.next = 23;\n                break;\n              }\n              _context34.next = 22;\n              return sleep(400);\n            case 22:\n              return _context34.abrupt(\"continue\", 13);\n            case 23:\n              signatureStatus = status;\n              return _context34.abrupt(\"break\", 27);\n            case 27:\n              if (!((_signatureStatus = signatureStatus) !== null && _signatureStatus !== void 0 && _signatureStatus.value)) {\n                _context34.next = 46;\n                break;\n              }\n              commitmentForStatus = commitment || 'finalized';\n              confirmationStatus = signatureStatus.value.confirmationStatus;\n              _context34.t0 = commitmentForStatus;\n              _context34.next = _context34.t0 === 'processed' ? 33 : _context34.t0 === 'recent' ? 33 : _context34.t0 === 'confirmed' ? 36 : _context34.t0 === 'single' ? 36 : _context34.t0 === 'singleGossip' ? 36 : _context34.t0 === 'finalized' ? 39 : _context34.t0 === 'max' ? 39 : _context34.t0 === 'root' ? 39 : 42;\n              break;\n            case 33:\n              if (!(confirmationStatus !== 'processed' && confirmationStatus !== 'confirmed' && confirmationStatus !== 'finalized')) {\n                _context34.next = 35;\n                break;\n              }\n              throw new TransactionExpiredNonceInvalidError(signature);\n            case 35:\n              return _context34.abrupt(\"break\", 43);\n            case 36:\n              if (!(confirmationStatus !== 'confirmed' && confirmationStatus !== 'finalized')) {\n                _context34.next = 38;\n                break;\n              }\n              throw new TransactionExpiredNonceInvalidError(signature);\n            case 38:\n              return _context34.abrupt(\"break\", 43);\n            case 39:\n              if (!(confirmationStatus !== 'finalized')) {\n                _context34.next = 41;\n                break;\n              }\n              throw new TransactionExpiredNonceInvalidError(signature);\n            case 41:\n              return _context34.abrupt(\"break\", 43);\n            case 42:\n            case 43:\n              result = {\n                context: signatureStatus.context,\n                value: {\n                  err: signatureStatus.value.err\n                }\n              };\n              _context34.next = 47;\n              break;\n            case 46:\n              throw new TransactionExpiredNonceInvalidError(signature);\n            case 47:\n              _context34.prev = 47;\n              done = true;\n              abortConfirmation();\n              return _context34.finish(47);\n            case 51:\n              return _context34.abrupt(\"return\", result);\n            case 52:\n            case \"end\":\n              return _context34.stop();\n          }\n        }, _callee33, this, [[5,, 47, 51]]);\n      }));\n      function confirmTransactionUsingDurableNonceStrategy(_x47) {\n        return _confirmTransactionUsingDurableNonceStrategy.apply(this, arguments);\n      }\n      return confirmTransactionUsingDurableNonceStrategy;\n    }()\n  }, {\n    key: \"confirmTransactionUsingLegacyTimeoutStrategy\",\n    value: function () {\n      var _confirmTransactionUsingLegacyTimeoutStrategy = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee34(_ref14) {\n        var _this5 = this;\n        var commitment, signature, timeoutId, expiryPromise, _this$getTransactionC3, abortConfirmation, confirmationPromise, result, outcome;\n        return _regeneratorRuntime.wrap(function _callee34$(_context35) {\n          while (1) switch (_context35.prev = _context35.next) {\n            case 0:\n              commitment = _ref14.commitment, signature = _ref14.signature;\n              expiryPromise = new Promise(function (resolve) {\n                var timeoutMs = _this5._confirmTransactionInitialTimeout || 60 * 1000;\n                switch (commitment) {\n                  case 'processed':\n                  case 'recent':\n                  case 'single':\n                  case 'confirmed':\n                  case 'singleGossip':\n                    {\n                      timeoutMs = _this5._confirmTransactionInitialTimeout || 30 * 1000;\n                      break;\n                    }\n                }\n                timeoutId = setTimeout(function () {\n                  return resolve({\n                    __type: TransactionStatus.TIMED_OUT,\n                    timeoutMs: timeoutMs\n                  });\n                }, timeoutMs);\n              });\n              _this$getTransactionC3 = this.getTransactionConfirmationPromise({\n                commitment: commitment,\n                signature: signature\n              }), abortConfirmation = _this$getTransactionC3.abortConfirmation, confirmationPromise = _this$getTransactionC3.confirmationPromise;\n              _context35.prev = 3;\n              _context35.next = 6;\n              return Promise.race([confirmationPromise, expiryPromise]);\n            case 6:\n              outcome = _context35.sent;\n              if (!(outcome.__type === TransactionStatus.PROCESSED)) {\n                _context35.next = 11;\n                break;\n              }\n              result = outcome.response;\n              _context35.next = 12;\n              break;\n            case 11:\n              throw new TransactionExpiredTimeoutError(signature, outcome.timeoutMs / 1000);\n            case 12:\n              _context35.prev = 12;\n              clearTimeout(timeoutId);\n              abortConfirmation();\n              return _context35.finish(12);\n            case 16:\n              return _context35.abrupt(\"return\", result);\n            case 17:\n            case \"end\":\n              return _context35.stop();\n          }\n        }, _callee34, this, [[3,, 12, 16]]);\n      }));\n      function confirmTransactionUsingLegacyTimeoutStrategy(_x48) {\n        return _confirmTransactionUsingLegacyTimeoutStrategy.apply(this, arguments);\n      }\n      return confirmTransactionUsingLegacyTimeoutStrategy;\n    }()\n    /**\n     * Return the list of nodes that are currently participating in the cluster\n     */\n  }, {\n    key: \"getClusterNodes\",\n    value: function () {\n      var _getClusterNodes = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee35() {\n        var unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee35$(_context36) {\n          while (1) switch (_context36.prev = _context36.next) {\n            case 0:\n              _context36.next = 2;\n              return this._rpcRequest('getClusterNodes', []);\n            case 2:\n              unsafeRes = _context36.sent;\n              res = create(unsafeRes, jsonRpcResult(array(ContactInfoResult)));\n              if (!('error' in res)) {\n                _context36.next = 6;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, 'failed to get cluster nodes');\n            case 6:\n              return _context36.abrupt(\"return\", res.result);\n            case 7:\n            case \"end\":\n              return _context36.stop();\n          }\n        }, _callee35, this);\n      }));\n      function getClusterNodes() {\n        return _getClusterNodes.apply(this, arguments);\n      }\n      return getClusterNodes;\n    }()\n    /**\n     * Return the list of nodes that are currently participating in the cluster\n     */\n  }, {\n    key: \"getVoteAccounts\",\n    value: function () {\n      var _getVoteAccounts = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee36(commitment) {\n        var args, unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee36$(_context37) {\n          while (1) switch (_context37.prev = _context37.next) {\n            case 0:\n              args = this._buildArgs([], commitment);\n              _context37.next = 3;\n              return this._rpcRequest('getVoteAccounts', args);\n            case 3:\n              unsafeRes = _context37.sent;\n              res = create(unsafeRes, GetVoteAccounts);\n              if (!('error' in res)) {\n                _context37.next = 7;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, 'failed to get vote accounts');\n            case 7:\n              return _context37.abrupt(\"return\", res.result);\n            case 8:\n            case \"end\":\n              return _context37.stop();\n          }\n        }, _callee36, this);\n      }));\n      function getVoteAccounts(_x49) {\n        return _getVoteAccounts.apply(this, arguments);\n      }\n      return getVoteAccounts;\n    }()\n    /**\n     * Fetch the current slot that the node is processing\n     */\n  }, {\n    key: \"getSlot\",\n    value: function () {\n      var _getSlot = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee37(commitmentOrConfig) {\n        var _extractCommitmentFro11, commitment, config, args, unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee37$(_context38) {\n          while (1) switch (_context38.prev = _context38.next) {\n            case 0:\n              _extractCommitmentFro11 = extractCommitmentFromConfig(commitmentOrConfig), commitment = _extractCommitmentFro11.commitment, config = _extractCommitmentFro11.config;\n              args = this._buildArgs([], commitment, undefined /* encoding */, config);\n              _context38.next = 4;\n              return this._rpcRequest('getSlot', args);\n            case 4:\n              unsafeRes = _context38.sent;\n              res = create(unsafeRes, jsonRpcResult(number()));\n              if (!('error' in res)) {\n                _context38.next = 8;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, 'failed to get slot');\n            case 8:\n              return _context38.abrupt(\"return\", res.result);\n            case 9:\n            case \"end\":\n              return _context38.stop();\n          }\n        }, _callee37, this);\n      }));\n      function getSlot(_x50) {\n        return _getSlot.apply(this, arguments);\n      }\n      return getSlot;\n    }()\n    /**\n     * Fetch the current slot leader of the cluster\n     */\n  }, {\n    key: \"getSlotLeader\",\n    value: function () {\n      var _getSlotLeader = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee38(commitmentOrConfig) {\n        var _extractCommitmentFro12, commitment, config, args, unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee38$(_context39) {\n          while (1) switch (_context39.prev = _context39.next) {\n            case 0:\n              _extractCommitmentFro12 = extractCommitmentFromConfig(commitmentOrConfig), commitment = _extractCommitmentFro12.commitment, config = _extractCommitmentFro12.config;\n              args = this._buildArgs([], commitment, undefined /* encoding */, config);\n              _context39.next = 4;\n              return this._rpcRequest('getSlotLeader', args);\n            case 4:\n              unsafeRes = _context39.sent;\n              res = create(unsafeRes, jsonRpcResult(string()));\n              if (!('error' in res)) {\n                _context39.next = 8;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, 'failed to get slot leader');\n            case 8:\n              return _context39.abrupt(\"return\", res.result);\n            case 9:\n            case \"end\":\n              return _context39.stop();\n          }\n        }, _callee38, this);\n      }));\n      function getSlotLeader(_x51) {\n        return _getSlotLeader.apply(this, arguments);\n      }\n      return getSlotLeader;\n    }()\n    /**\n     * Fetch `limit` number of slot leaders starting from `startSlot`\n     *\n     * @param startSlot fetch slot leaders starting from this slot\n     * @param limit number of slot leaders to return\n     */\n  }, {\n    key: \"getSlotLeaders\",\n    value: function () {\n      var _getSlotLeaders = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee39(startSlot, limit) {\n        var args, unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee39$(_context40) {\n          while (1) switch (_context40.prev = _context40.next) {\n            case 0:\n              args = [startSlot, limit];\n              _context40.next = 3;\n              return this._rpcRequest('getSlotLeaders', args);\n            case 3:\n              unsafeRes = _context40.sent;\n              res = create(unsafeRes, jsonRpcResult(array(PublicKeyFromString)));\n              if (!('error' in res)) {\n                _context40.next = 7;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, 'failed to get slot leaders');\n            case 7:\n              return _context40.abrupt(\"return\", res.result);\n            case 8:\n            case \"end\":\n              return _context40.stop();\n          }\n        }, _callee39, this);\n      }));\n      function getSlotLeaders(_x52, _x53) {\n        return _getSlotLeaders.apply(this, arguments);\n      }\n      return getSlotLeaders;\n    }()\n    /**\n     * Fetch the current status of a signature\n     */\n  }, {\n    key: \"getSignatureStatus\",\n    value: function () {\n      var _getSignatureStatus = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee40(signature, config) {\n        var _yield$this$getSignat, context, values, value;\n        return _regeneratorRuntime.wrap(function _callee40$(_context41) {\n          while (1) switch (_context41.prev = _context41.next) {\n            case 0:\n              _context41.next = 2;\n              return this.getSignatureStatuses([signature], config);\n            case 2:\n              _yield$this$getSignat = _context41.sent;\n              context = _yield$this$getSignat.context;\n              values = _yield$this$getSignat.value;\n              assert(values.length === 1);\n              value = values[0];\n              return _context41.abrupt(\"return\", {\n                context: context,\n                value: value\n              });\n            case 8:\n            case \"end\":\n              return _context41.stop();\n          }\n        }, _callee40, this);\n      }));\n      function getSignatureStatus(_x54, _x55) {\n        return _getSignatureStatus.apply(this, arguments);\n      }\n      return getSignatureStatus;\n    }()\n    /**\n     * Fetch the current statuses of a batch of signatures\n     */\n  }, {\n    key: \"getSignatureStatuses\",\n    value: function () {\n      var _getSignatureStatuses = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee41(signatures, config) {\n        var params, unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee41$(_context42) {\n          while (1) switch (_context42.prev = _context42.next) {\n            case 0:\n              params = [signatures];\n              if (config) {\n                params.push(config);\n              }\n              _context42.next = 4;\n              return this._rpcRequest('getSignatureStatuses', params);\n            case 4:\n              unsafeRes = _context42.sent;\n              res = create(unsafeRes, GetSignatureStatusesRpcResult);\n              if (!('error' in res)) {\n                _context42.next = 8;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, 'failed to get signature status');\n            case 8:\n              return _context42.abrupt(\"return\", res.result);\n            case 9:\n            case \"end\":\n              return _context42.stop();\n          }\n        }, _callee41, this);\n      }));\n      function getSignatureStatuses(_x56, _x57) {\n        return _getSignatureStatuses.apply(this, arguments);\n      }\n      return getSignatureStatuses;\n    }()\n    /**\n     * Fetch the current transaction count of the cluster\n     */\n  }, {\n    key: \"getTransactionCount\",\n    value: function () {\n      var _getTransactionCount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee42(commitmentOrConfig) {\n        var _extractCommitmentFro13, commitment, config, args, unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee42$(_context43) {\n          while (1) switch (_context43.prev = _context43.next) {\n            case 0:\n              _extractCommitmentFro13 = extractCommitmentFromConfig(commitmentOrConfig), commitment = _extractCommitmentFro13.commitment, config = _extractCommitmentFro13.config;\n              args = this._buildArgs([], commitment, undefined /* encoding */, config);\n              _context43.next = 4;\n              return this._rpcRequest('getTransactionCount', args);\n            case 4:\n              unsafeRes = _context43.sent;\n              res = create(unsafeRes, jsonRpcResult(number()));\n              if (!('error' in res)) {\n                _context43.next = 8;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, 'failed to get transaction count');\n            case 8:\n              return _context43.abrupt(\"return\", res.result);\n            case 9:\n            case \"end\":\n              return _context43.stop();\n          }\n        }, _callee42, this);\n      }));\n      function getTransactionCount(_x58) {\n        return _getTransactionCount.apply(this, arguments);\n      }\n      return getTransactionCount;\n    }()\n    /**\n     * Fetch the current total currency supply of the cluster in lamports\n     *\n     * @deprecated Deprecated since v1.2.8. Please use {@link getSupply} instead.\n     */\n  }, {\n    key: \"getTotalSupply\",\n    value: function () {\n      var _getTotalSupply = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee43(commitment) {\n        var result;\n        return _regeneratorRuntime.wrap(function _callee43$(_context44) {\n          while (1) switch (_context44.prev = _context44.next) {\n            case 0:\n              _context44.next = 2;\n              return this.getSupply({\n                commitment: commitment,\n                excludeNonCirculatingAccountsList: true\n              });\n            case 2:\n              result = _context44.sent;\n              return _context44.abrupt(\"return\", result.value.total);\n            case 4:\n            case \"end\":\n              return _context44.stop();\n          }\n        }, _callee43, this);\n      }));\n      function getTotalSupply(_x59) {\n        return _getTotalSupply.apply(this, arguments);\n      }\n      return getTotalSupply;\n    }()\n    /**\n     * Fetch the cluster InflationGovernor parameters\n     */\n  }, {\n    key: \"getInflationGovernor\",\n    value: function () {\n      var _getInflationGovernor = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee44(commitment) {\n        var args, unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee44$(_context45) {\n          while (1) switch (_context45.prev = _context45.next) {\n            case 0:\n              args = this._buildArgs([], commitment);\n              _context45.next = 3;\n              return this._rpcRequest('getInflationGovernor', args);\n            case 3:\n              unsafeRes = _context45.sent;\n              res = create(unsafeRes, GetInflationGovernorRpcResult);\n              if (!('error' in res)) {\n                _context45.next = 7;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, 'failed to get inflation');\n            case 7:\n              return _context45.abrupt(\"return\", res.result);\n            case 8:\n            case \"end\":\n              return _context45.stop();\n          }\n        }, _callee44, this);\n      }));\n      function getInflationGovernor(_x60) {\n        return _getInflationGovernor.apply(this, arguments);\n      }\n      return getInflationGovernor;\n    }()\n    /**\n     * Fetch the inflation reward for a list of addresses for an epoch\n     */\n  }, {\n    key: \"getInflationReward\",\n    value: function () {\n      var _getInflationReward = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee45(addresses, epoch, commitmentOrConfig) {\n        var _extractCommitmentFro14, commitment, config, args, unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee45$(_context46) {\n          while (1) switch (_context46.prev = _context46.next) {\n            case 0:\n              _extractCommitmentFro14 = extractCommitmentFromConfig(commitmentOrConfig), commitment = _extractCommitmentFro14.commitment, config = _extractCommitmentFro14.config;\n              args = this._buildArgs([addresses.map(function (pubkey) {\n                return pubkey.toBase58();\n              })], commitment, undefined /* encoding */, _objectSpread(_objectSpread({}, config), {}, {\n                epoch: epoch != null ? epoch : config === null || config === void 0 ? void 0 : config.epoch\n              }));\n              _context46.next = 4;\n              return this._rpcRequest('getInflationReward', args);\n            case 4:\n              unsafeRes = _context46.sent;\n              res = create(unsafeRes, GetInflationRewardResult);\n              if (!('error' in res)) {\n                _context46.next = 8;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, 'failed to get inflation reward');\n            case 8:\n              return _context46.abrupt(\"return\", res.result);\n            case 9:\n            case \"end\":\n              return _context46.stop();\n          }\n        }, _callee45, this);\n      }));\n      function getInflationReward(_x61, _x62, _x63) {\n        return _getInflationReward.apply(this, arguments);\n      }\n      return getInflationReward;\n    }()\n    /**\n     * Fetch the specific inflation values for the current epoch\n     */\n  }, {\n    key: \"getInflationRate\",\n    value: function () {\n      var _getInflationRate = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee46() {\n        var unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee46$(_context47) {\n          while (1) switch (_context47.prev = _context47.next) {\n            case 0:\n              _context47.next = 2;\n              return this._rpcRequest('getInflationRate', []);\n            case 2:\n              unsafeRes = _context47.sent;\n              res = create(unsafeRes, GetInflationRateRpcResult);\n              if (!('error' in res)) {\n                _context47.next = 6;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, 'failed to get inflation rate');\n            case 6:\n              return _context47.abrupt(\"return\", res.result);\n            case 7:\n            case \"end\":\n              return _context47.stop();\n          }\n        }, _callee46, this);\n      }));\n      function getInflationRate() {\n        return _getInflationRate.apply(this, arguments);\n      }\n      return getInflationRate;\n    }()\n    /**\n     * Fetch the Epoch Info parameters\n     */\n  }, {\n    key: \"getEpochInfo\",\n    value: function () {\n      var _getEpochInfo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee47(commitmentOrConfig) {\n        var _extractCommitmentFro15, commitment, config, args, unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee47$(_context48) {\n          while (1) switch (_context48.prev = _context48.next) {\n            case 0:\n              _extractCommitmentFro15 = extractCommitmentFromConfig(commitmentOrConfig), commitment = _extractCommitmentFro15.commitment, config = _extractCommitmentFro15.config;\n              args = this._buildArgs([], commitment, undefined /* encoding */, config);\n              _context48.next = 4;\n              return this._rpcRequest('getEpochInfo', args);\n            case 4:\n              unsafeRes = _context48.sent;\n              res = create(unsafeRes, GetEpochInfoRpcResult);\n              if (!('error' in res)) {\n                _context48.next = 8;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, 'failed to get epoch info');\n            case 8:\n              return _context48.abrupt(\"return\", res.result);\n            case 9:\n            case \"end\":\n              return _context48.stop();\n          }\n        }, _callee47, this);\n      }));\n      function getEpochInfo(_x64) {\n        return _getEpochInfo.apply(this, arguments);\n      }\n      return getEpochInfo;\n    }()\n    /**\n     * Fetch the Epoch Schedule parameters\n     */\n  }, {\n    key: \"getEpochSchedule\",\n    value: function () {\n      var _getEpochSchedule = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee48() {\n        var unsafeRes, res, epochSchedule;\n        return _regeneratorRuntime.wrap(function _callee48$(_context49) {\n          while (1) switch (_context49.prev = _context49.next) {\n            case 0:\n              _context49.next = 2;\n              return this._rpcRequest('getEpochSchedule', []);\n            case 2:\n              unsafeRes = _context49.sent;\n              res = create(unsafeRes, GetEpochScheduleRpcResult);\n              if (!('error' in res)) {\n                _context49.next = 6;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, 'failed to get epoch schedule');\n            case 6:\n              epochSchedule = res.result;\n              return _context49.abrupt(\"return\", new EpochSchedule(epochSchedule.slotsPerEpoch, epochSchedule.leaderScheduleSlotOffset, epochSchedule.warmup, epochSchedule.firstNormalEpoch, epochSchedule.firstNormalSlot));\n            case 8:\n            case \"end\":\n              return _context49.stop();\n          }\n        }, _callee48, this);\n      }));\n      function getEpochSchedule() {\n        return _getEpochSchedule.apply(this, arguments);\n      }\n      return getEpochSchedule;\n    }()\n    /**\n     * Fetch the leader schedule for the current epoch\n     * @return {Promise<RpcResponseAndContext<LeaderSchedule>>}\n     */\n  }, {\n    key: \"getLeaderSchedule\",\n    value: function () {\n      var _getLeaderSchedule = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee49() {\n        var unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee49$(_context50) {\n          while (1) switch (_context50.prev = _context50.next) {\n            case 0:\n              _context50.next = 2;\n              return this._rpcRequest('getLeaderSchedule', []);\n            case 2:\n              unsafeRes = _context50.sent;\n              res = create(unsafeRes, GetLeaderScheduleRpcResult);\n              if (!('error' in res)) {\n                _context50.next = 6;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, 'failed to get leader schedule');\n            case 6:\n              return _context50.abrupt(\"return\", res.result);\n            case 7:\n            case \"end\":\n              return _context50.stop();\n          }\n        }, _callee49, this);\n      }));\n      function getLeaderSchedule() {\n        return _getLeaderSchedule.apply(this, arguments);\n      }\n      return getLeaderSchedule;\n    }()\n    /**\n     * Fetch the minimum balance needed to exempt an account of `dataLength`\n     * size from rent\n     */\n  }, {\n    key: \"getMinimumBalanceForRentExemption\",\n    value: function () {\n      var _getMinimumBalanceForRentExemption = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee50(dataLength, commitment) {\n        var args, unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee50$(_context51) {\n          while (1) switch (_context51.prev = _context51.next) {\n            case 0:\n              args = this._buildArgs([dataLength], commitment);\n              _context51.next = 3;\n              return this._rpcRequest('getMinimumBalanceForRentExemption', args);\n            case 3:\n              unsafeRes = _context51.sent;\n              res = create(unsafeRes, GetMinimumBalanceForRentExemptionRpcResult);\n              if (!('error' in res)) {\n                _context51.next = 8;\n                break;\n              }\n              console.warn('Unable to fetch minimum balance for rent exemption');\n              return _context51.abrupt(\"return\", 0);\n            case 8:\n              return _context51.abrupt(\"return\", res.result);\n            case 9:\n            case \"end\":\n              return _context51.stop();\n          }\n        }, _callee50, this);\n      }));\n      function getMinimumBalanceForRentExemption(_x65, _x66) {\n        return _getMinimumBalanceForRentExemption.apply(this, arguments);\n      }\n      return getMinimumBalanceForRentExemption;\n    }()\n    /**\n     * Fetch a recent blockhash from the cluster, return with context\n     * @return {Promise<RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>>}\n     *\n     * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n     */\n  }, {\n    key: \"getRecentBlockhashAndContext\",\n    value: function () {\n      var _getRecentBlockhashAndContext = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee51(commitment) {\n        var args, unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee51$(_context52) {\n          while (1) switch (_context52.prev = _context52.next) {\n            case 0:\n              args = this._buildArgs([], commitment);\n              _context52.next = 3;\n              return this._rpcRequest('getRecentBlockhash', args);\n            case 3:\n              unsafeRes = _context52.sent;\n              res = create(unsafeRes, GetRecentBlockhashAndContextRpcResult);\n              if (!('error' in res)) {\n                _context52.next = 7;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, 'failed to get recent blockhash');\n            case 7:\n              return _context52.abrupt(\"return\", res.result);\n            case 8:\n            case \"end\":\n              return _context52.stop();\n          }\n        }, _callee51, this);\n      }));\n      function getRecentBlockhashAndContext(_x67) {\n        return _getRecentBlockhashAndContext.apply(this, arguments);\n      }\n      return getRecentBlockhashAndContext;\n    }()\n    /**\n     * Fetch recent performance samples\n     * @return {Promise<Array<PerfSample>>}\n     */\n  }, {\n    key: \"getRecentPerformanceSamples\",\n    value: function () {\n      var _getRecentPerformanceSamples = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee52(limit) {\n        var unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee52$(_context53) {\n          while (1) switch (_context53.prev = _context53.next) {\n            case 0:\n              _context53.next = 2;\n              return this._rpcRequest('getRecentPerformanceSamples', limit ? [limit] : []);\n            case 2:\n              unsafeRes = _context53.sent;\n              res = create(unsafeRes, GetRecentPerformanceSamplesRpcResult);\n              if (!('error' in res)) {\n                _context53.next = 6;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, 'failed to get recent performance samples');\n            case 6:\n              return _context53.abrupt(\"return\", res.result);\n            case 7:\n            case \"end\":\n              return _context53.stop();\n          }\n        }, _callee52, this);\n      }));\n      function getRecentPerformanceSamples(_x68) {\n        return _getRecentPerformanceSamples.apply(this, arguments);\n      }\n      return getRecentPerformanceSamples;\n    }()\n    /**\n     * Fetch the fee calculator for a recent blockhash from the cluster, return with context\n     *\n     * @deprecated Deprecated since Solana v1.8.0. Please use {@link getFeeForMessage} instead.\n     */\n  }, {\n    key: \"getFeeCalculatorForBlockhash\",\n    value: function () {\n      var _getFeeCalculatorForBlockhash = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee53(blockhash, commitment) {\n        var args, unsafeRes, res, _res$result, context, value;\n        return _regeneratorRuntime.wrap(function _callee53$(_context54) {\n          while (1) switch (_context54.prev = _context54.next) {\n            case 0:\n              args = this._buildArgs([blockhash], commitment);\n              _context54.next = 3;\n              return this._rpcRequest('getFeeCalculatorForBlockhash', args);\n            case 3:\n              unsafeRes = _context54.sent;\n              res = create(unsafeRes, GetFeeCalculatorRpcResult);\n              if (!('error' in res)) {\n                _context54.next = 7;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, 'failed to get fee calculator');\n            case 7:\n              _res$result = res.result, context = _res$result.context, value = _res$result.value;\n              return _context54.abrupt(\"return\", {\n                context: context,\n                value: value !== null ? value.feeCalculator : null\n              });\n            case 9:\n            case \"end\":\n              return _context54.stop();\n          }\n        }, _callee53, this);\n      }));\n      function getFeeCalculatorForBlockhash(_x69, _x70) {\n        return _getFeeCalculatorForBlockhash.apply(this, arguments);\n      }\n      return getFeeCalculatorForBlockhash;\n    }()\n    /**\n     * Fetch the fee for a message from the cluster, return with context\n     */\n  }, {\n    key: \"getFeeForMessage\",\n    value: function () {\n      var _getFeeForMessage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee54(message, commitment) {\n        var wireMessage, args, unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee54$(_context55) {\n          while (1) switch (_context55.prev = _context55.next) {\n            case 0:\n              wireMessage = toBuffer(message.serialize()).toString('base64');\n              args = this._buildArgs([wireMessage], commitment);\n              _context55.next = 4;\n              return this._rpcRequest('getFeeForMessage', args);\n            case 4:\n              unsafeRes = _context55.sent;\n              res = create(unsafeRes, jsonRpcResultAndContext(nullable(number())));\n              if (!('error' in res)) {\n                _context55.next = 8;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, 'failed to get fee for message');\n            case 8:\n              if (!(res.result === null)) {\n                _context55.next = 10;\n                break;\n              }\n              throw new Error('invalid blockhash');\n            case 10:\n              return _context55.abrupt(\"return\", res.result);\n            case 11:\n            case \"end\":\n              return _context55.stop();\n          }\n        }, _callee54, this);\n      }));\n      function getFeeForMessage(_x71, _x72) {\n        return _getFeeForMessage.apply(this, arguments);\n      }\n      return getFeeForMessage;\n    }()\n    /**\n     * Fetch a list of prioritization fees from recent blocks.\n     */\n  }, {\n    key: \"getRecentPrioritizationFees\",\n    value: function () {\n      var _getRecentPrioritizationFees = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee55(config) {\n        var _config$lockedWritabl;\n        var accounts, args, unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee55$(_context56) {\n          while (1) switch (_context56.prev = _context56.next) {\n            case 0:\n              accounts = config === null || config === void 0 ? void 0 : (_config$lockedWritabl = config.lockedWritableAccounts) === null || _config$lockedWritabl === void 0 ? void 0 : _config$lockedWritabl.map(function (key) {\n                return key.toBase58();\n              });\n              args = accounts !== null && accounts !== void 0 && accounts.length ? [accounts] : [];\n              _context56.next = 4;\n              return this._rpcRequest('getRecentPrioritizationFees', args);\n            case 4:\n              unsafeRes = _context56.sent;\n              res = create(unsafeRes, GetRecentPrioritizationFeesRpcResult);\n              if (!('error' in res)) {\n                _context56.next = 8;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, 'failed to get recent prioritization fees');\n            case 8:\n              return _context56.abrupt(\"return\", res.result);\n            case 9:\n            case \"end\":\n              return _context56.stop();\n          }\n        }, _callee55, this);\n      }));\n      function getRecentPrioritizationFees(_x73) {\n        return _getRecentPrioritizationFees.apply(this, arguments);\n      }\n      return getRecentPrioritizationFees;\n    }()\n    /**\n     * Fetch a recent blockhash from the cluster\n     * @return {Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}>}\n     *\n     * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n     */\n  }, {\n    key: \"getRecentBlockhash\",\n    value: function () {\n      var _getRecentBlockhash = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee56(commitment) {\n        var res;\n        return _regeneratorRuntime.wrap(function _callee56$(_context57) {\n          while (1) switch (_context57.prev = _context57.next) {\n            case 0:\n              _context57.prev = 0;\n              _context57.next = 3;\n              return this.getRecentBlockhashAndContext(commitment);\n            case 3:\n              res = _context57.sent;\n              return _context57.abrupt(\"return\", res.value);\n            case 7:\n              _context57.prev = 7;\n              _context57.t0 = _context57[\"catch\"](0);\n              throw new Error('failed to get recent blockhash: ' + _context57.t0);\n            case 10:\n            case \"end\":\n              return _context57.stop();\n          }\n        }, _callee56, this, [[0, 7]]);\n      }));\n      function getRecentBlockhash(_x74) {\n        return _getRecentBlockhash.apply(this, arguments);\n      }\n      return getRecentBlockhash;\n    }()\n    /**\n     * Fetch the latest blockhash from the cluster\n     * @return {Promise<BlockhashWithExpiryBlockHeight>}\n     */\n  }, {\n    key: \"getLatestBlockhash\",\n    value: function () {\n      var _getLatestBlockhash = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee57(commitmentOrConfig) {\n        var res;\n        return _regeneratorRuntime.wrap(function _callee57$(_context58) {\n          while (1) switch (_context58.prev = _context58.next) {\n            case 0:\n              _context58.prev = 0;\n              _context58.next = 3;\n              return this.getLatestBlockhashAndContext(commitmentOrConfig);\n            case 3:\n              res = _context58.sent;\n              return _context58.abrupt(\"return\", res.value);\n            case 7:\n              _context58.prev = 7;\n              _context58.t0 = _context58[\"catch\"](0);\n              throw new Error('failed to get recent blockhash: ' + _context58.t0);\n            case 10:\n            case \"end\":\n              return _context58.stop();\n          }\n        }, _callee57, this, [[0, 7]]);\n      }));\n      function getLatestBlockhash(_x75) {\n        return _getLatestBlockhash.apply(this, arguments);\n      }\n      return getLatestBlockhash;\n    }()\n    /**\n     * Fetch the latest blockhash from the cluster\n     * @return {Promise<BlockhashWithExpiryBlockHeight>}\n     */\n  }, {\n    key: \"getLatestBlockhashAndContext\",\n    value: function () {\n      var _getLatestBlockhashAndContext = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee58(commitmentOrConfig) {\n        var _extractCommitmentFro16, commitment, config, args, unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee58$(_context59) {\n          while (1) switch (_context59.prev = _context59.next) {\n            case 0:\n              _extractCommitmentFro16 = extractCommitmentFromConfig(commitmentOrConfig), commitment = _extractCommitmentFro16.commitment, config = _extractCommitmentFro16.config;\n              args = this._buildArgs([], commitment, undefined /* encoding */, config);\n              _context59.next = 4;\n              return this._rpcRequest('getLatestBlockhash', args);\n            case 4:\n              unsafeRes = _context59.sent;\n              res = create(unsafeRes, GetLatestBlockhashRpcResult);\n              if (!('error' in res)) {\n                _context59.next = 8;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, 'failed to get latest blockhash');\n            case 8:\n              return _context59.abrupt(\"return\", res.result);\n            case 9:\n            case \"end\":\n              return _context59.stop();\n          }\n        }, _callee58, this);\n      }));\n      function getLatestBlockhashAndContext(_x76) {\n        return _getLatestBlockhashAndContext.apply(this, arguments);\n      }\n      return getLatestBlockhashAndContext;\n    }()\n    /**\n     * Returns whether a blockhash is still valid or not\n     */\n  }, {\n    key: \"isBlockhashValid\",\n    value: function () {\n      var _isBlockhashValid = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee59(blockhash, rawConfig) {\n        var _extractCommitmentFro17, commitment, config, args, unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee59$(_context60) {\n          while (1) switch (_context60.prev = _context60.next) {\n            case 0:\n              _extractCommitmentFro17 = extractCommitmentFromConfig(rawConfig), commitment = _extractCommitmentFro17.commitment, config = _extractCommitmentFro17.config;\n              args = this._buildArgs([blockhash], commitment, undefined /* encoding */, config);\n              _context60.next = 4;\n              return this._rpcRequest('isBlockhashValid', args);\n            case 4:\n              unsafeRes = _context60.sent;\n              res = create(unsafeRes, IsBlockhashValidRpcResult);\n              if (!('error' in res)) {\n                _context60.next = 8;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, 'failed to determine if the blockhash `' + blockhash + '`is valid');\n            case 8:\n              return _context60.abrupt(\"return\", res.result);\n            case 9:\n            case \"end\":\n              return _context60.stop();\n          }\n        }, _callee59, this);\n      }));\n      function isBlockhashValid(_x77, _x78) {\n        return _isBlockhashValid.apply(this, arguments);\n      }\n      return isBlockhashValid;\n    }()\n    /**\n     * Fetch the node version\n     */\n  }, {\n    key: \"getVersion\",\n    value: function () {\n      var _getVersion = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee60() {\n        var unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee60$(_context61) {\n          while (1) switch (_context61.prev = _context61.next) {\n            case 0:\n              _context61.next = 2;\n              return this._rpcRequest('getVersion', []);\n            case 2:\n              unsafeRes = _context61.sent;\n              res = create(unsafeRes, jsonRpcResult(VersionResult));\n              if (!('error' in res)) {\n                _context61.next = 6;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, 'failed to get version');\n            case 6:\n              return _context61.abrupt(\"return\", res.result);\n            case 7:\n            case \"end\":\n              return _context61.stop();\n          }\n        }, _callee60, this);\n      }));\n      function getVersion() {\n        return _getVersion.apply(this, arguments);\n      }\n      return getVersion;\n    }()\n    /**\n     * Fetch the genesis hash\n     */\n  }, {\n    key: \"getGenesisHash\",\n    value: function () {\n      var _getGenesisHash = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee61() {\n        var unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee61$(_context62) {\n          while (1) switch (_context62.prev = _context62.next) {\n            case 0:\n              _context62.next = 2;\n              return this._rpcRequest('getGenesisHash', []);\n            case 2:\n              unsafeRes = _context62.sent;\n              res = create(unsafeRes, jsonRpcResult(string()));\n              if (!('error' in res)) {\n                _context62.next = 6;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, 'failed to get genesis hash');\n            case 6:\n              return _context62.abrupt(\"return\", res.result);\n            case 7:\n            case \"end\":\n              return _context62.stop();\n          }\n        }, _callee61, this);\n      }));\n      function getGenesisHash() {\n        return _getGenesisHash.apply(this, arguments);\n      }\n      return getGenesisHash;\n    }()\n    /**\n     * Fetch a processed block from the cluster.\n     *\n     * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n     * setting the `maxSupportedTransactionVersion` property.\n     */\n  }, {\n    key: \"getBlock\",\n    value:\n    /**\n     * Fetch a processed block from the cluster.\n     */\n    // eslint-disable-next-line no-dupe-class-members\n    function () {\n      var _getBlock = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee62(slot, rawConfig) {\n        var _extractCommitmentFro18, commitment, config, args, unsafeRes, res, _res, _res2, result;\n        return _regeneratorRuntime.wrap(function _callee62$(_context63) {\n          while (1) switch (_context63.prev = _context63.next) {\n            case 0:\n              _extractCommitmentFro18 = extractCommitmentFromConfig(rawConfig), commitment = _extractCommitmentFro18.commitment, config = _extractCommitmentFro18.config;\n              args = this._buildArgsAtLeastConfirmed([slot], commitment, undefined /* encoding */, config);\n              _context63.next = 4;\n              return this._rpcRequest('getBlock', args);\n            case 4:\n              unsafeRes = _context63.sent;\n              _context63.prev = 5;\n              _context63.t0 = config === null || config === void 0 ? void 0 : config.transactionDetails;\n              _context63.next = _context63.t0 === 'accounts' ? 9 : _context63.t0 === 'none' ? 13 : 17;\n              break;\n            case 9:\n              res = create(unsafeRes, GetAccountsModeBlockRpcResult);\n              if (!('error' in res)) {\n                _context63.next = 12;\n                break;\n              }\n              throw res.error;\n            case 12:\n              return _context63.abrupt(\"return\", res.result);\n            case 13:\n              _res = create(unsafeRes, GetNoneModeBlockRpcResult);\n              if (!('error' in _res)) {\n                _context63.next = 16;\n                break;\n              }\n              throw _res.error;\n            case 16:\n              return _context63.abrupt(\"return\", _res.result);\n            case 17:\n              _res2 = create(unsafeRes, GetBlockRpcResult);\n              if (!('error' in _res2)) {\n                _context63.next = 20;\n                break;\n              }\n              throw _res2.error;\n            case 20:\n              result = _res2.result;\n              return _context63.abrupt(\"return\", result ? _objectSpread(_objectSpread({}, result), {}, {\n                transactions: result.transactions.map(function (_ref15) {\n                  var transaction = _ref15.transaction,\n                    meta = _ref15.meta,\n                    version = _ref15.version;\n                  return {\n                    meta: meta,\n                    transaction: _objectSpread(_objectSpread({}, transaction), {}, {\n                      message: versionedMessageFromResponse(version, transaction.message)\n                    }),\n                    version: version\n                  };\n                })\n              }) : null);\n            case 22:\n              _context63.next = 27;\n              break;\n            case 24:\n              _context63.prev = 24;\n              _context63.t1 = _context63[\"catch\"](5);\n              throw new SolanaJSONRPCError(_context63.t1, 'failed to get confirmed block');\n            case 27:\n            case \"end\":\n              return _context63.stop();\n          }\n        }, _callee62, this, [[5, 24]]);\n      }));\n      function getBlock(_x79, _x80) {\n        return _getBlock.apply(this, arguments);\n      }\n      return getBlock;\n    }()\n    /**\n     * Fetch parsed transaction details for a confirmed or finalized block\n     */\n  }, {\n    key: \"getParsedBlock\",\n    value:\n    // eslint-disable-next-line no-dupe-class-members\n    function () {\n      var _getParsedBlock = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee63(slot, rawConfig) {\n        var _extractCommitmentFro19, commitment, config, args, unsafeRes, res, _res3, _res4;\n        return _regeneratorRuntime.wrap(function _callee63$(_context64) {\n          while (1) switch (_context64.prev = _context64.next) {\n            case 0:\n              _extractCommitmentFro19 = extractCommitmentFromConfig(rawConfig), commitment = _extractCommitmentFro19.commitment, config = _extractCommitmentFro19.config;\n              args = this._buildArgsAtLeastConfirmed([slot], commitment, 'jsonParsed', config);\n              _context64.next = 4;\n              return this._rpcRequest('getBlock', args);\n            case 4:\n              unsafeRes = _context64.sent;\n              _context64.prev = 5;\n              _context64.t0 = config === null || config === void 0 ? void 0 : config.transactionDetails;\n              _context64.next = _context64.t0 === 'accounts' ? 9 : _context64.t0 === 'none' ? 13 : 17;\n              break;\n            case 9:\n              res = create(unsafeRes, GetParsedAccountsModeBlockRpcResult);\n              if (!('error' in res)) {\n                _context64.next = 12;\n                break;\n              }\n              throw res.error;\n            case 12:\n              return _context64.abrupt(\"return\", res.result);\n            case 13:\n              _res3 = create(unsafeRes, GetParsedNoneModeBlockRpcResult);\n              if (!('error' in _res3)) {\n                _context64.next = 16;\n                break;\n              }\n              throw _res3.error;\n            case 16:\n              return _context64.abrupt(\"return\", _res3.result);\n            case 17:\n              _res4 = create(unsafeRes, GetParsedBlockRpcResult);\n              if (!('error' in _res4)) {\n                _context64.next = 20;\n                break;\n              }\n              throw _res4.error;\n            case 20:\n              return _context64.abrupt(\"return\", _res4.result);\n            case 21:\n              _context64.next = 26;\n              break;\n            case 23:\n              _context64.prev = 23;\n              _context64.t1 = _context64[\"catch\"](5);\n              throw new SolanaJSONRPCError(_context64.t1, 'failed to get block');\n            case 26:\n            case \"end\":\n              return _context64.stop();\n          }\n        }, _callee63, this, [[5, 23]]);\n      }));\n      function getParsedBlock(_x81, _x82) {\n        return _getParsedBlock.apply(this, arguments);\n      }\n      return getParsedBlock;\n    }()\n  }, {\n    key: \"getBlockProduction\",\n    value:\n    /*\n     * Returns recent block production information from the current or previous epoch\n     */\n    function () {\n      var _getBlockProduction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee64(configOrCommitment) {\n        var extra, commitment, c, rest, args, unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee64$(_context65) {\n          while (1) switch (_context65.prev = _context65.next) {\n            case 0:\n              if (typeof configOrCommitment === 'string') {\n                commitment = configOrCommitment;\n              } else if (configOrCommitment) {\n                c = configOrCommitment.commitment, rest = _objectWithoutProperties(configOrCommitment, _excluded3);\n                commitment = c;\n                extra = rest;\n              }\n              args = this._buildArgs([], commitment, 'base64', extra);\n              _context65.next = 4;\n              return this._rpcRequest('getBlockProduction', args);\n            case 4:\n              unsafeRes = _context65.sent;\n              res = create(unsafeRes, BlockProductionResponseStruct);\n              if (!('error' in res)) {\n                _context65.next = 8;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, 'failed to get block production information');\n            case 8:\n              return _context65.abrupt(\"return\", res.result);\n            case 9:\n            case \"end\":\n              return _context65.stop();\n          }\n        }, _callee64, this);\n      }));\n      function getBlockProduction(_x83) {\n        return _getBlockProduction.apply(this, arguments);\n      }\n      return getBlockProduction;\n    }()\n    /**\n     * Fetch a confirmed or finalized transaction from the cluster.\n     *\n     * @deprecated Instead, call `getTransaction` using a\n     * `GetVersionedTransactionConfig` by setting the\n     * `maxSupportedTransactionVersion` property.\n     */\n  }, {\n    key: \"getTransaction\",\n    value:\n    /**\n     * Fetch a confirmed or finalized transaction from the cluster.\n     */\n    // eslint-disable-next-line no-dupe-class-members\n    function () {\n      var _getTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee65(signature, rawConfig) {\n        var _extractCommitmentFro20, commitment, config, args, unsafeRes, res, result;\n        return _regeneratorRuntime.wrap(function _callee65$(_context66) {\n          while (1) switch (_context66.prev = _context66.next) {\n            case 0:\n              _extractCommitmentFro20 = extractCommitmentFromConfig(rawConfig), commitment = _extractCommitmentFro20.commitment, config = _extractCommitmentFro20.config;\n              args = this._buildArgsAtLeastConfirmed([signature], commitment, undefined /* encoding */, config);\n              _context66.next = 4;\n              return this._rpcRequest('getTransaction', args);\n            case 4:\n              unsafeRes = _context66.sent;\n              res = create(unsafeRes, GetTransactionRpcResult);\n              if (!('error' in res)) {\n                _context66.next = 8;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n            case 8:\n              result = res.result;\n              if (result) {\n                _context66.next = 11;\n                break;\n              }\n              return _context66.abrupt(\"return\", result);\n            case 11:\n              return _context66.abrupt(\"return\", _objectSpread(_objectSpread({}, result), {}, {\n                transaction: _objectSpread(_objectSpread({}, result.transaction), {}, {\n                  message: versionedMessageFromResponse(result.version, result.transaction.message)\n                })\n              }));\n            case 12:\n            case \"end\":\n              return _context66.stop();\n          }\n        }, _callee65, this);\n      }));\n      function getTransaction(_x84, _x85) {\n        return _getTransaction.apply(this, arguments);\n      }\n      return getTransaction;\n    }()\n    /**\n     * Fetch parsed transaction details for a confirmed or finalized transaction\n     */\n  }, {\n    key: \"getParsedTransaction\",\n    value: function () {\n      var _getParsedTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee66(signature, commitmentOrConfig) {\n        var _extractCommitmentFro21, commitment, config, args, unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee66$(_context67) {\n          while (1) switch (_context67.prev = _context67.next) {\n            case 0:\n              _extractCommitmentFro21 = extractCommitmentFromConfig(commitmentOrConfig), commitment = _extractCommitmentFro21.commitment, config = _extractCommitmentFro21.config;\n              args = this._buildArgsAtLeastConfirmed([signature], commitment, 'jsonParsed', config);\n              _context67.next = 4;\n              return this._rpcRequest('getTransaction', args);\n            case 4:\n              unsafeRes = _context67.sent;\n              res = create(unsafeRes, GetParsedTransactionRpcResult);\n              if (!('error' in res)) {\n                _context67.next = 8;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n            case 8:\n              return _context67.abrupt(\"return\", res.result);\n            case 9:\n            case \"end\":\n              return _context67.stop();\n          }\n        }, _callee66, this);\n      }));\n      function getParsedTransaction(_x86, _x87) {\n        return _getParsedTransaction.apply(this, arguments);\n      }\n      return getParsedTransaction;\n    }()\n    /**\n     * Fetch parsed transaction details for a batch of confirmed transactions\n     */\n  }, {\n    key: \"getParsedTransactions\",\n    value: function () {\n      var _getParsedTransactions = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee67(signatures, commitmentOrConfig) {\n        var _this6 = this;\n        var _extractCommitmentFro22, commitment, config, batch, unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee67$(_context68) {\n          while (1) switch (_context68.prev = _context68.next) {\n            case 0:\n              _extractCommitmentFro22 = extractCommitmentFromConfig(commitmentOrConfig), commitment = _extractCommitmentFro22.commitment, config = _extractCommitmentFro22.config;\n              batch = signatures.map(function (signature) {\n                var args = _this6._buildArgsAtLeastConfirmed([signature], commitment, 'jsonParsed', config);\n                return {\n                  methodName: 'getTransaction',\n                  args: args\n                };\n              });\n              _context68.next = 4;\n              return this._rpcBatchRequest(batch);\n            case 4:\n              unsafeRes = _context68.sent;\n              res = unsafeRes.map(function (unsafeRes) {\n                var res = create(unsafeRes, GetParsedTransactionRpcResult);\n                if ('error' in res) {\n                  throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n                }\n                return res.result;\n              });\n              return _context68.abrupt(\"return\", res);\n            case 7:\n            case \"end\":\n              return _context68.stop();\n          }\n        }, _callee67, this);\n      }));\n      function getParsedTransactions(_x88, _x89) {\n        return _getParsedTransactions.apply(this, arguments);\n      }\n      return getParsedTransactions;\n    }()\n    /**\n     * Fetch transaction details for a batch of confirmed transactions.\n     * Similar to {@link getParsedTransactions} but returns a {@link TransactionResponse}.\n     *\n     * @deprecated Instead, call `getTransactions` using a\n     * `GetVersionedTransactionConfig` by setting the\n     * `maxSupportedTransactionVersion` property.\n     */\n  }, {\n    key: \"getTransactions\",\n    value:\n    /**\n     * Fetch transaction details for a batch of confirmed transactions.\n     * Similar to {@link getParsedTransactions} but returns a {@link\n     * VersionedTransactionResponse}.\n     */\n    // eslint-disable-next-line no-dupe-class-members\n    function () {\n      var _getTransactions = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee68(signatures, commitmentOrConfig) {\n        var _this7 = this;\n        var _extractCommitmentFro23, commitment, config, batch, unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee68$(_context69) {\n          while (1) switch (_context69.prev = _context69.next) {\n            case 0:\n              _extractCommitmentFro23 = extractCommitmentFromConfig(commitmentOrConfig), commitment = _extractCommitmentFro23.commitment, config = _extractCommitmentFro23.config;\n              batch = signatures.map(function (signature) {\n                var args = _this7._buildArgsAtLeastConfirmed([signature], commitment, undefined /* encoding */, config);\n                return {\n                  methodName: 'getTransaction',\n                  args: args\n                };\n              });\n              _context69.next = 4;\n              return this._rpcBatchRequest(batch);\n            case 4:\n              unsafeRes = _context69.sent;\n              res = unsafeRes.map(function (unsafeRes) {\n                var res = create(unsafeRes, GetTransactionRpcResult);\n                if ('error' in res) {\n                  throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n                }\n                var result = res.result;\n                if (!result) return result;\n                return _objectSpread(_objectSpread({}, result), {}, {\n                  transaction: _objectSpread(_objectSpread({}, result.transaction), {}, {\n                    message: versionedMessageFromResponse(result.version, result.transaction.message)\n                  })\n                });\n              });\n              return _context69.abrupt(\"return\", res);\n            case 7:\n            case \"end\":\n              return _context69.stop();\n          }\n        }, _callee68, this);\n      }));\n      function getTransactions(_x90, _x91) {\n        return _getTransactions.apply(this, arguments);\n      }\n      return getTransactions;\n    }()\n    /**\n     * Fetch a list of Transactions and transaction statuses from the cluster\n     * for a confirmed block.\n     *\n     * @deprecated Deprecated since v1.13.0. Please use {@link getBlock} instead.\n     */\n  }, {\n    key: \"getConfirmedBlock\",\n    value: function () {\n      var _getConfirmedBlock = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee69(slot, commitment) {\n        var args, unsafeRes, res, result, block;\n        return _regeneratorRuntime.wrap(function _callee69$(_context70) {\n          while (1) switch (_context70.prev = _context70.next) {\n            case 0:\n              args = this._buildArgsAtLeastConfirmed([slot], commitment);\n              _context70.next = 3;\n              return this._rpcRequest('getConfirmedBlock', args);\n            case 3:\n              unsafeRes = _context70.sent;\n              res = create(unsafeRes, GetConfirmedBlockRpcResult);\n              if (!('error' in res)) {\n                _context70.next = 7;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n            case 7:\n              result = res.result;\n              if (result) {\n                _context70.next = 10;\n                break;\n              }\n              throw new Error('Confirmed block ' + slot + ' not found');\n            case 10:\n              block = _objectSpread(_objectSpread({}, result), {}, {\n                transactions: result.transactions.map(function (_ref16) {\n                  var transaction = _ref16.transaction,\n                    meta = _ref16.meta;\n                  var message = new Message(transaction.message);\n                  return {\n                    meta: meta,\n                    transaction: _objectSpread(_objectSpread({}, transaction), {}, {\n                      message: message\n                    })\n                  };\n                })\n              });\n              return _context70.abrupt(\"return\", _objectSpread(_objectSpread({}, block), {}, {\n                transactions: block.transactions.map(function (_ref17) {\n                  var transaction = _ref17.transaction,\n                    meta = _ref17.meta;\n                  return {\n                    meta: meta,\n                    transaction: Transaction.populate(transaction.message, transaction.signatures)\n                  };\n                })\n              }));\n            case 12:\n            case \"end\":\n              return _context70.stop();\n          }\n        }, _callee69, this);\n      }));\n      function getConfirmedBlock(_x92, _x93) {\n        return _getConfirmedBlock.apply(this, arguments);\n      }\n      return getConfirmedBlock;\n    }()\n    /**\n     * Fetch confirmed blocks between two slots\n     */\n  }, {\n    key: \"getBlocks\",\n    value: function () {\n      var _getBlocks = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee70(startSlot, endSlot, commitment) {\n        var args, unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee70$(_context71) {\n          while (1) switch (_context71.prev = _context71.next) {\n            case 0:\n              args = this._buildArgsAtLeastConfirmed(endSlot !== undefined ? [startSlot, endSlot] : [startSlot], commitment);\n              _context71.next = 3;\n              return this._rpcRequest('getBlocks', args);\n            case 3:\n              unsafeRes = _context71.sent;\n              res = create(unsafeRes, jsonRpcResult(array(number())));\n              if (!('error' in res)) {\n                _context71.next = 7;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, 'failed to get blocks');\n            case 7:\n              return _context71.abrupt(\"return\", res.result);\n            case 8:\n            case \"end\":\n              return _context71.stop();\n          }\n        }, _callee70, this);\n      }));\n      function getBlocks(_x94, _x95, _x96) {\n        return _getBlocks.apply(this, arguments);\n      }\n      return getBlocks;\n    }()\n    /**\n     * Fetch a list of Signatures from the cluster for a block, excluding rewards\n     */\n  }, {\n    key: \"getBlockSignatures\",\n    value: function () {\n      var _getBlockSignatures = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee71(slot, commitment) {\n        var args, unsafeRes, res, result;\n        return _regeneratorRuntime.wrap(function _callee71$(_context72) {\n          while (1) switch (_context72.prev = _context72.next) {\n            case 0:\n              args = this._buildArgsAtLeastConfirmed([slot], commitment, undefined, {\n                transactionDetails: 'signatures',\n                rewards: false\n              });\n              _context72.next = 3;\n              return this._rpcRequest('getBlock', args);\n            case 3:\n              unsafeRes = _context72.sent;\n              res = create(unsafeRes, GetBlockSignaturesRpcResult);\n              if (!('error' in res)) {\n                _context72.next = 7;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, 'failed to get block');\n            case 7:\n              result = res.result;\n              if (result) {\n                _context72.next = 10;\n                break;\n              }\n              throw new Error('Block ' + slot + ' not found');\n            case 10:\n              return _context72.abrupt(\"return\", result);\n            case 11:\n            case \"end\":\n              return _context72.stop();\n          }\n        }, _callee71, this);\n      }));\n      function getBlockSignatures(_x97, _x98) {\n        return _getBlockSignatures.apply(this, arguments);\n      }\n      return getBlockSignatures;\n    }()\n    /**\n     * Fetch a list of Signatures from the cluster for a confirmed block, excluding rewards\n     *\n     * @deprecated Deprecated since Solana v1.8.0. Please use {@link getBlockSignatures} instead.\n     */\n  }, {\n    key: \"getConfirmedBlockSignatures\",\n    value: function () {\n      var _getConfirmedBlockSignatures = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee72(slot, commitment) {\n        var args, unsafeRes, res, result;\n        return _regeneratorRuntime.wrap(function _callee72$(_context73) {\n          while (1) switch (_context73.prev = _context73.next) {\n            case 0:\n              args = this._buildArgsAtLeastConfirmed([slot], commitment, undefined, {\n                transactionDetails: 'signatures',\n                rewards: false\n              });\n              _context73.next = 3;\n              return this._rpcRequest('getConfirmedBlock', args);\n            case 3:\n              unsafeRes = _context73.sent;\n              res = create(unsafeRes, GetBlockSignaturesRpcResult);\n              if (!('error' in res)) {\n                _context73.next = 7;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n            case 7:\n              result = res.result;\n              if (result) {\n                _context73.next = 10;\n                break;\n              }\n              throw new Error('Confirmed block ' + slot + ' not found');\n            case 10:\n              return _context73.abrupt(\"return\", result);\n            case 11:\n            case \"end\":\n              return _context73.stop();\n          }\n        }, _callee72, this);\n      }));\n      function getConfirmedBlockSignatures(_x99, _x100) {\n        return _getConfirmedBlockSignatures.apply(this, arguments);\n      }\n      return getConfirmedBlockSignatures;\n    }()\n    /**\n     * Fetch a transaction details for a confirmed transaction\n     *\n     * @deprecated Deprecated since Solana v1.8.0. Please use {@link getTransaction} instead.\n     */\n  }, {\n    key: \"getConfirmedTransaction\",\n    value: function () {\n      var _getConfirmedTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee73(signature, commitment) {\n        var args, unsafeRes, res, result, message, signatures;\n        return _regeneratorRuntime.wrap(function _callee73$(_context74) {\n          while (1) switch (_context74.prev = _context74.next) {\n            case 0:\n              args = this._buildArgsAtLeastConfirmed([signature], commitment);\n              _context74.next = 3;\n              return this._rpcRequest('getConfirmedTransaction', args);\n            case 3:\n              unsafeRes = _context74.sent;\n              res = create(unsafeRes, GetTransactionRpcResult);\n              if (!('error' in res)) {\n                _context74.next = 7;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n            case 7:\n              result = res.result;\n              if (result) {\n                _context74.next = 10;\n                break;\n              }\n              return _context74.abrupt(\"return\", result);\n            case 10:\n              message = new Message(result.transaction.message);\n              signatures = result.transaction.signatures;\n              return _context74.abrupt(\"return\", _objectSpread(_objectSpread({}, result), {}, {\n                transaction: Transaction.populate(message, signatures)\n              }));\n            case 13:\n            case \"end\":\n              return _context74.stop();\n          }\n        }, _callee73, this);\n      }));\n      function getConfirmedTransaction(_x101, _x102) {\n        return _getConfirmedTransaction.apply(this, arguments);\n      }\n      return getConfirmedTransaction;\n    }()\n    /**\n     * Fetch parsed transaction details for a confirmed transaction\n     *\n     * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransaction} instead.\n     */\n  }, {\n    key: \"getParsedConfirmedTransaction\",\n    value: function () {\n      var _getParsedConfirmedTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee74(signature, commitment) {\n        var args, unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee74$(_context75) {\n          while (1) switch (_context75.prev = _context75.next) {\n            case 0:\n              args = this._buildArgsAtLeastConfirmed([signature], commitment, 'jsonParsed');\n              _context75.next = 3;\n              return this._rpcRequest('getConfirmedTransaction', args);\n            case 3:\n              unsafeRes = _context75.sent;\n              res = create(unsafeRes, GetParsedTransactionRpcResult);\n              if (!('error' in res)) {\n                _context75.next = 7;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, 'failed to get confirmed transaction');\n            case 7:\n              return _context75.abrupt(\"return\", res.result);\n            case 8:\n            case \"end\":\n              return _context75.stop();\n          }\n        }, _callee74, this);\n      }));\n      function getParsedConfirmedTransaction(_x103, _x104) {\n        return _getParsedConfirmedTransaction.apply(this, arguments);\n      }\n      return getParsedConfirmedTransaction;\n    }()\n    /**\n     * Fetch parsed transaction details for a batch of confirmed transactions\n     *\n     * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransactions} instead.\n     */\n  }, {\n    key: \"getParsedConfirmedTransactions\",\n    value: function () {\n      var _getParsedConfirmedTransactions = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee75(signatures, commitment) {\n        var _this8 = this;\n        var batch, unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee75$(_context76) {\n          while (1) switch (_context76.prev = _context76.next) {\n            case 0:\n              batch = signatures.map(function (signature) {\n                var args = _this8._buildArgsAtLeastConfirmed([signature], commitment, 'jsonParsed');\n                return {\n                  methodName: 'getConfirmedTransaction',\n                  args: args\n                };\n              });\n              _context76.next = 3;\n              return this._rpcBatchRequest(batch);\n            case 3:\n              unsafeRes = _context76.sent;\n              res = unsafeRes.map(function (unsafeRes) {\n                var res = create(unsafeRes, GetParsedTransactionRpcResult);\n                if ('error' in res) {\n                  throw new SolanaJSONRPCError(res.error, 'failed to get confirmed transactions');\n                }\n                return res.result;\n              });\n              return _context76.abrupt(\"return\", res);\n            case 6:\n            case \"end\":\n              return _context76.stop();\n          }\n        }, _callee75, this);\n      }));\n      function getParsedConfirmedTransactions(_x105, _x106) {\n        return _getParsedConfirmedTransactions.apply(this, arguments);\n      }\n      return getParsedConfirmedTransactions;\n    }()\n    /**\n     * Fetch a list of all the confirmed signatures for transactions involving an address\n     * within a specified slot range. Max range allowed is 10,000 slots.\n     *\n     * @deprecated Deprecated since v1.3. Please use {@link getConfirmedSignaturesForAddress2} instead.\n     *\n     * @param address queried address\n     * @param startSlot start slot, inclusive\n     * @param endSlot end slot, inclusive\n     */\n  }, {\n    key: \"getConfirmedSignaturesForAddress\",\n    value: function () {\n      var _getConfirmedSignaturesForAddress = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee76(address, startSlot, endSlot) {\n        var options, firstAvailableBlock, block, highestConfirmedRoot, _block, confirmedSignatureInfo;\n        return _regeneratorRuntime.wrap(function _callee76$(_context77) {\n          while (1) switch (_context77.prev = _context77.next) {\n            case 0:\n              options = {};\n              _context77.next = 3;\n              return this.getFirstAvailableBlock();\n            case 3:\n              firstAvailableBlock = _context77.sent;\n            case 4:\n              if ('until' in options) {\n                _context77.next = 24;\n                break;\n              }\n              startSlot--;\n              if (!(startSlot <= 0 || startSlot < firstAvailableBlock)) {\n                _context77.next = 8;\n                break;\n              }\n              return _context77.abrupt(\"break\", 24);\n            case 8:\n              _context77.prev = 8;\n              _context77.next = 11;\n              return this.getConfirmedBlockSignatures(startSlot, 'finalized');\n            case 11:\n              block = _context77.sent;\n              if (block.signatures.length > 0) {\n                options.until = block.signatures[block.signatures.length - 1].toString();\n              }\n              _context77.next = 22;\n              break;\n            case 15:\n              _context77.prev = 15;\n              _context77.t0 = _context77[\"catch\"](8);\n              if (!(_context77.t0 instanceof Error && _context77.t0.message.includes('skipped'))) {\n                _context77.next = 21;\n                break;\n              }\n              return _context77.abrupt(\"continue\", 4);\n            case 21:\n              throw _context77.t0;\n            case 22:\n              _context77.next = 4;\n              break;\n            case 24:\n              _context77.next = 26;\n              return this.getSlot('finalized');\n            case 26:\n              highestConfirmedRoot = _context77.sent;\n            case 27:\n              if ('before' in options) {\n                _context77.next = 47;\n                break;\n              }\n              endSlot++;\n              if (!(endSlot > highestConfirmedRoot)) {\n                _context77.next = 31;\n                break;\n              }\n              return _context77.abrupt(\"break\", 47);\n            case 31:\n              _context77.prev = 31;\n              _context77.next = 34;\n              return this.getConfirmedBlockSignatures(endSlot);\n            case 34:\n              _block = _context77.sent;\n              if (_block.signatures.length > 0) {\n                options.before = _block.signatures[_block.signatures.length - 1].toString();\n              }\n              _context77.next = 45;\n              break;\n            case 38:\n              _context77.prev = 38;\n              _context77.t1 = _context77[\"catch\"](31);\n              if (!(_context77.t1 instanceof Error && _context77.t1.message.includes('skipped'))) {\n                _context77.next = 44;\n                break;\n              }\n              return _context77.abrupt(\"continue\", 27);\n            case 44:\n              throw _context77.t1;\n            case 45:\n              _context77.next = 27;\n              break;\n            case 47:\n              _context77.next = 49;\n              return this.getConfirmedSignaturesForAddress2(address, options);\n            case 49:\n              confirmedSignatureInfo = _context77.sent;\n              return _context77.abrupt(\"return\", confirmedSignatureInfo.map(function (info) {\n                return info.signature;\n              }));\n            case 51:\n            case \"end\":\n              return _context77.stop();\n          }\n        }, _callee76, this, [[8, 15], [31, 38]]);\n      }));\n      function getConfirmedSignaturesForAddress(_x107, _x108, _x109) {\n        return _getConfirmedSignaturesForAddress.apply(this, arguments);\n      }\n      return getConfirmedSignaturesForAddress;\n    }()\n    /**\n     * Returns confirmed signatures for transactions involving an\n     * address backwards in time from the provided signature or most recent confirmed block\n     *\n     *\n     * @param address queried address\n     * @param options\n     */\n  }, {\n    key: \"getConfirmedSignaturesForAddress2\",\n    value: function () {\n      var _getConfirmedSignaturesForAddress2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee77(address, options, commitment) {\n        var args, unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee77$(_context78) {\n          while (1) switch (_context78.prev = _context78.next) {\n            case 0:\n              args = this._buildArgsAtLeastConfirmed([address.toBase58()], commitment, undefined, options);\n              _context78.next = 3;\n              return this._rpcRequest('getConfirmedSignaturesForAddress2', args);\n            case 3:\n              unsafeRes = _context78.sent;\n              res = create(unsafeRes, GetConfirmedSignaturesForAddress2RpcResult);\n              if (!('error' in res)) {\n                _context78.next = 7;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, 'failed to get confirmed signatures for address');\n            case 7:\n              return _context78.abrupt(\"return\", res.result);\n            case 8:\n            case \"end\":\n              return _context78.stop();\n          }\n        }, _callee77, this);\n      }));\n      function getConfirmedSignaturesForAddress2(_x110, _x111, _x112) {\n        return _getConfirmedSignaturesForAddress2.apply(this, arguments);\n      }\n      return getConfirmedSignaturesForAddress2;\n    }()\n    /**\n     * Returns confirmed signatures for transactions involving an\n     * address backwards in time from the provided signature or most recent confirmed block\n     *\n     *\n     * @param address queried address\n     * @param options\n     */\n  }, {\n    key: \"getSignaturesForAddress\",\n    value: function () {\n      var _getSignaturesForAddress = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee78(address, options, commitment) {\n        var args, unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee78$(_context79) {\n          while (1) switch (_context79.prev = _context79.next) {\n            case 0:\n              args = this._buildArgsAtLeastConfirmed([address.toBase58()], commitment, undefined, options);\n              _context79.next = 3;\n              return this._rpcRequest('getSignaturesForAddress', args);\n            case 3:\n              unsafeRes = _context79.sent;\n              res = create(unsafeRes, GetSignaturesForAddressRpcResult);\n              if (!('error' in res)) {\n                _context79.next = 7;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, 'failed to get signatures for address');\n            case 7:\n              return _context79.abrupt(\"return\", res.result);\n            case 8:\n            case \"end\":\n              return _context79.stop();\n          }\n        }, _callee78, this);\n      }));\n      function getSignaturesForAddress(_x113, _x114, _x115) {\n        return _getSignaturesForAddress.apply(this, arguments);\n      }\n      return getSignaturesForAddress;\n    }()\n  }, {\n    key: \"getAddressLookupTable\",\n    value: function () {\n      var _getAddressLookupTable = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee79(accountKey, config) {\n        var _yield$this$getAccoun, context, accountInfo, value;\n        return _regeneratorRuntime.wrap(function _callee79$(_context80) {\n          while (1) switch (_context80.prev = _context80.next) {\n            case 0:\n              _context80.next = 2;\n              return this.getAccountInfoAndContext(accountKey, config);\n            case 2:\n              _yield$this$getAccoun = _context80.sent;\n              context = _yield$this$getAccoun.context;\n              accountInfo = _yield$this$getAccoun.value;\n              value = null;\n              if (accountInfo !== null) {\n                value = new AddressLookupTableAccount({\n                  key: accountKey,\n                  state: AddressLookupTableAccount.deserialize(accountInfo.data)\n                });\n              }\n              return _context80.abrupt(\"return\", {\n                context: context,\n                value: value\n              });\n            case 8:\n            case \"end\":\n              return _context80.stop();\n          }\n        }, _callee79, this);\n      }));\n      function getAddressLookupTable(_x116, _x117) {\n        return _getAddressLookupTable.apply(this, arguments);\n      }\n      return getAddressLookupTable;\n    }()\n    /**\n     * Fetch the contents of a Nonce account from the cluster, return with context\n     */\n  }, {\n    key: \"getNonceAndContext\",\n    value: function () {\n      var _getNonceAndContext = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee80(nonceAccount, commitmentOrConfig) {\n        var _yield$this$getAccoun2, context, accountInfo, value;\n        return _regeneratorRuntime.wrap(function _callee80$(_context81) {\n          while (1) switch (_context81.prev = _context81.next) {\n            case 0:\n              _context81.next = 2;\n              return this.getAccountInfoAndContext(nonceAccount, commitmentOrConfig);\n            case 2:\n              _yield$this$getAccoun2 = _context81.sent;\n              context = _yield$this$getAccoun2.context;\n              accountInfo = _yield$this$getAccoun2.value;\n              value = null;\n              if (accountInfo !== null) {\n                value = NonceAccount.fromAccountData(accountInfo.data);\n              }\n              return _context81.abrupt(\"return\", {\n                context: context,\n                value: value\n              });\n            case 8:\n            case \"end\":\n              return _context81.stop();\n          }\n        }, _callee80, this);\n      }));\n      function getNonceAndContext(_x118, _x119) {\n        return _getNonceAndContext.apply(this, arguments);\n      }\n      return getNonceAndContext;\n    }()\n    /**\n     * Fetch the contents of a Nonce account from the cluster\n     */\n  }, {\n    key: \"getNonce\",\n    value: function () {\n      var _getNonce = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee81(nonceAccount, commitmentOrConfig) {\n        return _regeneratorRuntime.wrap(function _callee81$(_context82) {\n          while (1) switch (_context82.prev = _context82.next) {\n            case 0:\n              _context82.next = 2;\n              return this.getNonceAndContext(nonceAccount, commitmentOrConfig).then(function (x) {\n                return x.value;\n              })[\"catch\"](function (e) {\n                throw new Error('failed to get nonce for account ' + nonceAccount.toBase58() + ': ' + e);\n              });\n            case 2:\n              return _context82.abrupt(\"return\", _context82.sent);\n            case 3:\n            case \"end\":\n              return _context82.stop();\n          }\n        }, _callee81, this);\n      }));\n      function getNonce(_x120, _x121) {\n        return _getNonce.apply(this, arguments);\n      }\n      return getNonce;\n    }()\n    /**\n     * Request an allocation of lamports to the specified address\n     *\n     * ```typescript\n     * import { Connection, PublicKey, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\n     *\n     * (async () => {\n     *   const connection = new Connection(\"https://api.testnet.solana.com\", \"confirmed\");\n     *   const myAddress = new PublicKey(\"2nr1bHFT86W9tGnyvmYW4vcHKsQB3sVQfnddasz4kExM\");\n     *   const signature = await connection.requestAirdrop(myAddress, LAMPORTS_PER_SOL);\n     *   await connection.confirmTransaction(signature);\n     * })();\n     * ```\n     */\n  }, {\n    key: \"requestAirdrop\",\n    value: function () {\n      var _requestAirdrop = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee82(to, lamports) {\n        var unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee82$(_context83) {\n          while (1) switch (_context83.prev = _context83.next) {\n            case 0:\n              _context83.next = 2;\n              return this._rpcRequest('requestAirdrop', [to.toBase58(), lamports]);\n            case 2:\n              unsafeRes = _context83.sent;\n              res = create(unsafeRes, RequestAirdropRpcResult);\n              if (!('error' in res)) {\n                _context83.next = 6;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, \"airdrop to \".concat(to.toBase58(), \" failed\"));\n            case 6:\n              return _context83.abrupt(\"return\", res.result);\n            case 7:\n            case \"end\":\n              return _context83.stop();\n          }\n        }, _callee82, this);\n      }));\n      function requestAirdrop(_x122, _x123) {\n        return _requestAirdrop.apply(this, arguments);\n      }\n      return requestAirdrop;\n    }()\n    /**\n     * @internal\n     */\n  }, {\n    key: \"_blockhashWithExpiryBlockHeight\",\n    value: function () {\n      var _blockhashWithExpiryBlockHeight2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee83(disableCache) {\n        var timeSinceFetch, expired;\n        return _regeneratorRuntime.wrap(function _callee83$(_context84) {\n          while (1) switch (_context84.prev = _context84.next) {\n            case 0:\n              if (disableCache) {\n                _context84.next = 10;\n                break;\n              }\n            case 1:\n              if (!this._pollingBlockhash) {\n                _context84.next = 6;\n                break;\n              }\n              _context84.next = 4;\n              return sleep(100);\n            case 4:\n              _context84.next = 1;\n              break;\n            case 6:\n              timeSinceFetch = Date.now() - this._blockhashInfo.lastFetch;\n              expired = timeSinceFetch >= BLOCKHASH_CACHE_TIMEOUT_MS;\n              if (!(this._blockhashInfo.latestBlockhash !== null && !expired)) {\n                _context84.next = 10;\n                break;\n              }\n              return _context84.abrupt(\"return\", this._blockhashInfo.latestBlockhash);\n            case 10:\n              _context84.next = 12;\n              return this._pollNewBlockhash();\n            case 12:\n              return _context84.abrupt(\"return\", _context84.sent);\n            case 13:\n            case \"end\":\n              return _context84.stop();\n          }\n        }, _callee83, this);\n      }));\n      function _blockhashWithExpiryBlockHeight(_x124) {\n        return _blockhashWithExpiryBlockHeight2.apply(this, arguments);\n      }\n      return _blockhashWithExpiryBlockHeight;\n    }()\n    /**\n     * @internal\n     */\n  }, {\n    key: \"_pollNewBlockhash\",\n    value: function () {\n      var _pollNewBlockhash2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee84() {\n        var startTime, cachedLatestBlockhash, cachedBlockhash, i, latestBlockhash;\n        return _regeneratorRuntime.wrap(function _callee84$(_context85) {\n          while (1) switch (_context85.prev = _context85.next) {\n            case 0:\n              this._pollingBlockhash = true;\n              _context85.prev = 1;\n              startTime = Date.now();\n              cachedLatestBlockhash = this._blockhashInfo.latestBlockhash;\n              cachedBlockhash = cachedLatestBlockhash ? cachedLatestBlockhash.blockhash : null;\n              i = 0;\n            case 6:\n              if (!(i < 50)) {\n                _context85.next = 18;\n                break;\n              }\n              _context85.next = 9;\n              return this.getLatestBlockhash('finalized');\n            case 9:\n              latestBlockhash = _context85.sent;\n              if (!(cachedBlockhash !== latestBlockhash.blockhash)) {\n                _context85.next = 13;\n                break;\n              }\n              this._blockhashInfo = {\n                latestBlockhash: latestBlockhash,\n                lastFetch: Date.now(),\n                transactionSignatures: [],\n                simulatedSignatures: []\n              };\n              return _context85.abrupt(\"return\", latestBlockhash);\n            case 13:\n              _context85.next = 15;\n              return sleep(MS_PER_SLOT / 2);\n            case 15:\n              i++;\n              _context85.next = 6;\n              break;\n            case 18:\n              throw new Error(\"Unable to obtain a new blockhash after \".concat(Date.now() - startTime, \"ms\"));\n            case 19:\n              _context85.prev = 19;\n              this._pollingBlockhash = false;\n              return _context85.finish(19);\n            case 22:\n            case \"end\":\n              return _context85.stop();\n          }\n        }, _callee84, this, [[1,, 19, 22]]);\n      }));\n      function _pollNewBlockhash() {\n        return _pollNewBlockhash2.apply(this, arguments);\n      }\n      return _pollNewBlockhash;\n    }()\n    /**\n     * get the stake minimum delegation\n     */\n  }, {\n    key: \"getStakeMinimumDelegation\",\n    value: function () {\n      var _getStakeMinimumDelegation = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee85(config) {\n        var _extractCommitmentFro24, commitment, configArg, args, unsafeRes, res;\n        return _regeneratorRuntime.wrap(function _callee85$(_context86) {\n          while (1) switch (_context86.prev = _context86.next) {\n            case 0:\n              _extractCommitmentFro24 = extractCommitmentFromConfig(config), commitment = _extractCommitmentFro24.commitment, configArg = _extractCommitmentFro24.config;\n              args = this._buildArgs([], commitment, 'base64', configArg);\n              _context86.next = 4;\n              return this._rpcRequest('getStakeMinimumDelegation', args);\n            case 4:\n              unsafeRes = _context86.sent;\n              res = create(unsafeRes, jsonRpcResultAndContext(number()));\n              if (!('error' in res)) {\n                _context86.next = 8;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, \"failed to get stake minimum delegation\");\n            case 8:\n              return _context86.abrupt(\"return\", res.result);\n            case 9:\n            case \"end\":\n              return _context86.stop();\n          }\n        }, _callee85, this);\n      }));\n      function getStakeMinimumDelegation(_x125) {\n        return _getStakeMinimumDelegation.apply(this, arguments);\n      }\n      return getStakeMinimumDelegation;\n    }()\n    /**\n     * Simulate a transaction\n     *\n     * @deprecated Instead, call {@link simulateTransaction} with {@link\n     * VersionedTransaction} and {@link SimulateTransactionConfig} parameters\n     */\n  }, {\n    key: \"simulateTransaction\",\n    value:\n    /**\n     * Simulate a transaction\n     */\n    // eslint-disable-next-line no-dupe-class-members\n    function () {\n      var _simulateTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee86(transactionOrMessage, configOrSigners, includeAccounts) {\n        var versionedTx, _wireTransaction, _encodedTransaction, _config2, _args87, _unsafeRes, _res5, transaction, originalTx, signers, _transaction, disableCache, _transaction2, latestBlockhash, _signature, message, signData, wireTransaction, encodedTransaction, config, addresses, args, unsafeRes, res, _logs, traceIndent, logTrace;\n        return _regeneratorRuntime.wrap(function _callee86$(_context87) {\n          while (1) switch (_context87.prev = _context87.next) {\n            case 0:\n              if (!('message' in transactionOrMessage)) {\n                _context87.next = 17;\n                break;\n              }\n              versionedTx = transactionOrMessage;\n              _wireTransaction = versionedTx.serialize();\n              _encodedTransaction = Buffer.from(_wireTransaction).toString('base64');\n              if (!(Array.isArray(configOrSigners) || includeAccounts !== undefined)) {\n                _context87.next = 6;\n                break;\n              }\n              throw new Error('Invalid arguments');\n            case 6:\n              _config2 = configOrSigners || {};\n              _config2.encoding = 'base64';\n              if (!('commitment' in _config2)) {\n                _config2.commitment = this.commitment;\n              }\n              _args87 = [_encodedTransaction, _config2];\n              _context87.next = 12;\n              return this._rpcRequest('simulateTransaction', _args87);\n            case 12:\n              _unsafeRes = _context87.sent;\n              _res5 = create(_unsafeRes, SimulatedTransactionResponseStruct);\n              if (!('error' in _res5)) {\n                _context87.next = 16;\n                break;\n              }\n              throw new Error('failed to simulate transaction: ' + _res5.error.message);\n            case 16:\n              return _context87.abrupt(\"return\", _res5.result);\n            case 17:\n              if (transactionOrMessage instanceof Transaction) {\n                originalTx = transactionOrMessage;\n                transaction = new Transaction();\n                transaction.feePayer = originalTx.feePayer;\n                transaction.instructions = transactionOrMessage.instructions;\n                transaction.nonceInfo = originalTx.nonceInfo;\n                transaction.signatures = originalTx.signatures;\n              } else {\n                transaction = Transaction.populate(transactionOrMessage);\n                // HACK: this function relies on mutating the populated transaction\n                transaction._message = transaction._json = undefined;\n              }\n              if (!(configOrSigners !== undefined && !Array.isArray(configOrSigners))) {\n                _context87.next = 20;\n                break;\n              }\n              throw new Error('Invalid arguments');\n            case 20:\n              signers = configOrSigners;\n              if (!(transaction.nonceInfo && signers)) {\n                _context87.next = 25;\n                break;\n              }\n              (_transaction = transaction).sign.apply(_transaction, _toConsumableArray(signers));\n              _context87.next = 45;\n              break;\n            case 25:\n              disableCache = this._disableBlockhashCaching;\n            case 26:\n              _context87.next = 28;\n              return this._blockhashWithExpiryBlockHeight(disableCache);\n            case 28:\n              latestBlockhash = _context87.sent;\n              transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n              transaction.recentBlockhash = latestBlockhash.blockhash;\n              if (signers) {\n                _context87.next = 33;\n                break;\n              }\n              return _context87.abrupt(\"break\", 45);\n            case 33:\n              (_transaction2 = transaction).sign.apply(_transaction2, _toConsumableArray(signers));\n              if (transaction.signature) {\n                _context87.next = 36;\n                break;\n              }\n              throw new Error('!signature');\n            case 36:\n              _signature = transaction.signature.toString('base64');\n              if (!(!this._blockhashInfo.simulatedSignatures.includes(_signature) && !this._blockhashInfo.transactionSignatures.includes(_signature))) {\n                _context87.next = 42;\n                break;\n              }\n              // The signature of this transaction has not been seen before with the\n              // current recentBlockhash, all done. Let's break\n              this._blockhashInfo.simulatedSignatures.push(_signature);\n              return _context87.abrupt(\"break\", 45);\n            case 42:\n              // This transaction would be treated as duplicate (its derived signature\n              // matched to one of already recorded signatures).\n              // So, we must fetch a new blockhash for a different signature by disabling\n              // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n              disableCache = true;\n            case 43:\n              _context87.next = 26;\n              break;\n            case 45:\n              message = transaction._compile();\n              signData = message.serialize();\n              wireTransaction = transaction._serialize(signData);\n              encodedTransaction = wireTransaction.toString('base64');\n              config = {\n                encoding: 'base64',\n                commitment: this.commitment\n              };\n              if (includeAccounts) {\n                addresses = (Array.isArray(includeAccounts) ? includeAccounts : message.nonProgramIds()).map(function (key) {\n                  return key.toBase58();\n                });\n                config['accounts'] = {\n                  encoding: 'base64',\n                  addresses: addresses\n                };\n              }\n              if (signers) {\n                config.sigVerify = true;\n              }\n              args = [encodedTransaction, config];\n              _context87.next = 55;\n              return this._rpcRequest('simulateTransaction', args);\n            case 55:\n              unsafeRes = _context87.sent;\n              res = create(unsafeRes, SimulatedTransactionResponseStruct);\n              if (!('error' in res)) {\n                _context87.next = 60;\n                break;\n              }\n              if ('data' in res.error) {\n                _logs = res.error.data.logs;\n                if (_logs && Array.isArray(_logs)) {\n                  traceIndent = '\\n    ';\n                  logTrace = traceIndent + _logs.join(traceIndent);\n                  console.error(res.error.message, logTrace);\n                }\n              }\n              throw new SendTransactionError('failed to simulate transaction: ' + res.error.message, _logs);\n            case 60:\n              return _context87.abrupt(\"return\", res.result);\n            case 61:\n            case \"end\":\n              return _context87.stop();\n          }\n        }, _callee86, this);\n      }));\n      function simulateTransaction(_x126, _x127, _x128) {\n        return _simulateTransaction.apply(this, arguments);\n      }\n      return simulateTransaction;\n    }()\n    /**\n     * Sign and send a transaction\n     *\n     * @deprecated Instead, call {@link sendTransaction} with a {@link\n     * VersionedTransaction}\n     */\n  }, {\n    key: \"sendTransaction\",\n    value:\n    /**\n     * Sign and send a transaction\n     */\n    // eslint-disable-next-line no-dupe-class-members\n    function () {\n      var _sendTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee87(transaction, signersOrOptions, options) {\n        var _wireTransaction2, signers, disableCache, latestBlockhash, _signature2, wireTransaction;\n        return _regeneratorRuntime.wrap(function _callee87$(_context88) {\n          while (1) switch (_context88.prev = _context88.next) {\n            case 0:\n              if (!('version' in transaction)) {\n                _context88.next = 7;\n                break;\n              }\n              if (!(signersOrOptions && Array.isArray(signersOrOptions))) {\n                _context88.next = 3;\n                break;\n              }\n              throw new Error('Invalid arguments');\n            case 3:\n              _wireTransaction2 = transaction.serialize();\n              _context88.next = 6;\n              return this.sendRawTransaction(_wireTransaction2, signersOrOptions);\n            case 6:\n              return _context88.abrupt(\"return\", _context88.sent);\n            case 7:\n              if (!(signersOrOptions === undefined || !Array.isArray(signersOrOptions))) {\n                _context88.next = 9;\n                break;\n              }\n              throw new Error('Invalid arguments');\n            case 9:\n              signers = signersOrOptions;\n              if (!transaction.nonceInfo) {\n                _context88.next = 14;\n                break;\n              }\n              transaction.sign.apply(transaction, _toConsumableArray(signers));\n              _context88.next = 32;\n              break;\n            case 14:\n              disableCache = this._disableBlockhashCaching;\n            case 15:\n              _context88.next = 17;\n              return this._blockhashWithExpiryBlockHeight(disableCache);\n            case 17:\n              latestBlockhash = _context88.sent;\n              transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n              transaction.recentBlockhash = latestBlockhash.blockhash;\n              transaction.sign.apply(transaction, _toConsumableArray(signers));\n              if (transaction.signature) {\n                _context88.next = 23;\n                break;\n              }\n              throw new Error('!signature');\n            case 23:\n              _signature2 = transaction.signature.toString('base64');\n              if (this._blockhashInfo.transactionSignatures.includes(_signature2)) {\n                _context88.next = 29;\n                break;\n              }\n              // The signature of this transaction has not been seen before with the\n              // current recentBlockhash, all done. Let's break\n              this._blockhashInfo.transactionSignatures.push(_signature2);\n              return _context88.abrupt(\"break\", 32);\n            case 29:\n              // This transaction would be treated as duplicate (its derived signature\n              // matched to one of already recorded signatures).\n              // So, we must fetch a new blockhash for a different signature by disabling\n              // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n              disableCache = true;\n            case 30:\n              _context88.next = 15;\n              break;\n            case 32:\n              wireTransaction = transaction.serialize();\n              _context88.next = 35;\n              return this.sendRawTransaction(wireTransaction, options);\n            case 35:\n              return _context88.abrupt(\"return\", _context88.sent);\n            case 36:\n            case \"end\":\n              return _context88.stop();\n          }\n        }, _callee87, this);\n      }));\n      function sendTransaction(_x129, _x130, _x131) {\n        return _sendTransaction.apply(this, arguments);\n      }\n      return sendTransaction;\n    }()\n    /**\n     * Send a transaction that has already been signed and serialized into the\n     * wire format\n     */\n  }, {\n    key: \"sendRawTransaction\",\n    value: function () {\n      var _sendRawTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee88(rawTransaction, options) {\n        var encodedTransaction, result;\n        return _regeneratorRuntime.wrap(function _callee88$(_context89) {\n          while (1) switch (_context89.prev = _context89.next) {\n            case 0:\n              encodedTransaction = toBuffer(rawTransaction).toString('base64');\n              _context89.next = 3;\n              return this.sendEncodedTransaction(encodedTransaction, options);\n            case 3:\n              result = _context89.sent;\n              return _context89.abrupt(\"return\", result);\n            case 5:\n            case \"end\":\n              return _context89.stop();\n          }\n        }, _callee88, this);\n      }));\n      function sendRawTransaction(_x132, _x133) {\n        return _sendRawTransaction.apply(this, arguments);\n      }\n      return sendRawTransaction;\n    }()\n    /**\n     * Send a transaction that has already been signed, serialized into the\n     * wire format, and encoded as a base64 string\n     */\n  }, {\n    key: \"sendEncodedTransaction\",\n    value: function () {\n      var _sendEncodedTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee89(encodedTransaction, options) {\n        var config, skipPreflight, preflightCommitment, args, unsafeRes, res, _logs2;\n        return _regeneratorRuntime.wrap(function _callee89$(_context90) {\n          while (1) switch (_context90.prev = _context90.next) {\n            case 0:\n              config = {\n                encoding: 'base64'\n              };\n              skipPreflight = options && options.skipPreflight;\n              preflightCommitment = options && options.preflightCommitment || this.commitment;\n              if (options && options.maxRetries != null) {\n                config.maxRetries = options.maxRetries;\n              }\n              if (options && options.minContextSlot != null) {\n                config.minContextSlot = options.minContextSlot;\n              }\n              if (skipPreflight) {\n                config.skipPreflight = skipPreflight;\n              }\n              if (preflightCommitment) {\n                config.preflightCommitment = preflightCommitment;\n              }\n              args = [encodedTransaction, config];\n              _context90.next = 10;\n              return this._rpcRequest('sendTransaction', args);\n            case 10:\n              unsafeRes = _context90.sent;\n              res = create(unsafeRes, SendTransactionRpcResult);\n              if (!('error' in res)) {\n                _context90.next = 15;\n                break;\n              }\n              if ('data' in res.error) {\n                _logs2 = res.error.data.logs;\n              }\n              throw new SendTransactionError('failed to send transaction: ' + res.error.message, _logs2);\n            case 15:\n              return _context90.abrupt(\"return\", res.result);\n            case 16:\n            case \"end\":\n              return _context90.stop();\n          }\n        }, _callee89, this);\n      }));\n      function sendEncodedTransaction(_x134, _x135) {\n        return _sendEncodedTransaction.apply(this, arguments);\n      }\n      return sendEncodedTransaction;\n    }()\n    /**\n     * @internal\n     */\n  }, {\n    key: \"_wsOnOpen\",\n    value: function _wsOnOpen() {\n      var _this9 = this;\n      this._rpcWebSocketConnected = true;\n      this._rpcWebSocketHeartbeat = setInterval(function () {\n        // Ping server every 5s to prevent idle timeouts\n        _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee90() {\n          return _regeneratorRuntime.wrap(function _callee90$(_context91) {\n            while (1) switch (_context91.prev = _context91.next) {\n              case 0:\n                _context91.prev = 0;\n                _context91.next = 3;\n                return _this9._rpcWebSocket.notify('ping');\n              case 3:\n                _context91.next = 7;\n                break;\n              case 5:\n                _context91.prev = 5;\n                _context91.t0 = _context91[\"catch\"](0);\n              case 7:\n              case \"end\":\n                return _context91.stop();\n            }\n          }, _callee90, null, [[0, 5]]);\n        }))();\n      }, 5000);\n      this._updateSubscriptions();\n    }\n\n    /**\n     * @internal\n     */\n  }, {\n    key: \"_wsOnError\",\n    value: function _wsOnError(err) {\n      this._rpcWebSocketConnected = false;\n      console.error('ws error:', err.message);\n    }\n\n    /**\n     * @internal\n     */\n  }, {\n    key: \"_wsOnClose\",\n    value: function _wsOnClose(code) {\n      var _this10 = this;\n      this._rpcWebSocketConnected = false;\n      this._rpcWebSocketGeneration = (this._rpcWebSocketGeneration + 1) % Number.MAX_SAFE_INTEGER;\n      if (this._rpcWebSocketIdleTimeout) {\n        clearTimeout(this._rpcWebSocketIdleTimeout);\n        this._rpcWebSocketIdleTimeout = null;\n      }\n      if (this._rpcWebSocketHeartbeat) {\n        clearInterval(this._rpcWebSocketHeartbeat);\n        this._rpcWebSocketHeartbeat = null;\n      }\n      if (code === 1000) {\n        // explicit close, check if any subscriptions have been made since close\n        this._updateSubscriptions();\n        return;\n      }\n\n      // implicit close, prepare subscriptions for auto-reconnect\n      this._subscriptionCallbacksByServerSubscriptionId = {};\n      Object.entries(this._subscriptionsByHash).forEach(function (_ref19) {\n        var _ref20 = _slicedToArray(_ref19, 2),\n          hash = _ref20[0],\n          subscription = _ref20[1];\n        _this10._setSubscription(hash, _objectSpread(_objectSpread({}, subscription), {}, {\n          state: 'pending'\n        }));\n      });\n    }\n\n    /**\n     * @internal\n     */\n  }, {\n    key: \"_setSubscription\",\n    value: function _setSubscription(hash, nextSubscription) {\n      var _this$_subscriptionsB;\n      var prevState = (_this$_subscriptionsB = this._subscriptionsByHash[hash]) === null || _this$_subscriptionsB === void 0 ? void 0 : _this$_subscriptionsB.state;\n      this._subscriptionsByHash[hash] = nextSubscription;\n      if (prevState !== nextSubscription.state) {\n        var stateChangeCallbacks = this._subscriptionStateChangeCallbacksByHash[hash];\n        if (stateChangeCallbacks) {\n          stateChangeCallbacks.forEach(function (cb) {\n            try {\n              cb(nextSubscription.state);\n              // eslint-disable-next-line no-empty\n            } catch (_unused2) {}\n          });\n        }\n      }\n    }\n\n    /**\n     * @internal\n     */\n  }, {\n    key: \"_onSubscriptionStateChange\",\n    value: function _onSubscriptionStateChange(clientSubscriptionId, callback) {\n      var _this$_subscriptionSt,\n        _this11 = this;\n      var hash = this._subscriptionHashByClientSubscriptionId[clientSubscriptionId];\n      if (hash == null) {\n        return function () {};\n      }\n      var stateChangeCallbacks = (_this$_subscriptionSt = this._subscriptionStateChangeCallbacksByHash)[hash] || (_this$_subscriptionSt[hash] = new Set());\n      stateChangeCallbacks.add(callback);\n      return function () {\n        stateChangeCallbacks[\"delete\"](callback);\n        if (stateChangeCallbacks.size === 0) {\n          delete _this11._subscriptionStateChangeCallbacksByHash[hash];\n        }\n      };\n    }\n\n    /**\n     * @internal\n     */\n  }, {\n    key: \"_updateSubscriptions\",\n    value: function () {\n      var _updateSubscriptions2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee94() {\n        var _this12 = this;\n        var activeWebSocketGeneration, isCurrentConnectionStillActive;\n        return _regeneratorRuntime.wrap(function _callee94$(_context95) {\n          while (1) switch (_context95.prev = _context95.next) {\n            case 0:\n              if (!(Object.keys(this._subscriptionsByHash).length === 0)) {\n                _context95.next = 3;\n                break;\n              }\n              if (this._rpcWebSocketConnected) {\n                this._rpcWebSocketConnected = false;\n                this._rpcWebSocketIdleTimeout = setTimeout(function () {\n                  _this12._rpcWebSocketIdleTimeout = null;\n                  try {\n                    _this12._rpcWebSocket.close();\n                  } catch (err) {\n                    // swallow error if socket has already been closed.\n                    if (err instanceof Error) {\n                      console.log(\"Error when closing socket connection: \".concat(err.message));\n                    }\n                  }\n                }, 500);\n              }\n              return _context95.abrupt(\"return\");\n            case 3:\n              if (this._rpcWebSocketIdleTimeout !== null) {\n                clearTimeout(this._rpcWebSocketIdleTimeout);\n                this._rpcWebSocketIdleTimeout = null;\n                this._rpcWebSocketConnected = true;\n              }\n              if (this._rpcWebSocketConnected) {\n                _context95.next = 7;\n                break;\n              }\n              this._rpcWebSocket.connect();\n              return _context95.abrupt(\"return\");\n            case 7:\n              activeWebSocketGeneration = this._rpcWebSocketGeneration;\n              isCurrentConnectionStillActive = function isCurrentConnectionStillActive() {\n                return activeWebSocketGeneration === _this12._rpcWebSocketGeneration;\n              };\n              _context95.next = 11;\n              return Promise.all(\n              // Don't be tempted to change this to `Object.entries`. We call\n              // `_updateSubscriptions` recursively when processing the state,\n              // so it's important that we look up the *current* version of\n              // each subscription, every time we process a hash.\n              Object.keys(this._subscriptionsByHash).map( /*#__PURE__*/function () {\n                var _ref21 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee93(hash) {\n                  var subscription;\n                  return _regeneratorRuntime.wrap(function _callee93$(_context94) {\n                    while (1) switch (_context94.prev = _context94.next) {\n                      case 0:\n                        subscription = _this12._subscriptionsByHash[hash];\n                        if (!(subscription === undefined)) {\n                          _context94.next = 3;\n                          break;\n                        }\n                        return _context94.abrupt(\"return\");\n                      case 3:\n                        _context94.t0 = subscription.state;\n                        _context94.next = _context94.t0 === 'pending' ? 6 : _context94.t0 === 'unsubscribed' ? 6 : _context94.t0 === 'subscribed' ? 15 : _context94.t0 === 'subscribing' ? 19 : _context94.t0 === 'unsubscribing' ? 19 : 20;\n                        break;\n                      case 6:\n                        if (!(subscription.callbacks.size === 0)) {\n                          _context94.next = 12;\n                          break;\n                        }\n                        /**\n                         * You can end up here when:\n                         *\n                         * - a subscription has recently unsubscribed\n                         *   without having new callbacks added to it\n                         *   while the unsubscribe was in flight, or\n                         * - when a pending subscription has its\n                         *   listeners removed before a request was\n                         *   sent to the server.\n                         *\n                         * Being that nobody is interested in this\n                         * subscription any longer, delete it.\n                         */\n                        delete _this12._subscriptionsByHash[hash];\n                        if (subscription.state === 'unsubscribed') {\n                          delete _this12._subscriptionCallbacksByServerSubscriptionId[subscription.serverSubscriptionId];\n                        }\n                        _context94.next = 11;\n                        return _this12._updateSubscriptions();\n                      case 11:\n                        return _context94.abrupt(\"return\");\n                      case 12:\n                        _context94.next = 14;\n                        return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee91() {\n                          var args, method, _serverSubscriptionId;\n                          return _regeneratorRuntime.wrap(function _callee91$(_context92) {\n                            while (1) switch (_context92.prev = _context92.next) {\n                              case 0:\n                                args = subscription.args, method = subscription.method;\n                                _context92.prev = 1;\n                                _this12._setSubscription(hash, _objectSpread(_objectSpread({}, subscription), {}, {\n                                  state: 'subscribing'\n                                }));\n                                _context92.next = 5;\n                                return _this12._rpcWebSocket.call(method, args);\n                              case 5:\n                                _serverSubscriptionId = _context92.sent;\n                                _this12._setSubscription(hash, _objectSpread(_objectSpread({}, subscription), {}, {\n                                  serverSubscriptionId: _serverSubscriptionId,\n                                  state: 'subscribed'\n                                }));\n                                _this12._subscriptionCallbacksByServerSubscriptionId[_serverSubscriptionId] = subscription.callbacks;\n                                _context92.next = 10;\n                                return _this12._updateSubscriptions();\n                              case 10:\n                                _context92.next = 20;\n                                break;\n                              case 12:\n                                _context92.prev = 12;\n                                _context92.t0 = _context92[\"catch\"](1);\n                                if (_context92.t0 instanceof Error) {\n                                  console.error(\"\".concat(method, \" error for argument\"), args, _context92.t0.message);\n                                }\n                                if (isCurrentConnectionStillActive()) {\n                                  _context92.next = 17;\n                                  break;\n                                }\n                                return _context92.abrupt(\"return\");\n                              case 17:\n                                // TODO: Maybe add an 'errored' state or a retry limit?\n                                _this12._setSubscription(hash, _objectSpread(_objectSpread({}, subscription), {}, {\n                                  state: 'pending'\n                                }));\n                                _context92.next = 20;\n                                return _this12._updateSubscriptions();\n                              case 20:\n                              case \"end\":\n                                return _context92.stop();\n                            }\n                          }, _callee91, null, [[1, 12]]);\n                        }))();\n                      case 14:\n                        return _context94.abrupt(\"break\", 20);\n                      case 15:\n                        if (!(subscription.callbacks.size === 0)) {\n                          _context94.next = 18;\n                          break;\n                        }\n                        _context94.next = 18;\n                        return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee92() {\n                          var serverSubscriptionId, unsubscribeMethod;\n                          return _regeneratorRuntime.wrap(function _callee92$(_context93) {\n                            while (1) switch (_context93.prev = _context93.next) {\n                              case 0:\n                                serverSubscriptionId = subscription.serverSubscriptionId, unsubscribeMethod = subscription.unsubscribeMethod;\n                                if (!_this12._subscriptionsAutoDisposedByRpc.has(serverSubscriptionId)) {\n                                  _context93.next = 5;\n                                  break;\n                                }\n                                /**\n                                 * Special case.\n                                 * If we're dealing with a subscription that has been auto-\n                                 * disposed by the RPC, then we can skip the RPC call to\n                                 * tear down the subscription here.\n                                 *\n                                 * NOTE: There is a proposal to eliminate this special case, here:\n                                 * https://github.com/solana-labs/solana/issues/18892\n                                 */\n                                _this12._subscriptionsAutoDisposedByRpc[\"delete\"](serverSubscriptionId);\n                                _context93.next = 21;\n                                break;\n                              case 5:\n                                _this12._setSubscription(hash, _objectSpread(_objectSpread({}, subscription), {}, {\n                                  state: 'unsubscribing'\n                                }));\n                                _this12._setSubscription(hash, _objectSpread(_objectSpread({}, subscription), {}, {\n                                  state: 'unsubscribing'\n                                }));\n                                _context93.prev = 7;\n                                _context93.next = 10;\n                                return _this12._rpcWebSocket.call(unsubscribeMethod, [serverSubscriptionId]);\n                              case 10:\n                                _context93.next = 21;\n                                break;\n                              case 12:\n                                _context93.prev = 12;\n                                _context93.t0 = _context93[\"catch\"](7);\n                                if (_context93.t0 instanceof Error) {\n                                  console.error(\"\".concat(unsubscribeMethod, \" error:\"), _context93.t0.message);\n                                }\n                                if (isCurrentConnectionStillActive()) {\n                                  _context93.next = 17;\n                                  break;\n                                }\n                                return _context93.abrupt(\"return\");\n                              case 17:\n                                // TODO: Maybe add an 'errored' state or a retry limit?\n                                _this12._setSubscription(hash, _objectSpread(_objectSpread({}, subscription), {}, {\n                                  state: 'subscribed'\n                                }));\n                                _context93.next = 20;\n                                return _this12._updateSubscriptions();\n                              case 20:\n                                return _context93.abrupt(\"return\");\n                              case 21:\n                                _this12._setSubscription(hash, _objectSpread(_objectSpread({}, subscription), {}, {\n                                  state: 'unsubscribed'\n                                }));\n                                _context93.next = 24;\n                                return _this12._updateSubscriptions();\n                              case 24:\n                              case \"end\":\n                                return _context93.stop();\n                            }\n                          }, _callee92, null, [[7, 12]]);\n                        }))();\n                      case 18:\n                        return _context94.abrupt(\"break\", 20);\n                      case 19:\n                        return _context94.abrupt(\"break\", 20);\n                      case 20:\n                      case \"end\":\n                        return _context94.stop();\n                    }\n                  }, _callee93);\n                }));\n                return function (_x136) {\n                  return _ref21.apply(this, arguments);\n                };\n              }()));\n            case 11:\n            case \"end\":\n              return _context95.stop();\n          }\n        }, _callee94, this);\n      }));\n      function _updateSubscriptions() {\n        return _updateSubscriptions2.apply(this, arguments);\n      }\n      return _updateSubscriptions;\n    }()\n    /**\n     * @internal\n     */\n  }, {\n    key: \"_handleServerNotification\",\n    value: function _handleServerNotification(serverSubscriptionId, callbackArgs) {\n      var callbacks = this._subscriptionCallbacksByServerSubscriptionId[serverSubscriptionId];\n      if (callbacks === undefined) {\n        return;\n      }\n      callbacks.forEach(function (cb) {\n        try {\n          cb.apply(void 0, _toConsumableArray(callbackArgs));\n        } catch (e) {\n          console.error(e);\n        }\n      });\n    }\n\n    /**\n     * @internal\n     */\n  }, {\n    key: \"_wsOnAccountNotification\",\n    value: function _wsOnAccountNotification(notification) {\n      var _create = create(notification, AccountNotificationResult),\n        result = _create.result,\n        subscription = _create.subscription;\n      this._handleServerNotification(subscription, [result.value, result.context]);\n    }\n\n    /**\n     * @internal\n     */\n  }, {\n    key: \"_makeSubscription\",\n    value: function _makeSubscription(subscriptionConfig,\n    /**\n     * When preparing `args` for a call to `_makeSubscription`, be sure\n     * to carefully apply a default `commitment` property, if necessary.\n     *\n     * - If the user supplied a `commitment` use that.\n     * - Otherwise, if the `Connection::commitment` is set, use that.\n     * - Otherwise, set it to the RPC server default: `finalized`.\n     *\n     * This is extremely important to ensure that these two fundamentally\n     * identical subscriptions produce the same identifying hash:\n     *\n     * - A subscription made without specifying a commitment.\n     * - A subscription made where the commitment specified is the same\n     *   as the default applied to the subscription above.\n     *\n     * Example; these two subscriptions must produce the same hash:\n     *\n     * - An `accountSubscribe` subscription for `'PUBKEY'`\n     * - An `accountSubscribe` subscription for `'PUBKEY'` with commitment\n     *   `'finalized'`.\n     *\n     * See the 'making a subscription with defaulted params omitted' test\n     * in `connection-subscriptions.ts` for more.\n     */\n    args) {\n      var _this13 = this;\n      var clientSubscriptionId = this._nextClientSubscriptionId++;\n      var hash = fastStableStringify$1([subscriptionConfig.method, args], true /* isArrayProp */);\n\n      var existingSubscription = this._subscriptionsByHash[hash];\n      if (existingSubscription === undefined) {\n        this._subscriptionsByHash[hash] = _objectSpread(_objectSpread({}, subscriptionConfig), {}, {\n          args: args,\n          callbacks: new Set([subscriptionConfig.callback]),\n          state: 'pending'\n        });\n      } else {\n        existingSubscription.callbacks.add(subscriptionConfig.callback);\n      }\n      this._subscriptionHashByClientSubscriptionId[clientSubscriptionId] = hash;\n      this._subscriptionDisposeFunctionsByClientSubscriptionId[clientSubscriptionId] = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee95() {\n        var subscription;\n        return _regeneratorRuntime.wrap(function _callee95$(_context96) {\n          while (1) switch (_context96.prev = _context96.next) {\n            case 0:\n              delete _this13._subscriptionDisposeFunctionsByClientSubscriptionId[clientSubscriptionId];\n              delete _this13._subscriptionHashByClientSubscriptionId[clientSubscriptionId];\n              subscription = _this13._subscriptionsByHash[hash];\n              assert(subscription !== undefined, \"Could not find a `Subscription` when tearing down client subscription #\".concat(clientSubscriptionId));\n              subscription.callbacks[\"delete\"](subscriptionConfig.callback);\n              _context96.next = 7;\n              return _this13._updateSubscriptions();\n            case 7:\n            case \"end\":\n              return _context96.stop();\n          }\n        }, _callee95);\n      }));\n      this._updateSubscriptions();\n      return clientSubscriptionId;\n    }\n\n    /**\n     * Register a callback to be invoked whenever the specified account changes\n     *\n     * @param publicKey Public key of the account to monitor\n     * @param callback Function to invoke whenever the account is changed\n     * @param commitment Specify the commitment level account changes must reach before notification\n     * @return subscription id\n     */\n  }, {\n    key: \"onAccountChange\",\n    value: function onAccountChange(publicKey, callback, commitment) {\n      var args = this._buildArgs([publicKey.toBase58()], commitment || this._commitment || 'finalized',\n      // Apply connection/server default.\n      'base64');\n      return this._makeSubscription({\n        callback: callback,\n        method: 'accountSubscribe',\n        unsubscribeMethod: 'accountUnsubscribe'\n      }, args);\n    }\n\n    /**\n     * Deregister an account notification callback\n     *\n     * @param id client subscription id to deregister\n     */\n  }, {\n    key: \"removeAccountChangeListener\",\n    value: function () {\n      var _removeAccountChangeListener = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee96(clientSubscriptionId) {\n        return _regeneratorRuntime.wrap(function _callee96$(_context97) {\n          while (1) switch (_context97.prev = _context97.next) {\n            case 0:\n              _context97.next = 2;\n              return this._unsubscribeClientSubscription(clientSubscriptionId, 'account change');\n            case 2:\n            case \"end\":\n              return _context97.stop();\n          }\n        }, _callee96, this);\n      }));\n      function removeAccountChangeListener(_x137) {\n        return _removeAccountChangeListener.apply(this, arguments);\n      }\n      return removeAccountChangeListener;\n    }()\n    /**\n     * @internal\n     */\n  }, {\n    key: \"_wsOnProgramAccountNotification\",\n    value: function _wsOnProgramAccountNotification(notification) {\n      var _create2 = create(notification, ProgramAccountNotificationResult),\n        result = _create2.result,\n        subscription = _create2.subscription;\n      this._handleServerNotification(subscription, [{\n        accountId: result.value.pubkey,\n        accountInfo: result.value.account\n      }, result.context]);\n    }\n\n    /**\n     * Register a callback to be invoked whenever accounts owned by the\n     * specified program change\n     *\n     * @param programId Public key of the program to monitor\n     * @param callback Function to invoke whenever the account is changed\n     * @param commitment Specify the commitment level account changes must reach before notification\n     * @param filters The program account filters to pass into the RPC method\n     * @return subscription id\n     */\n  }, {\n    key: \"onProgramAccountChange\",\n    value: function onProgramAccountChange(programId, callback, commitment, filters) {\n      var args = this._buildArgs([programId.toBase58()], commitment || this._commitment || 'finalized',\n      // Apply connection/server default.\n      'base64' /* encoding */, filters ? {\n        filters: filters\n      } : undefined /* extra */);\n\n      return this._makeSubscription({\n        callback: callback,\n        method: 'programSubscribe',\n        unsubscribeMethod: 'programUnsubscribe'\n      }, args);\n    }\n\n    /**\n     * Deregister an account notification callback\n     *\n     * @param id client subscription id to deregister\n     */\n  }, {\n    key: \"removeProgramAccountChangeListener\",\n    value: function () {\n      var _removeProgramAccountChangeListener = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee97(clientSubscriptionId) {\n        return _regeneratorRuntime.wrap(function _callee97$(_context98) {\n          while (1) switch (_context98.prev = _context98.next) {\n            case 0:\n              _context98.next = 2;\n              return this._unsubscribeClientSubscription(clientSubscriptionId, 'program account change');\n            case 2:\n            case \"end\":\n              return _context98.stop();\n          }\n        }, _callee97, this);\n      }));\n      function removeProgramAccountChangeListener(_x138) {\n        return _removeProgramAccountChangeListener.apply(this, arguments);\n      }\n      return removeProgramAccountChangeListener;\n    }()\n    /**\n     * Registers a callback to be invoked whenever logs are emitted.\n     */\n  }, {\n    key: \"onLogs\",\n    value: function onLogs(filter, callback, commitment) {\n      var args = this._buildArgs([_typeof(filter) === 'object' ? {\n        mentions: [filter.toString()]\n      } : filter], commitment || this._commitment || 'finalized' // Apply connection/server default.\n      );\n\n      return this._makeSubscription({\n        callback: callback,\n        method: 'logsSubscribe',\n        unsubscribeMethod: 'logsUnsubscribe'\n      }, args);\n    }\n\n    /**\n     * Deregister a logs callback.\n     *\n     * @param id client subscription id to deregister.\n     */\n  }, {\n    key: \"removeOnLogsListener\",\n    value: function () {\n      var _removeOnLogsListener = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee98(clientSubscriptionId) {\n        return _regeneratorRuntime.wrap(function _callee98$(_context99) {\n          while (1) switch (_context99.prev = _context99.next) {\n            case 0:\n              _context99.next = 2;\n              return this._unsubscribeClientSubscription(clientSubscriptionId, 'logs');\n            case 2:\n            case \"end\":\n              return _context99.stop();\n          }\n        }, _callee98, this);\n      }));\n      function removeOnLogsListener(_x139) {\n        return _removeOnLogsListener.apply(this, arguments);\n      }\n      return removeOnLogsListener;\n    }()\n    /**\n     * @internal\n     */\n  }, {\n    key: \"_wsOnLogsNotification\",\n    value: function _wsOnLogsNotification(notification) {\n      var _create3 = create(notification, LogsNotificationResult),\n        result = _create3.result,\n        subscription = _create3.subscription;\n      this._handleServerNotification(subscription, [result.value, result.context]);\n    }\n\n    /**\n     * @internal\n     */\n  }, {\n    key: \"_wsOnSlotNotification\",\n    value: function _wsOnSlotNotification(notification) {\n      var _create4 = create(notification, SlotNotificationResult),\n        result = _create4.result,\n        subscription = _create4.subscription;\n      this._handleServerNotification(subscription, [result]);\n    }\n\n    /**\n     * Register a callback to be invoked upon slot changes\n     *\n     * @param callback Function to invoke whenever the slot changes\n     * @return subscription id\n     */\n  }, {\n    key: \"onSlotChange\",\n    value: function onSlotChange(callback) {\n      return this._makeSubscription({\n        callback: callback,\n        method: 'slotSubscribe',\n        unsubscribeMethod: 'slotUnsubscribe'\n      }, [] /* args */);\n    }\n\n    /**\n     * Deregister a slot notification callback\n     *\n     * @param id client subscription id to deregister\n     */\n  }, {\n    key: \"removeSlotChangeListener\",\n    value: function () {\n      var _removeSlotChangeListener = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee99(clientSubscriptionId) {\n        return _regeneratorRuntime.wrap(function _callee99$(_context100) {\n          while (1) switch (_context100.prev = _context100.next) {\n            case 0:\n              _context100.next = 2;\n              return this._unsubscribeClientSubscription(clientSubscriptionId, 'slot change');\n            case 2:\n            case \"end\":\n              return _context100.stop();\n          }\n        }, _callee99, this);\n      }));\n      function removeSlotChangeListener(_x140) {\n        return _removeSlotChangeListener.apply(this, arguments);\n      }\n      return removeSlotChangeListener;\n    }()\n    /**\n     * @internal\n     */\n  }, {\n    key: \"_wsOnSlotUpdatesNotification\",\n    value: function _wsOnSlotUpdatesNotification(notification) {\n      var _create5 = create(notification, SlotUpdateNotificationResult),\n        result = _create5.result,\n        subscription = _create5.subscription;\n      this._handleServerNotification(subscription, [result]);\n    }\n\n    /**\n     * Register a callback to be invoked upon slot updates. {@link SlotUpdate}'s\n     * may be useful to track live progress of a cluster.\n     *\n     * @param callback Function to invoke whenever the slot updates\n     * @return subscription id\n     */\n  }, {\n    key: \"onSlotUpdate\",\n    value: function onSlotUpdate(callback) {\n      return this._makeSubscription({\n        callback: callback,\n        method: 'slotsUpdatesSubscribe',\n        unsubscribeMethod: 'slotsUpdatesUnsubscribe'\n      }, [] /* args */);\n    }\n\n    /**\n     * Deregister a slot update notification callback\n     *\n     * @param id client subscription id to deregister\n     */\n  }, {\n    key: \"removeSlotUpdateListener\",\n    value: function () {\n      var _removeSlotUpdateListener = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee100(clientSubscriptionId) {\n        return _regeneratorRuntime.wrap(function _callee100$(_context101) {\n          while (1) switch (_context101.prev = _context101.next) {\n            case 0:\n              _context101.next = 2;\n              return this._unsubscribeClientSubscription(clientSubscriptionId, 'slot update');\n            case 2:\n            case \"end\":\n              return _context101.stop();\n          }\n        }, _callee100, this);\n      }));\n      function removeSlotUpdateListener(_x141) {\n        return _removeSlotUpdateListener.apply(this, arguments);\n      }\n      return removeSlotUpdateListener;\n    }()\n    /**\n     * @internal\n     */\n  }, {\n    key: \"_unsubscribeClientSubscription\",\n    value: function () {\n      var _unsubscribeClientSubscription2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee101(clientSubscriptionId, subscriptionName) {\n        var dispose;\n        return _regeneratorRuntime.wrap(function _callee101$(_context102) {\n          while (1) switch (_context102.prev = _context102.next) {\n            case 0:\n              dispose = this._subscriptionDisposeFunctionsByClientSubscriptionId[clientSubscriptionId];\n              if (!dispose) {\n                _context102.next = 6;\n                break;\n              }\n              _context102.next = 4;\n              return dispose();\n            case 4:\n              _context102.next = 7;\n              break;\n            case 6:\n              console.warn('Ignored unsubscribe request because an active subscription with id ' + \"`\".concat(clientSubscriptionId, \"` for '\").concat(subscriptionName, \"' events \") + 'could not be found.');\n            case 7:\n            case \"end\":\n              return _context102.stop();\n          }\n        }, _callee101, this);\n      }));\n      function _unsubscribeClientSubscription(_x142, _x143) {\n        return _unsubscribeClientSubscription2.apply(this, arguments);\n      }\n      return _unsubscribeClientSubscription;\n    }()\n  }, {\n    key: \"_buildArgs\",\n    value: function _buildArgs(args, override, encoding, extra) {\n      var commitment = override || this._commitment;\n      if (commitment || encoding || extra) {\n        var _options = {};\n        if (encoding) {\n          _options.encoding = encoding;\n        }\n        if (commitment) {\n          _options.commitment = commitment;\n        }\n        if (extra) {\n          _options = Object.assign(_options, extra);\n        }\n        args.push(_options);\n      }\n      return args;\n    }\n\n    /**\n     * @internal\n     */\n  }, {\n    key: \"_buildArgsAtLeastConfirmed\",\n    value: function _buildArgsAtLeastConfirmed(args, override, encoding, extra) {\n      var commitment = override || this._commitment;\n      if (commitment && !['confirmed', 'finalized'].includes(commitment)) {\n        throw new Error('Using Connection with default commitment: `' + this._commitment + '`, but method requires at least `confirmed`');\n      }\n      return this._buildArgs(args, override, encoding, extra);\n    }\n\n    /**\n     * @internal\n     */\n  }, {\n    key: \"_wsOnSignatureNotification\",\n    value: function _wsOnSignatureNotification(notification) {\n      var _create6 = create(notification, SignatureNotificationResult),\n        result = _create6.result,\n        subscription = _create6.subscription;\n      if (result.value !== 'receivedSignature') {\n        /**\n         * Special case.\n         * After a signature is processed, RPCs automatically dispose of the\n         * subscription on the server side. We need to track which of these\n         * subscriptions have been disposed in such a way, so that we know\n         * whether the client is dealing with a not-yet-processed signature\n         * (in which case we must tear down the server subscription) or an\n         * already-processed signature (in which case the client can simply\n         * clear out the subscription locally without telling the server).\n         *\n         * NOTE: There is a proposal to eliminate this special case, here:\n         * https://github.com/solana-labs/solana/issues/18892\n         */\n        this._subscriptionsAutoDisposedByRpc.add(subscription);\n      }\n      this._handleServerNotification(subscription, result.value === 'receivedSignature' ? [{\n        type: 'received'\n      }, result.context] : [{\n        type: 'status',\n        result: result.value\n      }, result.context]);\n    }\n\n    /**\n     * Register a callback to be invoked upon signature updates\n     *\n     * @param signature Transaction signature string in base 58\n     * @param callback Function to invoke on signature notifications\n     * @param commitment Specify the commitment level signature must reach before notification\n     * @return subscription id\n     */\n  }, {\n    key: \"onSignature\",\n    value: function onSignature(signature, _callback, commitment) {\n      var _this14 = this;\n      var args = this._buildArgs([signature], commitment || this._commitment || 'finalized' // Apply connection/server default.\n      );\n\n      var clientSubscriptionId = this._makeSubscription({\n        callback: function callback(notification, context) {\n          if (notification.type === 'status') {\n            _callback(notification.result, context);\n            // Signatures subscriptions are auto-removed by the RPC service\n            // so no need to explicitly send an unsubscribe message.\n            try {\n              _this14.removeSignatureListener(clientSubscriptionId);\n              // eslint-disable-next-line no-empty\n            } catch (_err) {\n              // Already removed.\n            }\n          }\n        },\n        method: 'signatureSubscribe',\n        unsubscribeMethod: 'signatureUnsubscribe'\n      }, args);\n      return clientSubscriptionId;\n    }\n\n    /**\n     * Register a callback to be invoked when a transaction is\n     * received and/or processed.\n     *\n     * @param signature Transaction signature string in base 58\n     * @param callback Function to invoke on signature notifications\n     * @param options Enable received notifications and set the commitment\n     *   level that signature must reach before notification\n     * @return subscription id\n     */\n  }, {\n    key: \"onSignatureWithOptions\",\n    value: function onSignatureWithOptions(signature, _callback2, options) {\n      var _this15 = this;\n      var _options$commitment = _objectSpread(_objectSpread({}, options), {}, {\n          commitment: options && options.commitment || this._commitment || 'finalized' // Apply connection/server default.\n        }),\n        commitment = _options$commitment.commitment,\n        extra = _objectWithoutProperties(_options$commitment, _excluded4);\n      var args = this._buildArgs([signature], commitment, undefined /* encoding */, extra);\n      var clientSubscriptionId = this._makeSubscription({\n        callback: function callback(notification, context) {\n          _callback2(notification, context);\n          // Signatures subscriptions are auto-removed by the RPC service\n          // so no need to explicitly send an unsubscribe message.\n          try {\n            _this15.removeSignatureListener(clientSubscriptionId);\n            // eslint-disable-next-line no-empty\n          } catch (_err) {\n            // Already removed.\n          }\n        },\n        method: 'signatureSubscribe',\n        unsubscribeMethod: 'signatureUnsubscribe'\n      }, args);\n      return clientSubscriptionId;\n    }\n\n    /**\n     * Deregister a signature notification callback\n     *\n     * @param id client subscription id to deregister\n     */\n  }, {\n    key: \"removeSignatureListener\",\n    value: function () {\n      var _removeSignatureListener = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee102(clientSubscriptionId) {\n        return _regeneratorRuntime.wrap(function _callee102$(_context103) {\n          while (1) switch (_context103.prev = _context103.next) {\n            case 0:\n              _context103.next = 2;\n              return this._unsubscribeClientSubscription(clientSubscriptionId, 'signature result');\n            case 2:\n            case \"end\":\n              return _context103.stop();\n          }\n        }, _callee102, this);\n      }));\n      function removeSignatureListener(_x144) {\n        return _removeSignatureListener.apply(this, arguments);\n      }\n      return removeSignatureListener;\n    }()\n    /**\n     * @internal\n     */\n  }, {\n    key: \"_wsOnRootNotification\",\n    value: function _wsOnRootNotification(notification) {\n      var _create7 = create(notification, RootNotificationResult),\n        result = _create7.result,\n        subscription = _create7.subscription;\n      this._handleServerNotification(subscription, [result]);\n    }\n\n    /**\n     * Register a callback to be invoked upon root changes\n     *\n     * @param callback Function to invoke whenever the root changes\n     * @return subscription id\n     */\n  }, {\n    key: \"onRootChange\",\n    value: function onRootChange(callback) {\n      return this._makeSubscription({\n        callback: callback,\n        method: 'rootSubscribe',\n        unsubscribeMethod: 'rootUnsubscribe'\n      }, [] /* args */);\n    }\n\n    /**\n     * Deregister a root notification callback\n     *\n     * @param id client subscription id to deregister\n     */\n  }, {\n    key: \"removeRootChangeListener\",\n    value: function () {\n      var _removeRootChangeListener = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee103(clientSubscriptionId) {\n        return _regeneratorRuntime.wrap(function _callee103$(_context104) {\n          while (1) switch (_context104.prev = _context104.next) {\n            case 0:\n              _context104.next = 2;\n              return this._unsubscribeClientSubscription(clientSubscriptionId, 'root change');\n            case 2:\n            case \"end\":\n              return _context104.stop();\n          }\n        }, _callee103, this);\n      }));\n      function removeRootChangeListener(_x145) {\n        return _removeRootChangeListener.apply(this, arguments);\n      }\n      return removeRootChangeListener;\n    }()\n  }]);\n  return Connection;\n}();\n\n/**\n * Keypair signer interface\n */\n\n/**\n * An account keypair used for signing transactions.\n */\nvar Keypair = /*#__PURE__*/function () {\n  /**\n   * Create a new keypair instance.\n   * Generate random keypair if no {@link Ed25519Keypair} is provided.\n   *\n   * @param {Ed25519Keypair} keypair ed25519 keypair\n   */\n  function Keypair(keypair) {\n    _classCallCheck(this, Keypair);\n    this._keypair = void 0;\n    this._keypair = keypair !== null && keypair !== void 0 ? keypair : generateKeypair();\n  }\n\n  /**\n   * Generate a new random keypair\n   *\n   * @returns {Keypair} Keypair\n   */\n  _createClass(Keypair, [{\n    key: \"publicKey\",\n    get:\n    /**\n     * The public key for this keypair\n     *\n     * @returns {PublicKey} PublicKey\n     */\n    function get() {\n      return new PublicKey(this._keypair.publicKey);\n    }\n\n    /**\n     * The raw secret key for this keypair\n     * @returns {Uint8Array} Secret key in an array of Uint8 bytes\n     */\n  }, {\n    key: \"secretKey\",\n    get: function get() {\n      return new Uint8Array(this._keypair.secretKey);\n    }\n  }], [{\n    key: \"generate\",\n    value: function generate() {\n      return new Keypair(generateKeypair());\n    }\n\n    /**\n     * Create a keypair from a raw secret key byte array.\n     *\n     * This method should only be used to recreate a keypair from a previously\n     * generated secret key. Generating keypairs from a random seed should be done\n     * with the {@link Keypair.fromSeed} method.\n     *\n     * @throws error if the provided secret key is invalid and validation is not skipped.\n     *\n     * @param secretKey secret key byte array\n     * @param options skip secret key validation\n     *\n     * @returns {Keypair} Keypair\n     */\n  }, {\n    key: \"fromSecretKey\",\n    value: function fromSecretKey(secretKey, options) {\n      if (secretKey.byteLength !== 64) {\n        throw new Error('bad secret key size');\n      }\n      var publicKey = secretKey.slice(32, 64);\n      if (!options || !options.skipValidation) {\n        var privateScalar = secretKey.slice(0, 32);\n        var computedPublicKey = getPublicKey(privateScalar);\n        for (var ii = 0; ii < 32; ii++) {\n          if (publicKey[ii] !== computedPublicKey[ii]) {\n            throw new Error('provided secretKey is invalid');\n          }\n        }\n      }\n      return new Keypair({\n        publicKey: publicKey,\n        secretKey: secretKey\n      });\n    }\n\n    /**\n     * Generate a keypair from a 32 byte seed.\n     *\n     * @param seed seed byte array\n     *\n     * @returns {Keypair} Keypair\n     */\n  }, {\n    key: \"fromSeed\",\n    value: function fromSeed(seed) {\n      var publicKey = getPublicKey(seed);\n      var secretKey = new Uint8Array(64);\n      secretKey.set(seed);\n      secretKey.set(publicKey, 32);\n      return new Keypair({\n        publicKey: publicKey,\n        secretKey: secretKey\n      });\n    }\n  }]);\n  return Keypair;\n}();\n\n/**\n * An enumeration of valid LookupTableInstructionType's\n */\n\n/**\n * An enumeration of valid address lookup table InstructionType's\n * @internal\n */\nvar LOOKUP_TABLE_INSTRUCTION_LAYOUTS = Object.freeze({\n  CreateLookupTable: {\n    index: 0,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), u64('recentSlot'), BufferLayout.u8('bumpSeed')])\n  },\n  FreezeLookupTable: {\n    index: 1,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  ExtendLookupTable: {\n    index: 2,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), u64(), BufferLayout.seq(publicKey(), BufferLayout.offset(BufferLayout.u32(), -8), 'addresses')])\n  },\n  DeactivateLookupTable: {\n    index: 3,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  CloseLookupTable: {\n    index: 4,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  }\n});\nvar AddressLookupTableInstruction = /*#__PURE__*/function () {\n  /**\n   * @internal\n   */\n  function AddressLookupTableInstruction() {\n    _classCallCheck(this, AddressLookupTableInstruction);\n  }\n  _createClass(AddressLookupTableInstruction, null, [{\n    key: \"decodeInstructionType\",\n    value: function decodeInstructionType(instruction) {\n      this.checkProgramId(instruction.programId);\n      var instructionTypeLayout = BufferLayout.u32('instruction');\n      var index = instructionTypeLayout.decode(instruction.data);\n      var type;\n      for (var _i = 0, _Object$entries = Object.entries(LOOKUP_TABLE_INSTRUCTION_LAYOUTS); _i < _Object$entries.length; _i++) {\n        var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n          layoutType = _Object$entries$_i[0],\n          layout = _Object$entries$_i[1];\n        if (layout.index == index) {\n          type = layoutType;\n          break;\n        }\n      }\n      if (!type) {\n        throw new Error('Invalid Instruction. Should be a LookupTable Instruction');\n      }\n      return type;\n    }\n  }, {\n    key: \"decodeCreateLookupTable\",\n    value: function decodeCreateLookupTable(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeysLength(instruction.keys, 4);\n      var _decodeData = decodeData$1(LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable, instruction.data),\n        recentSlot = _decodeData.recentSlot;\n      return {\n        authority: instruction.keys[1].pubkey,\n        payer: instruction.keys[2].pubkey,\n        recentSlot: Number(recentSlot)\n      };\n    }\n  }, {\n    key: \"decodeExtendLookupTable\",\n    value: function decodeExtendLookupTable(instruction) {\n      this.checkProgramId(instruction.programId);\n      if (instruction.keys.length < 2) {\n        throw new Error(\"invalid instruction; found \".concat(instruction.keys.length, \" keys, expected at least 2\"));\n      }\n      var _decodeData2 = decodeData$1(LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable, instruction.data),\n        addresses = _decodeData2.addresses;\n      return {\n        lookupTable: instruction.keys[0].pubkey,\n        authority: instruction.keys[1].pubkey,\n        payer: instruction.keys.length > 2 ? instruction.keys[2].pubkey : undefined,\n        addresses: addresses.map(function (buffer) {\n          return new PublicKey(buffer);\n        })\n      };\n    }\n  }, {\n    key: \"decodeCloseLookupTable\",\n    value: function decodeCloseLookupTable(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeysLength(instruction.keys, 3);\n      return {\n        lookupTable: instruction.keys[0].pubkey,\n        authority: instruction.keys[1].pubkey,\n        recipient: instruction.keys[2].pubkey\n      };\n    }\n  }, {\n    key: \"decodeFreezeLookupTable\",\n    value: function decodeFreezeLookupTable(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeysLength(instruction.keys, 2);\n      return {\n        lookupTable: instruction.keys[0].pubkey,\n        authority: instruction.keys[1].pubkey\n      };\n    }\n  }, {\n    key: \"decodeDeactivateLookupTable\",\n    value: function decodeDeactivateLookupTable(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeysLength(instruction.keys, 2);\n      return {\n        lookupTable: instruction.keys[0].pubkey,\n        authority: instruction.keys[1].pubkey\n      };\n    }\n\n    /**\n     * @internal\n     */\n  }, {\n    key: \"checkProgramId\",\n    value: function checkProgramId(programId) {\n      if (!programId.equals(AddressLookupTableProgram.programId)) {\n        throw new Error('invalid instruction; programId is not AddressLookupTable Program');\n      }\n    }\n    /**\n     * @internal\n     */\n  }, {\n    key: \"checkKeysLength\",\n    value: function checkKeysLength(keys, expectedLength) {\n      if (keys.length < expectedLength) {\n        throw new Error(\"invalid instruction; found \".concat(keys.length, \" keys, expected at least \").concat(expectedLength));\n      }\n    }\n  }]);\n  return AddressLookupTableInstruction;\n}();\nvar AddressLookupTableProgram = /*#__PURE__*/function () {\n  /**\n   * @internal\n   */\n  function AddressLookupTableProgram() {\n    _classCallCheck(this, AddressLookupTableProgram);\n  }\n  _createClass(AddressLookupTableProgram, null, [{\n    key: \"createLookupTable\",\n    value: function createLookupTable(params) {\n      var _PublicKey$findProgra = PublicKey.findProgramAddressSync([params.authority.toBuffer(), toBufferLE(BigInt(params.recentSlot), 8)], this.programId),\n        _PublicKey$findProgra2 = _slicedToArray(_PublicKey$findProgra, 2),\n        lookupTableAddress = _PublicKey$findProgra2[0],\n        bumpSeed = _PublicKey$findProgra2[1];\n      var type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable;\n      var data = encodeData(type, {\n        recentSlot: BigInt(params.recentSlot),\n        bumpSeed: bumpSeed\n      });\n      var keys = [{\n        pubkey: lookupTableAddress,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false\n      }, {\n        pubkey: params.payer,\n        isSigner: true,\n        isWritable: true\n      }, {\n        pubkey: SystemProgram.programId,\n        isSigner: false,\n        isWritable: false\n      }];\n      return [new TransactionInstruction({\n        programId: this.programId,\n        keys: keys,\n        data: data\n      }), lookupTableAddress];\n    }\n  }, {\n    key: \"freezeLookupTable\",\n    value: function freezeLookupTable(params) {\n      var type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.FreezeLookupTable;\n      var data = encodeData(type);\n      var keys = [{\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false\n      }];\n      return new TransactionInstruction({\n        programId: this.programId,\n        keys: keys,\n        data: data\n      });\n    }\n  }, {\n    key: \"extendLookupTable\",\n    value: function extendLookupTable(params) {\n      var type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable;\n      var data = encodeData(type, {\n        addresses: params.addresses.map(function (addr) {\n          return addr.toBytes();\n        })\n      });\n      var keys = [{\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false\n      }];\n      if (params.payer) {\n        keys.push({\n          pubkey: params.payer,\n          isSigner: true,\n          isWritable: true\n        }, {\n          pubkey: SystemProgram.programId,\n          isSigner: false,\n          isWritable: false\n        });\n      }\n      return new TransactionInstruction({\n        programId: this.programId,\n        keys: keys,\n        data: data\n      });\n    }\n  }, {\n    key: \"deactivateLookupTable\",\n    value: function deactivateLookupTable(params) {\n      var type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.DeactivateLookupTable;\n      var data = encodeData(type);\n      var keys = [{\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false\n      }];\n      return new TransactionInstruction({\n        programId: this.programId,\n        keys: keys,\n        data: data\n      });\n    }\n  }, {\n    key: \"closeLookupTable\",\n    value: function closeLookupTable(params) {\n      var type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CloseLookupTable;\n      var data = encodeData(type);\n      var keys = [{\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false\n      }, {\n        pubkey: params.recipient,\n        isSigner: false,\n        isWritable: true\n      }];\n      return new TransactionInstruction({\n        programId: this.programId,\n        keys: keys,\n        data: data\n      });\n    }\n  }]);\n  return AddressLookupTableProgram;\n}();\nAddressLookupTableProgram.programId = new PublicKey('AddressLookupTab1e1111111111111111111111111');\n\n/**\n * Compute Budget Instruction class\n */\nvar ComputeBudgetInstruction = /*#__PURE__*/function () {\n  /**\n   * @internal\n   */\n  function ComputeBudgetInstruction() {\n    _classCallCheck(this, ComputeBudgetInstruction);\n  }\n\n  /**\n   * Decode a compute budget instruction and retrieve the instruction type.\n   */\n  _createClass(ComputeBudgetInstruction, null, [{\n    key: \"decodeInstructionType\",\n    value: function decodeInstructionType(instruction) {\n      this.checkProgramId(instruction.programId);\n      var instructionTypeLayout = BufferLayout.u8('instruction');\n      var typeIndex = instructionTypeLayout.decode(instruction.data);\n      var type;\n      for (var _i = 0, _Object$entries = Object.entries(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS); _i < _Object$entries.length; _i++) {\n        var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n          ixType = _Object$entries$_i[0],\n          layout = _Object$entries$_i[1];\n        if (layout.index == typeIndex) {\n          type = ixType;\n          break;\n        }\n      }\n      if (!type) {\n        throw new Error('Instruction type incorrect; not a ComputeBudgetInstruction');\n      }\n      return type;\n    }\n\n    /**\n     * Decode request units compute budget instruction and retrieve the instruction params.\n     */\n  }, {\n    key: \"decodeRequestUnits\",\n    value: function decodeRequestUnits(instruction) {\n      this.checkProgramId(instruction.programId);\n      var _decodeData = decodeData$1(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits, instruction.data),\n        units = _decodeData.units,\n        additionalFee = _decodeData.additionalFee;\n      return {\n        units: units,\n        additionalFee: additionalFee\n      };\n    }\n\n    /**\n     * Decode request heap frame compute budget instruction and retrieve the instruction params.\n     */\n  }, {\n    key: \"decodeRequestHeapFrame\",\n    value: function decodeRequestHeapFrame(instruction) {\n      this.checkProgramId(instruction.programId);\n      var _decodeData2 = decodeData$1(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame, instruction.data),\n        bytes = _decodeData2.bytes;\n      return {\n        bytes: bytes\n      };\n    }\n\n    /**\n     * Decode set compute unit limit compute budget instruction and retrieve the instruction params.\n     */\n  }, {\n    key: \"decodeSetComputeUnitLimit\",\n    value: function decodeSetComputeUnitLimit(instruction) {\n      this.checkProgramId(instruction.programId);\n      var _decodeData3 = decodeData$1(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit, instruction.data),\n        units = _decodeData3.units;\n      return {\n        units: units\n      };\n    }\n\n    /**\n     * Decode set compute unit price compute budget instruction and retrieve the instruction params.\n     */\n  }, {\n    key: \"decodeSetComputeUnitPrice\",\n    value: function decodeSetComputeUnitPrice(instruction) {\n      this.checkProgramId(instruction.programId);\n      var _decodeData4 = decodeData$1(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice, instruction.data),\n        microLamports = _decodeData4.microLamports;\n      return {\n        microLamports: microLamports\n      };\n    }\n\n    /**\n     * @internal\n     */\n  }, {\n    key: \"checkProgramId\",\n    value: function checkProgramId(programId) {\n      if (!programId.equals(ComputeBudgetProgram.programId)) {\n        throw new Error('invalid instruction; programId is not ComputeBudgetProgram');\n      }\n    }\n  }]);\n  return ComputeBudgetInstruction;\n}();\n\n/**\n * An enumeration of valid ComputeBudgetInstructionType's\n */\n\n/**\n * Request units instruction params\n */\n\n/**\n * Request heap frame instruction params\n */\n\n/**\n * Set compute unit limit instruction params\n */\n\n/**\n * Set compute unit price instruction params\n */\n\n/**\n * An enumeration of valid ComputeBudget InstructionType's\n * @internal\n */\nvar COMPUTE_BUDGET_INSTRUCTION_LAYOUTS = Object.freeze({\n  RequestUnits: {\n    index: 0,\n    layout: BufferLayout.struct([BufferLayout.u8('instruction'), BufferLayout.u32('units'), BufferLayout.u32('additionalFee')])\n  },\n  RequestHeapFrame: {\n    index: 1,\n    layout: BufferLayout.struct([BufferLayout.u8('instruction'), BufferLayout.u32('bytes')])\n  },\n  SetComputeUnitLimit: {\n    index: 2,\n    layout: BufferLayout.struct([BufferLayout.u8('instruction'), BufferLayout.u32('units')])\n  },\n  SetComputeUnitPrice: {\n    index: 3,\n    layout: BufferLayout.struct([BufferLayout.u8('instruction'), u64('microLamports')])\n  }\n});\n\n/**\n * Factory class for transaction instructions to interact with the Compute Budget program\n */\nvar ComputeBudgetProgram = /*#__PURE__*/function () {\n  /**\n   * @internal\n   */\n  function ComputeBudgetProgram() {\n    _classCallCheck(this, ComputeBudgetProgram);\n  }\n\n  /**\n   * Public key that identifies the Compute Budget program\n   */\n  _createClass(ComputeBudgetProgram, null, [{\n    key: \"requestUnits\",\n    value:\n    /**\n     * @deprecated Instead, call {@link setComputeUnitLimit} and/or {@link setComputeUnitPrice}\n     */\n    function requestUnits(params) {\n      var type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits;\n      var data = encodeData(type, params);\n      return new TransactionInstruction({\n        keys: [],\n        programId: this.programId,\n        data: data\n      });\n    }\n  }, {\n    key: \"requestHeapFrame\",\n    value: function requestHeapFrame(params) {\n      var type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame;\n      var data = encodeData(type, params);\n      return new TransactionInstruction({\n        keys: [],\n        programId: this.programId,\n        data: data\n      });\n    }\n  }, {\n    key: \"setComputeUnitLimit\",\n    value: function setComputeUnitLimit(params) {\n      var type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit;\n      var data = encodeData(type, params);\n      return new TransactionInstruction({\n        keys: [],\n        programId: this.programId,\n        data: data\n      });\n    }\n  }, {\n    key: \"setComputeUnitPrice\",\n    value: function setComputeUnitPrice(params) {\n      var type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice;\n      var data = encodeData(type, {\n        microLamports: BigInt(params.microLamports)\n      });\n      return new TransactionInstruction({\n        keys: [],\n        programId: this.programId,\n        data: data\n      });\n    }\n  }]);\n  return ComputeBudgetProgram;\n}();\nComputeBudgetProgram.programId = new PublicKey('ComputeBudget111111111111111111111111111111');\nvar PRIVATE_KEY_BYTES$1 = 64;\nvar PUBLIC_KEY_BYTES$1 = 32;\nvar SIGNATURE_BYTES = 64;\n\n/**\n * Params for creating an ed25519 instruction using a public key\n */\n\n/**\n * Params for creating an ed25519 instruction using a private key\n */\n\nvar ED25519_INSTRUCTION_LAYOUT = BufferLayout.struct([BufferLayout.u8('numSignatures'), BufferLayout.u8('padding'), BufferLayout.u16('signatureOffset'), BufferLayout.u16('signatureInstructionIndex'), BufferLayout.u16('publicKeyOffset'), BufferLayout.u16('publicKeyInstructionIndex'), BufferLayout.u16('messageDataOffset'), BufferLayout.u16('messageDataSize'), BufferLayout.u16('messageInstructionIndex')]);\nvar Ed25519Program = /*#__PURE__*/function () {\n  /**\n   * @internal\n   */\n  function Ed25519Program() {\n    _classCallCheck(this, Ed25519Program);\n  }\n\n  /**\n   * Public key that identifies the ed25519 program\n   */\n  _createClass(Ed25519Program, null, [{\n    key: \"createInstructionWithPublicKey\",\n    value:\n    /**\n     * Create an ed25519 instruction with a public key and signature. The\n     * public key must be a buffer that is 32 bytes long, and the signature\n     * must be a buffer of 64 bytes.\n     */\n    function createInstructionWithPublicKey(params) {\n      var publicKey = params.publicKey,\n        message = params.message,\n        signature = params.signature,\n        instructionIndex = params.instructionIndex;\n      assert(publicKey.length === PUBLIC_KEY_BYTES$1, \"Public Key must be \".concat(PUBLIC_KEY_BYTES$1, \" bytes but received \").concat(publicKey.length, \" bytes\"));\n      assert(signature.length === SIGNATURE_BYTES, \"Signature must be \".concat(SIGNATURE_BYTES, \" bytes but received \").concat(signature.length, \" bytes\"));\n      var publicKeyOffset = ED25519_INSTRUCTION_LAYOUT.span;\n      var signatureOffset = publicKeyOffset + publicKey.length;\n      var messageDataOffset = signatureOffset + signature.length;\n      var numSignatures = 1;\n      var instructionData = Buffer.alloc(messageDataOffset + message.length);\n      var index = instructionIndex == null ? 0xffff // An index of `u16::MAX` makes it default to the current instruction.\n      : instructionIndex;\n      ED25519_INSTRUCTION_LAYOUT.encode({\n        numSignatures: numSignatures,\n        padding: 0,\n        signatureOffset: signatureOffset,\n        signatureInstructionIndex: index,\n        publicKeyOffset: publicKeyOffset,\n        publicKeyInstructionIndex: index,\n        messageDataOffset: messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: index\n      }, instructionData);\n      instructionData.fill(publicKey, publicKeyOffset);\n      instructionData.fill(signature, signatureOffset);\n      instructionData.fill(message, messageDataOffset);\n      return new TransactionInstruction({\n        keys: [],\n        programId: Ed25519Program.programId,\n        data: instructionData\n      });\n    }\n\n    /**\n     * Create an ed25519 instruction with a private key. The private key\n     * must be a buffer that is 64 bytes long.\n     */\n  }, {\n    key: \"createInstructionWithPrivateKey\",\n    value: function createInstructionWithPrivateKey(params) {\n      var privateKey = params.privateKey,\n        message = params.message,\n        instructionIndex = params.instructionIndex;\n      assert(privateKey.length === PRIVATE_KEY_BYTES$1, \"Private key must be \".concat(PRIVATE_KEY_BYTES$1, \" bytes but received \").concat(privateKey.length, \" bytes\"));\n      try {\n        var keypair = Keypair.fromSecretKey(privateKey);\n        var publicKey = keypair.publicKey.toBytes();\n        var signature = sign(message, keypair.secretKey);\n        return this.createInstructionWithPublicKey({\n          publicKey: publicKey,\n          message: message,\n          signature: signature,\n          instructionIndex: instructionIndex\n        });\n      } catch (error) {\n        throw new Error(\"Error creating instruction; \".concat(error));\n      }\n    }\n  }]);\n  return Ed25519Program;\n}();\nEd25519Program.programId = new PublicKey('Ed25519SigVerify111111111111111111111111111');\nvar ecdsaSign = function ecdsaSign(msgHash, privKey) {\n  var signature = secp256k1.sign(msgHash, privKey);\n  return [signature.toCompactRawBytes(), signature.recovery];\n};\nsecp256k1.utils.isValidPrivateKey;\nvar publicKeyCreate = secp256k1.getPublicKey;\nvar PRIVATE_KEY_BYTES = 32;\nvar ETHEREUM_ADDRESS_BYTES = 20;\nvar PUBLIC_KEY_BYTES = 64;\nvar SIGNATURE_OFFSETS_SERIALIZED_SIZE = 11;\n\n/**\n * Params for creating an secp256k1 instruction using a public key\n */\n\n/**\n * Params for creating an secp256k1 instruction using an Ethereum address\n */\n\n/**\n * Params for creating an secp256k1 instruction using a private key\n */\n\nvar SECP256K1_INSTRUCTION_LAYOUT = BufferLayout.struct([BufferLayout.u8('numSignatures'), BufferLayout.u16('signatureOffset'), BufferLayout.u8('signatureInstructionIndex'), BufferLayout.u16('ethAddressOffset'), BufferLayout.u8('ethAddressInstructionIndex'), BufferLayout.u16('messageDataOffset'), BufferLayout.u16('messageDataSize'), BufferLayout.u8('messageInstructionIndex'), BufferLayout.blob(20, 'ethAddress'), BufferLayout.blob(64, 'signature'), BufferLayout.u8('recoveryId')]);\nvar Secp256k1Program = /*#__PURE__*/function () {\n  /**\n   * @internal\n   */\n  function Secp256k1Program() {\n    _classCallCheck(this, Secp256k1Program);\n  }\n\n  /**\n   * Public key that identifies the secp256k1 program\n   */\n  _createClass(Secp256k1Program, null, [{\n    key: \"publicKeyToEthAddress\",\n    value:\n    /**\n     * Construct an Ethereum address from a secp256k1 public key buffer.\n     * @param {Buffer} publicKey a 64 byte secp256k1 public key buffer\n     */\n    function publicKeyToEthAddress(publicKey) {\n      assert(publicKey.length === PUBLIC_KEY_BYTES, \"Public key must be \".concat(PUBLIC_KEY_BYTES, \" bytes but received \").concat(publicKey.length, \" bytes\"));\n      try {\n        return Buffer.from(keccak_256(toBuffer(publicKey))).slice(-ETHEREUM_ADDRESS_BYTES);\n      } catch (error) {\n        throw new Error(\"Error constructing Ethereum address: \".concat(error));\n      }\n    }\n\n    /**\n     * Create an secp256k1 instruction with a public key. The public key\n     * must be a buffer that is 64 bytes long.\n     */\n  }, {\n    key: \"createInstructionWithPublicKey\",\n    value: function createInstructionWithPublicKey(params) {\n      var publicKey = params.publicKey,\n        message = params.message,\n        signature = params.signature,\n        recoveryId = params.recoveryId,\n        instructionIndex = params.instructionIndex;\n      return Secp256k1Program.createInstructionWithEthAddress({\n        ethAddress: Secp256k1Program.publicKeyToEthAddress(publicKey),\n        message: message,\n        signature: signature,\n        recoveryId: recoveryId,\n        instructionIndex: instructionIndex\n      });\n    }\n\n    /**\n     * Create an secp256k1 instruction with an Ethereum address. The address\n     * must be a hex string or a buffer that is 20 bytes long.\n     */\n  }, {\n    key: \"createInstructionWithEthAddress\",\n    value: function createInstructionWithEthAddress(params) {\n      var rawAddress = params.ethAddress,\n        message = params.message,\n        signature = params.signature,\n        recoveryId = params.recoveryId,\n        _params$instructionIn = params.instructionIndex,\n        instructionIndex = _params$instructionIn === void 0 ? 0 : _params$instructionIn;\n      var ethAddress;\n      if (typeof rawAddress === 'string') {\n        if (rawAddress.startsWith('0x')) {\n          ethAddress = Buffer.from(rawAddress.substr(2), 'hex');\n        } else {\n          ethAddress = Buffer.from(rawAddress, 'hex');\n        }\n      } else {\n        ethAddress = rawAddress;\n      }\n      assert(ethAddress.length === ETHEREUM_ADDRESS_BYTES, \"Address must be \".concat(ETHEREUM_ADDRESS_BYTES, \" bytes but received \").concat(ethAddress.length, \" bytes\"));\n      var dataStart = 1 + SIGNATURE_OFFSETS_SERIALIZED_SIZE;\n      var ethAddressOffset = dataStart;\n      var signatureOffset = dataStart + ethAddress.length;\n      var messageDataOffset = signatureOffset + signature.length + 1;\n      var numSignatures = 1;\n      var instructionData = Buffer.alloc(SECP256K1_INSTRUCTION_LAYOUT.span + message.length);\n      SECP256K1_INSTRUCTION_LAYOUT.encode({\n        numSignatures: numSignatures,\n        signatureOffset: signatureOffset,\n        signatureInstructionIndex: instructionIndex,\n        ethAddressOffset: ethAddressOffset,\n        ethAddressInstructionIndex: instructionIndex,\n        messageDataOffset: messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: instructionIndex,\n        signature: toBuffer(signature),\n        ethAddress: toBuffer(ethAddress),\n        recoveryId: recoveryId\n      }, instructionData);\n      instructionData.fill(toBuffer(message), SECP256K1_INSTRUCTION_LAYOUT.span);\n      return new TransactionInstruction({\n        keys: [],\n        programId: Secp256k1Program.programId,\n        data: instructionData\n      });\n    }\n\n    /**\n     * Create an secp256k1 instruction with a private key. The private key\n     * must be a buffer that is 32 bytes long.\n     */\n  }, {\n    key: \"createInstructionWithPrivateKey\",\n    value: function createInstructionWithPrivateKey(params) {\n      var pkey = params.privateKey,\n        message = params.message,\n        instructionIndex = params.instructionIndex;\n      assert(pkey.length === PRIVATE_KEY_BYTES, \"Private key must be \".concat(PRIVATE_KEY_BYTES, \" bytes but received \").concat(pkey.length, \" bytes\"));\n      try {\n        var privateKey = toBuffer(pkey);\n        var publicKey = publicKeyCreate(privateKey, false /* isCompressed */).slice(1); // throw away leading byte\n        var messageHash = Buffer.from(keccak_256(toBuffer(message)));\n        var _ecdsaSign = ecdsaSign(messageHash, privateKey),\n          _ecdsaSign2 = _slicedToArray(_ecdsaSign, 2),\n          signature = _ecdsaSign2[0],\n          recoveryId = _ecdsaSign2[1];\n        return this.createInstructionWithPublicKey({\n          publicKey: publicKey,\n          message: message,\n          signature: signature,\n          recoveryId: recoveryId,\n          instructionIndex: instructionIndex\n        });\n      } catch (error) {\n        throw new Error(\"Error creating instruction; \".concat(error));\n      }\n    }\n  }]);\n  return Secp256k1Program;\n}();\nSecp256k1Program.programId = new PublicKey('KeccakSecp256k11111111111111111111111111111');\n\n/**\n * Address of the stake config account which configures the rate\n * of stake warmup and cooldown as well as the slashing penalty.\n */\nvar STAKE_CONFIG_ID = new PublicKey('StakeConfig11111111111111111111111111111111');\n\n/**\n * Stake account authority info\n */\nvar Authorized = /*#__PURE__*/_createClass(\n/**\n * Create a new Authorized object\n * @param staker the stake authority\n * @param withdrawer the withdraw authority\n */\nfunction Authorized(staker, withdrawer) {\n  _classCallCheck(this, Authorized);\n  /** stake authority */\n  this.staker = void 0;\n  /** withdraw authority */\n  this.withdrawer = void 0;\n  this.staker = staker;\n  this.withdrawer = withdrawer;\n});\n/**\n * Stake account lockup info\n */\nvar Lockup = /*#__PURE__*/_createClass(\n/**\n * Create a new Lockup object\n */\nfunction Lockup(unixTimestamp, epoch, custodian) {\n  _classCallCheck(this, Lockup);\n  /** Unix timestamp of lockup expiration */\n  this.unixTimestamp = void 0;\n  /** Epoch of lockup expiration */\n  this.epoch = void 0;\n  /** Lockup custodian authority */\n  this.custodian = void 0;\n  this.unixTimestamp = unixTimestamp;\n  this.epoch = epoch;\n  this.custodian = custodian;\n}\n\n/**\n * Default, inactive Lockup value\n */);\nLockup[\"default\"] = new Lockup(0, 0, PublicKey[\"default\"]);\n/**\n * Create stake account transaction params\n */\n/**\n * Create stake account with seed transaction params\n */\n/**\n * Initialize stake instruction params\n */\n/**\n * Delegate stake instruction params\n */\n/**\n * Authorize stake instruction params\n */\n/**\n * Authorize stake instruction params using a derived key\n */\n/**\n * Split stake instruction params\n */\n/**\n * Split with seed transaction params\n */\n/**\n * Withdraw stake instruction params\n */\n/**\n * Deactivate stake instruction params\n */\n/**\n * Merge stake instruction params\n */\n/**\n * Stake Instruction class\n */\nvar StakeInstruction = /*#__PURE__*/function () {\n  /**\n   * @internal\n   */\n  function StakeInstruction() {\n    _classCallCheck(this, StakeInstruction);\n  }\n\n  /**\n   * Decode a stake instruction and retrieve the instruction type.\n   */\n  _createClass(StakeInstruction, null, [{\n    key: \"decodeInstructionType\",\n    value: function decodeInstructionType(instruction) {\n      this.checkProgramId(instruction.programId);\n      var instructionTypeLayout = BufferLayout.u32('instruction');\n      var typeIndex = instructionTypeLayout.decode(instruction.data);\n      var type;\n      for (var _i = 0, _Object$entries = Object.entries(STAKE_INSTRUCTION_LAYOUTS); _i < _Object$entries.length; _i++) {\n        var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n          ixType = _Object$entries$_i[0],\n          layout = _Object$entries$_i[1];\n        if (layout.index == typeIndex) {\n          type = ixType;\n          break;\n        }\n      }\n      if (!type) {\n        throw new Error('Instruction type incorrect; not a StakeInstruction');\n      }\n      return type;\n    }\n\n    /**\n     * Decode a initialize stake instruction and retrieve the instruction params.\n     */\n  }, {\n    key: \"decodeInitialize\",\n    value: function decodeInitialize(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 2);\n      var _decodeData = decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Initialize, instruction.data),\n        authorized = _decodeData.authorized,\n        lockup = _decodeData.lockup;\n      return {\n        stakePubkey: instruction.keys[0].pubkey,\n        authorized: new Authorized(new PublicKey(authorized.staker), new PublicKey(authorized.withdrawer)),\n        lockup: new Lockup(lockup.unixTimestamp, lockup.epoch, new PublicKey(lockup.custodian))\n      };\n    }\n\n    /**\n     * Decode a delegate stake instruction and retrieve the instruction params.\n     */\n  }, {\n    key: \"decodeDelegate\",\n    value: function decodeDelegate(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 6);\n      decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Delegate, instruction.data);\n      return {\n        stakePubkey: instruction.keys[0].pubkey,\n        votePubkey: instruction.keys[1].pubkey,\n        authorizedPubkey: instruction.keys[5].pubkey\n      };\n    }\n\n    /**\n     * Decode an authorize stake instruction and retrieve the instruction params.\n     */\n  }, {\n    key: \"decodeAuthorize\",\n    value: function decodeAuthorize(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 3);\n      var _decodeData2 = decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Authorize, instruction.data),\n        newAuthorized = _decodeData2.newAuthorized,\n        stakeAuthorizationType = _decodeData2.stakeAuthorizationType;\n      var o = {\n        stakePubkey: instruction.keys[0].pubkey,\n        authorizedPubkey: instruction.keys[2].pubkey,\n        newAuthorizedPubkey: new PublicKey(newAuthorized),\n        stakeAuthorizationType: {\n          index: stakeAuthorizationType\n        }\n      };\n      if (instruction.keys.length > 3) {\n        o.custodianPubkey = instruction.keys[3].pubkey;\n      }\n      return o;\n    }\n\n    /**\n     * Decode an authorize-with-seed stake instruction and retrieve the instruction params.\n     */\n  }, {\n    key: \"decodeAuthorizeWithSeed\",\n    value: function decodeAuthorizeWithSeed(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 2);\n      var _decodeData3 = decodeData$1(STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed, instruction.data),\n        newAuthorized = _decodeData3.newAuthorized,\n        stakeAuthorizationType = _decodeData3.stakeAuthorizationType,\n        authoritySeed = _decodeData3.authoritySeed,\n        authorityOwner = _decodeData3.authorityOwner;\n      var o = {\n        stakePubkey: instruction.keys[0].pubkey,\n        authorityBase: instruction.keys[1].pubkey,\n        authoritySeed: authoritySeed,\n        authorityOwner: new PublicKey(authorityOwner),\n        newAuthorizedPubkey: new PublicKey(newAuthorized),\n        stakeAuthorizationType: {\n          index: stakeAuthorizationType\n        }\n      };\n      if (instruction.keys.length > 3) {\n        o.custodianPubkey = instruction.keys[3].pubkey;\n      }\n      return o;\n    }\n\n    /**\n     * Decode a split stake instruction and retrieve the instruction params.\n     */\n  }, {\n    key: \"decodeSplit\",\n    value: function decodeSplit(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 3);\n      var _decodeData4 = decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Split, instruction.data),\n        lamports = _decodeData4.lamports;\n      return {\n        stakePubkey: instruction.keys[0].pubkey,\n        splitStakePubkey: instruction.keys[1].pubkey,\n        authorizedPubkey: instruction.keys[2].pubkey,\n        lamports: lamports\n      };\n    }\n\n    /**\n     * Decode a merge stake instruction and retrieve the instruction params.\n     */\n  }, {\n    key: \"decodeMerge\",\n    value: function decodeMerge(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 3);\n      decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Merge, instruction.data);\n      return {\n        stakePubkey: instruction.keys[0].pubkey,\n        sourceStakePubKey: instruction.keys[1].pubkey,\n        authorizedPubkey: instruction.keys[4].pubkey\n      };\n    }\n\n    /**\n     * Decode a withdraw stake instruction and retrieve the instruction params.\n     */\n  }, {\n    key: \"decodeWithdraw\",\n    value: function decodeWithdraw(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 5);\n      var _decodeData5 = decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Withdraw, instruction.data),\n        lamports = _decodeData5.lamports;\n      var o = {\n        stakePubkey: instruction.keys[0].pubkey,\n        toPubkey: instruction.keys[1].pubkey,\n        authorizedPubkey: instruction.keys[4].pubkey,\n        lamports: lamports\n      };\n      if (instruction.keys.length > 5) {\n        o.custodianPubkey = instruction.keys[5].pubkey;\n      }\n      return o;\n    }\n\n    /**\n     * Decode a deactivate stake instruction and retrieve the instruction params.\n     */\n  }, {\n    key: \"decodeDeactivate\",\n    value: function decodeDeactivate(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 3);\n      decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Deactivate, instruction.data);\n      return {\n        stakePubkey: instruction.keys[0].pubkey,\n        authorizedPubkey: instruction.keys[2].pubkey\n      };\n    }\n\n    /**\n     * @internal\n     */\n  }, {\n    key: \"checkProgramId\",\n    value: function checkProgramId(programId) {\n      if (!programId.equals(StakeProgram.programId)) {\n        throw new Error('invalid instruction; programId is not StakeProgram');\n      }\n    }\n\n    /**\n     * @internal\n     */\n  }, {\n    key: \"checkKeyLength\",\n    value: function checkKeyLength(keys, expectedLength) {\n      if (keys.length < expectedLength) {\n        throw new Error(\"invalid instruction; found \".concat(keys.length, \" keys, expected at least \").concat(expectedLength));\n      }\n    }\n  }]);\n  return StakeInstruction;\n}();\n\n/**\n * An enumeration of valid StakeInstructionType's\n */\n\n/**\n * An enumeration of valid stake InstructionType's\n * @internal\n */\nvar STAKE_INSTRUCTION_LAYOUTS = Object.freeze({\n  Initialize: {\n    index: 0,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), authorized(), lockup()])\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('newAuthorized'), BufferLayout.u32('stakeAuthorizationType')])\n  },\n  Delegate: {\n    index: 2,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  Split: {\n    index: 3,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')])\n  },\n  Withdraw: {\n    index: 4,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')])\n  },\n  Deactivate: {\n    index: 5,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  Merge: {\n    index: 7,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  AuthorizeWithSeed: {\n    index: 8,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('newAuthorized'), BufferLayout.u32('stakeAuthorizationType'), rustString('authoritySeed'), publicKey('authorityOwner')])\n  }\n});\n\n/**\n * Stake authorization type\n */\n\n/**\n * An enumeration of valid StakeAuthorizationLayout's\n */\nvar StakeAuthorizationLayout = Object.freeze({\n  Staker: {\n    index: 0\n  },\n  Withdrawer: {\n    index: 1\n  }\n});\n\n/**\n * Factory class for transactions to interact with the Stake program\n */\nvar StakeProgram = /*#__PURE__*/function () {\n  /**\n   * @internal\n   */\n  function StakeProgram() {\n    _classCallCheck(this, StakeProgram);\n  }\n\n  /**\n   * Public key that identifies the Stake program\n   */\n  _createClass(StakeProgram, null, [{\n    key: \"initialize\",\n    value:\n    /**\n     * Generate an Initialize instruction to add to a Stake Create transaction\n     */\n    function initialize(params) {\n      var stakePubkey = params.stakePubkey,\n        authorized = params.authorized,\n        maybeLockup = params.lockup;\n      var lockup = maybeLockup || Lockup[\"default\"];\n      var type = STAKE_INSTRUCTION_LAYOUTS.Initialize;\n      var data = encodeData(type, {\n        authorized: {\n          staker: toBuffer(authorized.staker.toBuffer()),\n          withdrawer: toBuffer(authorized.withdrawer.toBuffer())\n        },\n        lockup: {\n          unixTimestamp: lockup.unixTimestamp,\n          epoch: lockup.epoch,\n          custodian: toBuffer(lockup.custodian.toBuffer())\n        }\n      });\n      var instructionData = {\n        keys: [{\n          pubkey: stakePubkey,\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false\n        }],\n        programId: this.programId,\n        data: data\n      };\n      return new TransactionInstruction(instructionData);\n    }\n\n    /**\n     * Generate a Transaction that creates a new Stake account at\n     *   an address generated with `from`, a seed, and the Stake programId\n     */\n  }, {\n    key: \"createAccountWithSeed\",\n    value: function createAccountWithSeed(params) {\n      var transaction = new Transaction();\n      transaction.add(SystemProgram.createAccountWithSeed({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        basePubkey: params.basePubkey,\n        seed: params.seed,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId\n      }));\n      var stakePubkey = params.stakePubkey,\n        authorized = params.authorized,\n        lockup = params.lockup;\n      return transaction.add(this.initialize({\n        stakePubkey: stakePubkey,\n        authorized: authorized,\n        lockup: lockup\n      }));\n    }\n\n    /**\n     * Generate a Transaction that creates a new Stake account\n     */\n  }, {\n    key: \"createAccount\",\n    value: function createAccount(params) {\n      var transaction = new Transaction();\n      transaction.add(SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId\n      }));\n      var stakePubkey = params.stakePubkey,\n        authorized = params.authorized,\n        lockup = params.lockup;\n      return transaction.add(this.initialize({\n        stakePubkey: stakePubkey,\n        authorized: authorized,\n        lockup: lockup\n      }));\n    }\n\n    /**\n     * Generate a Transaction that delegates Stake tokens to a validator\n     * Vote PublicKey. This transaction can also be used to redelegate Stake\n     * to a new validator Vote PublicKey.\n     */\n  }, {\n    key: \"delegate\",\n    value: function delegate(params) {\n      var stakePubkey = params.stakePubkey,\n        authorizedPubkey = params.authorizedPubkey,\n        votePubkey = params.votePubkey;\n      var type = STAKE_INSTRUCTION_LAYOUTS.Delegate;\n      var data = encodeData(type);\n      return new Transaction().add({\n        keys: [{\n          pubkey: stakePubkey,\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: votePubkey,\n          isSigner: false,\n          isWritable: false\n        }, {\n          pubkey: SYSVAR_CLOCK_PUBKEY,\n          isSigner: false,\n          isWritable: false\n        }, {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false\n        }, {\n          pubkey: STAKE_CONFIG_ID,\n          isSigner: false,\n          isWritable: false\n        }, {\n          pubkey: authorizedPubkey,\n          isSigner: true,\n          isWritable: false\n        }],\n        programId: this.programId,\n        data: data\n      });\n    }\n\n    /**\n     * Generate a Transaction that authorizes a new PublicKey as Staker\n     * or Withdrawer on the Stake account.\n     */\n  }, {\n    key: \"authorize\",\n    value: function authorize(params) {\n      var stakePubkey = params.stakePubkey,\n        authorizedPubkey = params.authorizedPubkey,\n        newAuthorizedPubkey = params.newAuthorizedPubkey,\n        stakeAuthorizationType = params.stakeAuthorizationType,\n        custodianPubkey = params.custodianPubkey;\n      var type = STAKE_INSTRUCTION_LAYOUTS.Authorize;\n      var data = encodeData(type, {\n        newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n        stakeAuthorizationType: stakeAuthorizationType.index\n      });\n      var keys = [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }];\n      if (custodianPubkey) {\n        keys.push({\n          pubkey: custodianPubkey,\n          isSigner: false,\n          isWritable: false\n        });\n      }\n      return new Transaction().add({\n        keys: keys,\n        programId: this.programId,\n        data: data\n      });\n    }\n\n    /**\n     * Generate a Transaction that authorizes a new PublicKey as Staker\n     * or Withdrawer on the Stake account.\n     */\n  }, {\n    key: \"authorizeWithSeed\",\n    value: function authorizeWithSeed(params) {\n      var stakePubkey = params.stakePubkey,\n        authorityBase = params.authorityBase,\n        authoritySeed = params.authoritySeed,\n        authorityOwner = params.authorityOwner,\n        newAuthorizedPubkey = params.newAuthorizedPubkey,\n        stakeAuthorizationType = params.stakeAuthorizationType,\n        custodianPubkey = params.custodianPubkey;\n      var type = STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n      var data = encodeData(type, {\n        newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n        stakeAuthorizationType: stakeAuthorizationType.index,\n        authoritySeed: authoritySeed,\n        authorityOwner: toBuffer(authorityOwner.toBuffer())\n      });\n      var keys = [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: authorityBase,\n        isSigner: true,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }];\n      if (custodianPubkey) {\n        keys.push({\n          pubkey: custodianPubkey,\n          isSigner: false,\n          isWritable: false\n        });\n      }\n      return new Transaction().add({\n        keys: keys,\n        programId: this.programId,\n        data: data\n      });\n    }\n\n    /**\n     * @internal\n     */\n  }, {\n    key: \"splitInstruction\",\n    value: function splitInstruction(params) {\n      var stakePubkey = params.stakePubkey,\n        authorizedPubkey = params.authorizedPubkey,\n        splitStakePubkey = params.splitStakePubkey,\n        lamports = params.lamports;\n      var type = STAKE_INSTRUCTION_LAYOUTS.Split;\n      var data = encodeData(type, {\n        lamports: lamports\n      });\n      return new TransactionInstruction({\n        keys: [{\n          pubkey: stakePubkey,\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: splitStakePubkey,\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: authorizedPubkey,\n          isSigner: true,\n          isWritable: false\n        }],\n        programId: this.programId,\n        data: data\n      });\n    }\n\n    /**\n     * Generate a Transaction that splits Stake tokens into another stake account\n     */\n  }, {\n    key: \"split\",\n    value: function split(params) {\n      var transaction = new Transaction();\n      transaction.add(SystemProgram.createAccount({\n        fromPubkey: params.authorizedPubkey,\n        newAccountPubkey: params.splitStakePubkey,\n        lamports: 0,\n        space: this.space,\n        programId: this.programId\n      }));\n      return transaction.add(this.splitInstruction(params));\n    }\n\n    /**\n     * Generate a Transaction that splits Stake tokens into another account\n     * derived from a base public key and seed\n     */\n  }, {\n    key: \"splitWithSeed\",\n    value: function splitWithSeed(params) {\n      var stakePubkey = params.stakePubkey,\n        authorizedPubkey = params.authorizedPubkey,\n        splitStakePubkey = params.splitStakePubkey,\n        basePubkey = params.basePubkey,\n        seed = params.seed,\n        lamports = params.lamports;\n      var transaction = new Transaction();\n      transaction.add(SystemProgram.allocate({\n        accountPubkey: splitStakePubkey,\n        basePubkey: basePubkey,\n        seed: seed,\n        space: this.space,\n        programId: this.programId\n      }));\n      return transaction.add(this.splitInstruction({\n        stakePubkey: stakePubkey,\n        authorizedPubkey: authorizedPubkey,\n        splitStakePubkey: splitStakePubkey,\n        lamports: lamports\n      }));\n    }\n\n    /**\n     * Generate a Transaction that merges Stake accounts.\n     */\n  }, {\n    key: \"merge\",\n    value: function merge(params) {\n      var stakePubkey = params.stakePubkey,\n        sourceStakePubKey = params.sourceStakePubKey,\n        authorizedPubkey = params.authorizedPubkey;\n      var type = STAKE_INSTRUCTION_LAYOUTS.Merge;\n      var data = encodeData(type);\n      return new Transaction().add({\n        keys: [{\n          pubkey: stakePubkey,\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: sourceStakePubKey,\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: SYSVAR_CLOCK_PUBKEY,\n          isSigner: false,\n          isWritable: false\n        }, {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false\n        }, {\n          pubkey: authorizedPubkey,\n          isSigner: true,\n          isWritable: false\n        }],\n        programId: this.programId,\n        data: data\n      });\n    }\n\n    /**\n     * Generate a Transaction that withdraws deactivated Stake tokens.\n     */\n  }, {\n    key: \"withdraw\",\n    value: function withdraw(params) {\n      var stakePubkey = params.stakePubkey,\n        authorizedPubkey = params.authorizedPubkey,\n        toPubkey = params.toPubkey,\n        lamports = params.lamports,\n        custodianPubkey = params.custodianPubkey;\n      var type = STAKE_INSTRUCTION_LAYOUTS.Withdraw;\n      var data = encodeData(type, {\n        lamports: lamports\n      });\n      var keys = [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: toPubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }];\n      if (custodianPubkey) {\n        keys.push({\n          pubkey: custodianPubkey,\n          isSigner: false,\n          isWritable: false\n        });\n      }\n      return new Transaction().add({\n        keys: keys,\n        programId: this.programId,\n        data: data\n      });\n    }\n\n    /**\n     * Generate a Transaction that deactivates Stake tokens.\n     */\n  }, {\n    key: \"deactivate\",\n    value: function deactivate(params) {\n      var stakePubkey = params.stakePubkey,\n        authorizedPubkey = params.authorizedPubkey;\n      var type = STAKE_INSTRUCTION_LAYOUTS.Deactivate;\n      var data = encodeData(type);\n      return new Transaction().add({\n        keys: [{\n          pubkey: stakePubkey,\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: SYSVAR_CLOCK_PUBKEY,\n          isSigner: false,\n          isWritable: false\n        }, {\n          pubkey: authorizedPubkey,\n          isSigner: true,\n          isWritable: false\n        }],\n        programId: this.programId,\n        data: data\n      });\n    }\n  }]);\n  return StakeProgram;\n}();\nStakeProgram.programId = new PublicKey('Stake11111111111111111111111111111111111111');\n/**\n * Max space of a Stake account\n *\n * This is generated from the solana-stake-program StakeState struct as\n * `StakeState::size_of()`:\n * https://docs.rs/solana-stake-program/latest/solana_stake_program/stake_state/enum.StakeState.html\n */\nStakeProgram.space = 200;\n\n/**\n * Vote account info\n */\nvar VoteInit = /*#__PURE__*/_createClass( /** [0, 100] */\n\nfunction VoteInit(nodePubkey, authorizedVoter, authorizedWithdrawer, commission) {\n  _classCallCheck(this, VoteInit);\n  this.nodePubkey = void 0;\n  this.authorizedVoter = void 0;\n  this.authorizedWithdrawer = void 0;\n  this.commission = void 0;\n  this.nodePubkey = nodePubkey;\n  this.authorizedVoter = authorizedVoter;\n  this.authorizedWithdrawer = authorizedWithdrawer;\n  this.commission = commission;\n});\n\n/**\n * Create vote account transaction params\n */\n\n/**\n * InitializeAccount instruction params\n */\n\n/**\n * Authorize instruction params\n */\n\n/**\n * AuthorizeWithSeed instruction params\n */\n\n/**\n * Withdraw from vote account transaction params\n */\n\n/**\n * Vote Instruction class\n */\nvar VoteInstruction = /*#__PURE__*/function () {\n  /**\n   * @internal\n   */\n  function VoteInstruction() {\n    _classCallCheck(this, VoteInstruction);\n  }\n\n  /**\n   * Decode a vote instruction and retrieve the instruction type.\n   */\n  _createClass(VoteInstruction, null, [{\n    key: \"decodeInstructionType\",\n    value: function decodeInstructionType(instruction) {\n      this.checkProgramId(instruction.programId);\n      var instructionTypeLayout = BufferLayout.u32('instruction');\n      var typeIndex = instructionTypeLayout.decode(instruction.data);\n      var type;\n      for (var _i = 0, _Object$entries = Object.entries(VOTE_INSTRUCTION_LAYOUTS); _i < _Object$entries.length; _i++) {\n        var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n          ixType = _Object$entries$_i[0],\n          layout = _Object$entries$_i[1];\n        if (layout.index == typeIndex) {\n          type = ixType;\n          break;\n        }\n      }\n      if (!type) {\n        throw new Error('Instruction type incorrect; not a VoteInstruction');\n      }\n      return type;\n    }\n\n    /**\n     * Decode an initialize vote instruction and retrieve the instruction params.\n     */\n  }, {\n    key: \"decodeInitializeAccount\",\n    value: function decodeInitializeAccount(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 4);\n      var _decodeData = decodeData$1(VOTE_INSTRUCTION_LAYOUTS.InitializeAccount, instruction.data),\n        voteInit = _decodeData.voteInit;\n      return {\n        votePubkey: instruction.keys[0].pubkey,\n        nodePubkey: instruction.keys[3].pubkey,\n        voteInit: new VoteInit(new PublicKey(voteInit.nodePubkey), new PublicKey(voteInit.authorizedVoter), new PublicKey(voteInit.authorizedWithdrawer), voteInit.commission)\n      };\n    }\n\n    /**\n     * Decode an authorize instruction and retrieve the instruction params.\n     */\n  }, {\n    key: \"decodeAuthorize\",\n    value: function decodeAuthorize(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 3);\n      var _decodeData2 = decodeData$1(VOTE_INSTRUCTION_LAYOUTS.Authorize, instruction.data),\n        newAuthorized = _decodeData2.newAuthorized,\n        voteAuthorizationType = _decodeData2.voteAuthorizationType;\n      return {\n        votePubkey: instruction.keys[0].pubkey,\n        authorizedPubkey: instruction.keys[2].pubkey,\n        newAuthorizedPubkey: new PublicKey(newAuthorized),\n        voteAuthorizationType: {\n          index: voteAuthorizationType\n        }\n      };\n    }\n\n    /**\n     * Decode an authorize instruction and retrieve the instruction params.\n     */\n  }, {\n    key: \"decodeAuthorizeWithSeed\",\n    value: function decodeAuthorizeWithSeed(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 3);\n      var _decodeData3 = decodeData$1(VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed, instruction.data),\n        _decodeData3$voteAuth = _decodeData3.voteAuthorizeWithSeedArgs,\n        currentAuthorityDerivedKeyOwnerPubkey = _decodeData3$voteAuth.currentAuthorityDerivedKeyOwnerPubkey,\n        currentAuthorityDerivedKeySeed = _decodeData3$voteAuth.currentAuthorityDerivedKeySeed,\n        newAuthorized = _decodeData3$voteAuth.newAuthorized,\n        voteAuthorizationType = _decodeData3$voteAuth.voteAuthorizationType;\n      return {\n        currentAuthorityDerivedKeyBasePubkey: instruction.keys[2].pubkey,\n        currentAuthorityDerivedKeyOwnerPubkey: new PublicKey(currentAuthorityDerivedKeyOwnerPubkey),\n        currentAuthorityDerivedKeySeed: currentAuthorityDerivedKeySeed,\n        newAuthorizedPubkey: new PublicKey(newAuthorized),\n        voteAuthorizationType: {\n          index: voteAuthorizationType\n        },\n        votePubkey: instruction.keys[0].pubkey\n      };\n    }\n\n    /**\n     * Decode a withdraw instruction and retrieve the instruction params.\n     */\n  }, {\n    key: \"decodeWithdraw\",\n    value: function decodeWithdraw(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 3);\n      var _decodeData4 = decodeData$1(VOTE_INSTRUCTION_LAYOUTS.Withdraw, instruction.data),\n        lamports = _decodeData4.lamports;\n      return {\n        votePubkey: instruction.keys[0].pubkey,\n        authorizedWithdrawerPubkey: instruction.keys[2].pubkey,\n        lamports: lamports,\n        toPubkey: instruction.keys[1].pubkey\n      };\n    }\n\n    /**\n     * @internal\n     */\n  }, {\n    key: \"checkProgramId\",\n    value: function checkProgramId(programId) {\n      if (!programId.equals(VoteProgram.programId)) {\n        throw new Error('invalid instruction; programId is not VoteProgram');\n      }\n    }\n\n    /**\n     * @internal\n     */\n  }, {\n    key: \"checkKeyLength\",\n    value: function checkKeyLength(keys, expectedLength) {\n      if (keys.length < expectedLength) {\n        throw new Error(\"invalid instruction; found \".concat(keys.length, \" keys, expected at least \").concat(expectedLength));\n      }\n    }\n  }]);\n  return VoteInstruction;\n}();\n\n/**\n * An enumeration of valid VoteInstructionType's\n */\n\n/** @internal */\n\nvar VOTE_INSTRUCTION_LAYOUTS = Object.freeze({\n  InitializeAccount: {\n    index: 0,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), voteInit()])\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('newAuthorized'), BufferLayout.u32('voteAuthorizationType')])\n  },\n  Withdraw: {\n    index: 3,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')])\n  },\n  AuthorizeWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), voteAuthorizeWithSeedArgs()])\n  }\n});\n\n/**\n * VoteAuthorize type\n */\n\n/**\n * An enumeration of valid VoteAuthorization layouts.\n */\nvar VoteAuthorizationLayout = Object.freeze({\n  Voter: {\n    index: 0\n  },\n  Withdrawer: {\n    index: 1\n  }\n});\n\n/**\n * Factory class for transactions to interact with the Vote program\n */\nvar VoteProgram = /*#__PURE__*/function () {\n  /**\n   * @internal\n   */\n  function VoteProgram() {\n    _classCallCheck(this, VoteProgram);\n  }\n\n  /**\n   * Public key that identifies the Vote program\n   */\n  _createClass(VoteProgram, null, [{\n    key: \"initializeAccount\",\n    value:\n    /**\n     * Generate an Initialize instruction.\n     */\n    function initializeAccount(params) {\n      var votePubkey = params.votePubkey,\n        nodePubkey = params.nodePubkey,\n        voteInit = params.voteInit;\n      var type = VOTE_INSTRUCTION_LAYOUTS.InitializeAccount;\n      var data = encodeData(type, {\n        voteInit: {\n          nodePubkey: toBuffer(voteInit.nodePubkey.toBuffer()),\n          authorizedVoter: toBuffer(voteInit.authorizedVoter.toBuffer()),\n          authorizedWithdrawer: toBuffer(voteInit.authorizedWithdrawer.toBuffer()),\n          commission: voteInit.commission\n        }\n      });\n      var instructionData = {\n        keys: [{\n          pubkey: votePubkey,\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false\n        }, {\n          pubkey: SYSVAR_CLOCK_PUBKEY,\n          isSigner: false,\n          isWritable: false\n        }, {\n          pubkey: nodePubkey,\n          isSigner: true,\n          isWritable: false\n        }],\n        programId: this.programId,\n        data: data\n      };\n      return new TransactionInstruction(instructionData);\n    }\n\n    /**\n     * Generate a transaction that creates a new Vote account.\n     */\n  }, {\n    key: \"createAccount\",\n    value: function createAccount(params) {\n      var transaction = new Transaction();\n      transaction.add(SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.votePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId\n      }));\n      return transaction.add(this.initializeAccount({\n        votePubkey: params.votePubkey,\n        nodePubkey: params.voteInit.nodePubkey,\n        voteInit: params.voteInit\n      }));\n    }\n\n    /**\n     * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account.\n     */\n  }, {\n    key: \"authorize\",\n    value: function authorize(params) {\n      var votePubkey = params.votePubkey,\n        authorizedPubkey = params.authorizedPubkey,\n        newAuthorizedPubkey = params.newAuthorizedPubkey,\n        voteAuthorizationType = params.voteAuthorizationType;\n      var type = VOTE_INSTRUCTION_LAYOUTS.Authorize;\n      var data = encodeData(type, {\n        newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n        voteAuthorizationType: voteAuthorizationType.index\n      });\n      var keys = [{\n        pubkey: votePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }];\n      return new Transaction().add({\n        keys: keys,\n        programId: this.programId,\n        data: data\n      });\n    }\n\n    /**\n     * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account\n     * where the current Voter or Withdrawer authority is a derived key.\n     */\n  }, {\n    key: \"authorizeWithSeed\",\n    value: function authorizeWithSeed(params) {\n      var currentAuthorityDerivedKeyBasePubkey = params.currentAuthorityDerivedKeyBasePubkey,\n        currentAuthorityDerivedKeyOwnerPubkey = params.currentAuthorityDerivedKeyOwnerPubkey,\n        currentAuthorityDerivedKeySeed = params.currentAuthorityDerivedKeySeed,\n        newAuthorizedPubkey = params.newAuthorizedPubkey,\n        voteAuthorizationType = params.voteAuthorizationType,\n        votePubkey = params.votePubkey;\n      var type = VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n      var data = encodeData(type, {\n        voteAuthorizeWithSeedArgs: {\n          currentAuthorityDerivedKeyOwnerPubkey: toBuffer(currentAuthorityDerivedKeyOwnerPubkey.toBuffer()),\n          currentAuthorityDerivedKeySeed: currentAuthorityDerivedKeySeed,\n          newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n          voteAuthorizationType: voteAuthorizationType.index\n        }\n      });\n      var keys = [{\n        pubkey: votePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: currentAuthorityDerivedKeyBasePubkey,\n        isSigner: true,\n        isWritable: false\n      }];\n      return new Transaction().add({\n        keys: keys,\n        programId: this.programId,\n        data: data\n      });\n    }\n\n    /**\n     * Generate a transaction to withdraw from a Vote account.\n     */\n  }, {\n    key: \"withdraw\",\n    value: function withdraw(params) {\n      var votePubkey = params.votePubkey,\n        authorizedWithdrawerPubkey = params.authorizedWithdrawerPubkey,\n        lamports = params.lamports,\n        toPubkey = params.toPubkey;\n      var type = VOTE_INSTRUCTION_LAYOUTS.Withdraw;\n      var data = encodeData(type, {\n        lamports: lamports\n      });\n      var keys = [{\n        pubkey: votePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: toPubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: authorizedWithdrawerPubkey,\n        isSigner: true,\n        isWritable: false\n      }];\n      return new Transaction().add({\n        keys: keys,\n        programId: this.programId,\n        data: data\n      });\n    }\n\n    /**\n     * Generate a transaction to withdraw safely from a Vote account.\n     *\n     * This function was created as a safeguard for vote accounts running validators, `safeWithdraw`\n     * checks that the withdraw amount will not exceed the specified balance while leaving enough left\n     * to cover rent. If you wish to close the vote account by withdrawing the full amount, call the\n     * `withdraw` method directly.\n     */\n  }, {\n    key: \"safeWithdraw\",\n    value: function safeWithdraw(params, currentVoteAccountBalance, rentExemptMinimum) {\n      if (params.lamports > currentVoteAccountBalance - rentExemptMinimum) {\n        throw new Error('Withdraw will leave vote account with insuffcient funds.');\n      }\n      return VoteProgram.withdraw(params);\n    }\n  }]);\n  return VoteProgram;\n}();\nVoteProgram.programId = new PublicKey('Vote111111111111111111111111111111111111111');\n/**\n * Max space of a Vote account\n *\n * This is generated from the solana-vote-program VoteState struct as\n * `VoteState::size_of()`:\n * https://docs.rs/solana-vote-program/1.9.5/solana_vote_program/vote_state/struct.VoteState.html#method.size_of\n *\n * KEEP IN SYNC WITH `VoteState::size_of()` in https://github.com/solana-labs/solana/blob/a474cb24b9238f5edcc982f65c0b37d4a1046f7e/sdk/program/src/vote/state/mod.rs#L340-L342\n */\nVoteProgram.space = 3731;\nvar VALIDATOR_INFO_KEY = new PublicKey('Va1idator1nfo111111111111111111111111111111');\n\n/**\n * @internal\n */\n\n/**\n * Info used to identity validators.\n */\n\nvar InfoString = type({\n  name: string(),\n  website: optional(string()),\n  details: optional(string()),\n  keybaseUsername: optional(string())\n});\n\n/**\n * ValidatorInfo class\n */\nvar ValidatorInfo = /*#__PURE__*/function () {\n  /**\n   * Construct a valid ValidatorInfo\n   *\n   * @param key validator public key\n   * @param info validator information\n   */\n  function ValidatorInfo(key, info) {\n    _classCallCheck(this, ValidatorInfo);\n    /**\n     * validator public key\n     */\n    this.key = void 0;\n    /**\n     * validator information\n     */\n    this.info = void 0;\n    this.key = key;\n    this.info = info;\n  }\n\n  /**\n   * Deserialize ValidatorInfo from the config account data. Exactly two config\n   * keys are required in the data.\n   *\n   * @param buffer config account data\n   * @return null if info was not found\n   */\n  _createClass(ValidatorInfo, null, [{\n    key: \"fromConfigData\",\n    value: function fromConfigData(buffer) {\n      var byteArray = _toConsumableArray(buffer);\n      var configKeyCount = decodeLength(byteArray);\n      if (configKeyCount !== 2) return null;\n      var configKeys = [];\n      for (var i = 0; i < 2; i++) {\n        var publicKey = new PublicKey(byteArray.slice(0, PUBLIC_KEY_LENGTH));\n        byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n        var isSigner = byteArray.slice(0, 1)[0] === 1;\n        byteArray = byteArray.slice(1);\n        configKeys.push({\n          publicKey: publicKey,\n          isSigner: isSigner\n        });\n      }\n      if (configKeys[0].publicKey.equals(VALIDATOR_INFO_KEY)) {\n        if (configKeys[1].isSigner) {\n          var rawInfo = rustString().decode(Buffer.from(byteArray));\n          var info = JSON.parse(rawInfo);\n          assert$1(info, InfoString);\n          return new ValidatorInfo(configKeys[1].publicKey, info);\n        }\n      }\n      return null;\n    }\n  }]);\n  return ValidatorInfo;\n}();\nvar VOTE_PROGRAM_ID = new PublicKey('Vote111111111111111111111111111111111111111');\n\n/**\n * History of how many credits earned by the end of each epoch\n */\n\n/**\n * See https://github.com/solana-labs/solana/blob/8a12ed029cfa38d4a45400916c2463fb82bbec8c/programs/vote_api/src/vote_state.rs#L68-L88\n *\n * @internal\n */\nvar VoteAccountLayout = BufferLayout.struct([publicKey('nodePubkey'), publicKey('authorizedWithdrawer'), BufferLayout.u8('commission'), BufferLayout.nu64(),\n// votes.length\nBufferLayout.seq(BufferLayout.struct([BufferLayout.nu64('slot'), BufferLayout.u32('confirmationCount')]), BufferLayout.offset(BufferLayout.u32(), -8), 'votes'), BufferLayout.u8('rootSlotValid'), BufferLayout.nu64('rootSlot'), BufferLayout.nu64(),\n// authorizedVoters.length\nBufferLayout.seq(BufferLayout.struct([BufferLayout.nu64('epoch'), publicKey('authorizedVoter')]), BufferLayout.offset(BufferLayout.u32(), -8), 'authorizedVoters'), BufferLayout.struct([BufferLayout.seq(BufferLayout.struct([publicKey('authorizedPubkey'), BufferLayout.nu64('epochOfLastAuthorizedSwitch'), BufferLayout.nu64('targetEpoch')]), 32, 'buf'), BufferLayout.nu64('idx'), BufferLayout.u8('isEmpty')], 'priorVoters'), BufferLayout.nu64(),\n// epochCredits.length\nBufferLayout.seq(BufferLayout.struct([BufferLayout.nu64('epoch'), BufferLayout.nu64('credits'), BufferLayout.nu64('prevCredits')]), BufferLayout.offset(BufferLayout.u32(), -8), 'epochCredits'), BufferLayout.struct([BufferLayout.nu64('slot'), BufferLayout.nu64('timestamp')], 'lastTimestamp')]);\n/**\n * VoteAccount class\n */\nvar VoteAccount = /*#__PURE__*/function () {\n  /**\n   * @internal\n   */\n  function VoteAccount(args) {\n    _classCallCheck(this, VoteAccount);\n    this.nodePubkey = void 0;\n    this.authorizedWithdrawer = void 0;\n    this.commission = void 0;\n    this.rootSlot = void 0;\n    this.votes = void 0;\n    this.authorizedVoters = void 0;\n    this.priorVoters = void 0;\n    this.epochCredits = void 0;\n    this.lastTimestamp = void 0;\n    this.nodePubkey = args.nodePubkey;\n    this.authorizedWithdrawer = args.authorizedWithdrawer;\n    this.commission = args.commission;\n    this.rootSlot = args.rootSlot;\n    this.votes = args.votes;\n    this.authorizedVoters = args.authorizedVoters;\n    this.priorVoters = args.priorVoters;\n    this.epochCredits = args.epochCredits;\n    this.lastTimestamp = args.lastTimestamp;\n  }\n\n  /**\n   * Deserialize VoteAccount from the account data.\n   *\n   * @param buffer account data\n   * @return VoteAccount\n   */\n  _createClass(VoteAccount, null, [{\n    key: \"fromAccountData\",\n    value: function fromAccountData(buffer) {\n      var versionOffset = 4;\n      var va = VoteAccountLayout.decode(toBuffer(buffer), versionOffset);\n      var rootSlot = va.rootSlot;\n      if (!va.rootSlotValid) {\n        rootSlot = null;\n      }\n      return new VoteAccount({\n        nodePubkey: new PublicKey(va.nodePubkey),\n        authorizedWithdrawer: new PublicKey(va.authorizedWithdrawer),\n        commission: va.commission,\n        votes: va.votes,\n        rootSlot: rootSlot,\n        authorizedVoters: va.authorizedVoters.map(parseAuthorizedVoter),\n        priorVoters: getPriorVoters(va.priorVoters),\n        epochCredits: va.epochCredits,\n        lastTimestamp: va.lastTimestamp\n      });\n    }\n  }]);\n  return VoteAccount;\n}();\nfunction parseAuthorizedVoter(_ref) {\n  var authorizedVoter = _ref.authorizedVoter,\n    epoch = _ref.epoch;\n  return {\n    epoch: epoch,\n    authorizedVoter: new PublicKey(authorizedVoter)\n  };\n}\nfunction parsePriorVoters(_ref2) {\n  var authorizedPubkey = _ref2.authorizedPubkey,\n    epochOfLastAuthorizedSwitch = _ref2.epochOfLastAuthorizedSwitch,\n    targetEpoch = _ref2.targetEpoch;\n  return {\n    authorizedPubkey: new PublicKey(authorizedPubkey),\n    epochOfLastAuthorizedSwitch: epochOfLastAuthorizedSwitch,\n    targetEpoch: targetEpoch\n  };\n}\nfunction getPriorVoters(_ref3) {\n  var buf = _ref3.buf,\n    idx = _ref3.idx,\n    isEmpty = _ref3.isEmpty;\n  if (isEmpty) {\n    return [];\n  }\n  return [].concat(_toConsumableArray(buf.slice(idx + 1).map(parsePriorVoters)), _toConsumableArray(buf.slice(0, idx).map(parsePriorVoters)));\n}\nvar endpoint = {\n  http: {\n    devnet: 'http://api.devnet.solana.com',\n    testnet: 'http://api.testnet.solana.com',\n    'mainnet-beta': 'http://api.mainnet-beta.solana.com/'\n  },\n  https: {\n    devnet: 'https://api.devnet.solana.com',\n    testnet: 'https://api.testnet.solana.com',\n    'mainnet-beta': 'https://api.mainnet-beta.solana.com/'\n  }\n};\n/**\n * Retrieves the RPC API URL for the specified cluster\n * @param {Cluster} [cluster=\"devnet\"] - The cluster name of the RPC API URL to use. Possible options: 'devnet' | 'testnet' | 'mainnet-beta'\n * @param {boolean} [tls=\"http\"] - Use TLS when connecting to cluster.\n *\n * @returns {string} URL string of the RPC endpoint\n */\nfunction clusterApiUrl(cluster, tls) {\n  var key = tls === false ? 'http' : 'https';\n  if (!cluster) {\n    return endpoint[key]['devnet'];\n  }\n  var url = endpoint[key][cluster];\n  if (!url) {\n    throw new Error(\"Unknown \".concat(key, \" cluster: \").concat(cluster));\n  }\n  return url;\n}\n\n/**\n * Send and confirm a raw transaction\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Buffer} rawTransaction\n * @param {TransactionConfirmationStrategy} confirmationStrategy\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\n\n/**\n * @deprecated Calling `sendAndConfirmRawTransaction()` without a `confirmationStrategy`\n * is no longer supported and will be removed in a future version.\n */ // eslint-disable-next-line no-redeclare\n// eslint-disable-next-line no-redeclare\nfunction sendAndConfirmRawTransaction(_x, _x2, _x3, _x4) {\n  return _sendAndConfirmRawTransaction.apply(this, arguments);\n}\nfunction _sendAndConfirmRawTransaction() {\n  _sendAndConfirmRawTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(connection, rawTransaction, confirmationStrategyOrConfirmOptions, maybeConfirmOptions) {\n    var confirmationStrategy, options, sendOptions, signature, commitment, confirmationPromise, status;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          if (confirmationStrategyOrConfirmOptions && Object.prototype.hasOwnProperty.call(confirmationStrategyOrConfirmOptions, 'lastValidBlockHeight')) {\n            confirmationStrategy = confirmationStrategyOrConfirmOptions;\n            options = maybeConfirmOptions;\n          } else if (confirmationStrategyOrConfirmOptions && Object.prototype.hasOwnProperty.call(confirmationStrategyOrConfirmOptions, 'nonceValue')) {\n            confirmationStrategy = confirmationStrategyOrConfirmOptions;\n            options = maybeConfirmOptions;\n          } else {\n            options = confirmationStrategyOrConfirmOptions;\n          }\n          sendOptions = options && {\n            skipPreflight: options.skipPreflight,\n            preflightCommitment: options.preflightCommitment || options.commitment,\n            minContextSlot: options.minContextSlot\n          };\n          _context.next = 4;\n          return connection.sendRawTransaction(rawTransaction, sendOptions);\n        case 4:\n          signature = _context.sent;\n          commitment = options && options.commitment;\n          confirmationPromise = confirmationStrategy ? connection.confirmTransaction(confirmationStrategy, commitment) : connection.confirmTransaction(signature, commitment);\n          _context.next = 9;\n          return confirmationPromise;\n        case 9:\n          status = _context.sent.value;\n          if (!status.err) {\n            _context.next = 12;\n            break;\n          }\n          throw new Error(\"Raw transaction \".concat(signature, \" failed (\").concat(JSON.stringify(status), \")\"));\n        case 12:\n          return _context.abrupt(\"return\", signature);\n        case 13:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return _sendAndConfirmRawTransaction.apply(this, arguments);\n}\n\n/**\n * There are 1-billion lamports in one SOL\n */\nvar LAMPORTS_PER_SOL = 1000000000;\nexport { Account, AddressLookupTableAccount, AddressLookupTableInstruction, AddressLookupTableProgram, Authorized, BLOCKHASH_CACHE_TIMEOUT_MS, BPF_LOADER_DEPRECATED_PROGRAM_ID, BPF_LOADER_PROGRAM_ID, BpfLoader, COMPUTE_BUDGET_INSTRUCTION_LAYOUTS, ComputeBudgetInstruction, ComputeBudgetProgram, Connection, Ed25519Program, Enum, EpochSchedule, FeeCalculatorLayout, Keypair, LAMPORTS_PER_SOL, LOOKUP_TABLE_INSTRUCTION_LAYOUTS, Loader, Lockup, MAX_SEED_LENGTH, Message, MessageAccountKeys, MessageV0, NONCE_ACCOUNT_LENGTH, NonceAccount, PACKET_DATA_SIZE, PUBLIC_KEY_LENGTH, PublicKey, SIGNATURE_LENGTH_IN_BYTES, SOLANA_SCHEMA, STAKE_CONFIG_ID, STAKE_INSTRUCTION_LAYOUTS, SYSTEM_INSTRUCTION_LAYOUTS, SYSVAR_CLOCK_PUBKEY, SYSVAR_EPOCH_SCHEDULE_PUBKEY, SYSVAR_INSTRUCTIONS_PUBKEY, SYSVAR_RECENT_BLOCKHASHES_PUBKEY, SYSVAR_RENT_PUBKEY, SYSVAR_REWARDS_PUBKEY, SYSVAR_SLOT_HASHES_PUBKEY, SYSVAR_SLOT_HISTORY_PUBKEY, SYSVAR_STAKE_HISTORY_PUBKEY, Secp256k1Program, SendTransactionError, SolanaJSONRPCError, SolanaJSONRPCErrorCode, StakeAuthorizationLayout, StakeInstruction, StakeProgram, Struct, SystemInstruction, SystemProgram, Transaction, TransactionExpiredBlockheightExceededError, TransactionExpiredNonceInvalidError, TransactionExpiredTimeoutError, TransactionInstruction, TransactionMessage, TransactionStatus, VALIDATOR_INFO_KEY, VERSION_PREFIX_MASK, VOTE_PROGRAM_ID, ValidatorInfo, VersionedMessage, VersionedTransaction, VoteAccount, VoteAuthorizationLayout, VoteInit, VoteInstruction, VoteProgram, clusterApiUrl, sendAndConfirmRawTransaction, sendAndConfirmTransaction };","map":{"version":3,"names":["generatePrivateKey","ed25519","utils","randomPrivateKey","generateKeypair","privateScalar","publicKey","getPublicKey","secretKey","Uint8Array","set","isOnCurve","ExtendedPoint","fromHex","_unused","sign","message","slice","verify","toBuffer","arr","Buffer","isBuffer","from","buffer","byteOffset","byteLength","Struct","properties","_classCallCheck","Object","assign","_createClass","key","value","encode","serialize","SOLANA_SCHEMA","decode","data","deserialize","decodeUnchecked","deserializeUnchecked","Enum","_Struct","_inherits","_super","_createSuper$4","_this","call","keys","length","Error","map","Map","MAX_SEED_LENGTH","PUBLIC_KEY_LENGTH","isPublicKeyData","_bn","undefined","uniquePublicKeyCounter","_Symbol$toStringTag","Symbol","toStringTag","PublicKey","_createSuper$3","decoded","bs58","BN","equals","eq","toBase58","toBytes","toJSON","buf","b","toArrayLike","zeroPad","alloc","copy","get","concat","toString","unique","_createWithSeed","_asyncToGenerator","_regeneratorRuntime","mark","_callee","fromPublicKey","seed","programId","publicKeyBytes","wrap","_callee$","_context","prev","next","sha256","abrupt","stop","createWithSeed","_x","_x2","_x3","apply","arguments","createProgramAddressSync","seeds","forEach","TypeError","_createProgramAddress","_callee2","_callee2$","_context2","createProgramAddress","_x4","_x5","findProgramAddressSync","nonce","address","seedsWithNonce","err","_findProgramAddress","_callee3","_callee3$","_context3","findProgramAddress","_x6","_x7","isOnCurve$1","pubkeyData","pubkey","kind","fields","Account","_publicKey","_secretKey","secretKeyBuffer","BPF_LOADER_DEPRECATED_PROGRAM_ID","PACKET_DATA_SIZE","VERSION_PREFIX_MASK","SIGNATURE_LENGTH_IN_BYTES","TransactionExpiredBlockheightExceededError","_Error","_createSuper$2","signature","_wrapNativeSuper","defineProperty","prototype","TransactionExpiredTimeoutError","_Error2","_super2","timeoutSeconds","_this2","toFixed","TransactionExpiredNonceInvalidError","_Error3","_super3","_this3","MessageAccountKeys","staticAccountKeys","accountKeysFromLookups","keySegments","push","writable","readonly","index","_iterator","_createForOfIteratorHelper$5","_step","s","n","done","keySegment","e","f","flat","compileInstructions","instructions","U8_MAX","keyIndexMap","findKeyIndex","keyIndex","instruction","programIdIndex","accountKeyIndexes","meta","property","BufferLayout","blob","rustString","rsl","struct","u32","offset","_decode","bind","_encode","rslShim","str","chars","span","authorized","lockup","ns64","voteInit","u8","voteAuthorizeWithSeedArgs","getAlloc","type","getItemAlloc","item","field","Array","isArray","elementLayout","layout","decodeLength","bytes","len","size","elem","shift","encodeLength","rem_len","assert","condition","CompiledKeys","payer","keyMetaMap","getMessageComponents","mapEntries","_toConsumableArray","entries","writableSigners","filter","_ref","_ref2","_slicedToArray","isSigner","isWritable","readonlySigners","_ref3","_ref4","writableNonSigners","_ref5","_ref6","readonlyNonSigners","_ref7","_ref8","header","numRequiredSignatures","numReadonlySignedAccounts","numReadonlyUnsignedAccounts","_writableSigners$","payerAddress","_ref9","_ref10","_ref11","_ref12","_ref13","_ref14","_ref15","_ref16","extractTableLookup","lookupTable","_this$drainKeysFoundI","drainKeysFoundInLookupTable","state","addresses","keyMeta","isInvoked","_this$drainKeysFoundI2","writableIndexes","drainedWritableKeys","_this$drainKeysFoundI3","_this$drainKeysFoundI4","readonlyIndexes","drainedReadonlyKeys","accountKey","lookupTableEntries","keyMetaFilter","lookupTableIndexes","drainedKeys","_createForOfIteratorHelper$4","_loop","_step$value","lookupTableIndex","findIndex","entry","compile","getOrInsertDefault","payerKeyMeta","_iterator2","_step2","ix","_iterator3","_step3","accountMeta","_keyMeta","Message","args","accountKeys","recentBlockhash","indexToProgramIds","account","accounts","getAccountKeys","isAccountSigner","isAccountWritable","numSignedAccounts","unsignedAccountIndex","numUnsignedAccounts","numWritableUnsignedAccounts","numWritableSignedAccounts","isProgramId","has","programIds","values","nonProgramIds","_","numKeys","keyCount","keyIndicesCount","dataCount","keyIndices","dataLength","instructionCount","instructionBuffer","instructionBufferLength","instructionLayout","seq","signDataLayout","transaction","signData","compiledKeys","payerKey","_compiledKeys$getMess","_compiledKeys$getMess2","byteArray","accountCount","i","_i","_accountCount","dataSlice","messageArgs","MessageV0","compiledInstructions","addressTableLookups","count","_createForOfIteratorHelper$3","lookup","numAccountKeysFromLookups","addressLookupTableAccounts","resolveAddressTableLookups","numStaticAccountKeys","lookupAccountKeysIndex","numWritableLookupAccountKeys","reduce","tableLookup","tableAccount","find","_iterator4","_step4","_index","encodedStaticAccountKeysLength","serializedInstructions","serializeInstructions","encodedInstructionsLength","serializedAddressTableLookups","serializeAddressTableLookups","encodedAddressTableLookupsLength","messageLayout","serializedMessage","MESSAGE_VERSION_0_PREFIX","serializedMessageLength","prefix","staticAccountKeysLength","instructionsLength","addressTableLookupsLength","serializedLength","_iterator5","_step5","encodedAccountKeyIndexesLength","encodedDataLength","_iterator6","_step6","encodedWritableIndexesLength","encodedReadonlyIndexesLength","addressTableLookupLayout","lookupTableAccounts","_iterator7","_step7","extractResult","_accountKeysFromLooku","_accountKeysFromLooku2","_extractResult","addressTableLookup","_extractResult$","maskedPrefix","version","splice","accountKeyIndexesLength","addressTableLookupsCount","_i2","writableIndexesLength","readonlyIndexesLength","VersionedMessage","deserializeMessageVersion","TransactionStatus","DEFAULT_SIGNATURE","fill","TransactionInstruction","opts","Transaction","signatures","feePayer","lastValidBlockHeight","nonceInfo","minNonceContextSlot","_message","_json","hasOwnProperty","minContextSlot","blockhash","_nonceInfo","nonceInstruction","signers","add","_len","items","_key","compileMessage","JSON","stringify","console","warn","accountMetas","_objectSpread$2","includes","uniqueMetas","pubkeyString","uniqueIndex","x","sort","y","options","localeMatcher","usage","sensitivity","ignorePunctuation","numeric","caseFirst","localeCompare","feePayerIndex","_uniqueMetas$splice","_uniqueMetas$splice2","payerMeta","unshift","_createForOfIteratorHelper$2","signedKeys","unsignedKeys","indexOf","_compile","valid","every","pair","serializeMessage","_getEstimatedFee","connection","getFeeForMessage","sent","getEstimatedFee","setSigners","_len2","_key2","seen","Set","_len3","_key3","uniqueSigners","_signers","signer","_partialSign","partialSign","_len4","_key4","_signers2","_len5","_key5","_addSignature","addSignature","sigpair","verifySignatures","requireAllSignatures","_verifySignatures","_step2$value","config","_Object$assign","_serialize","signatureCount","transactionLength","wireTransaction","keyObj","populate","sigPubkeyPair","some","TransactionMessage","compileToLegacyMessage","compileToV0Message","decompile","_createForOfIteratorHelper$1","compiledIx","VersionedTransaction","defaultSignatures","encodedSignaturesLength","transactionLayout","serializedTransaction","serializedTransactionLength","sign$1","messageData","signerPubkeys","_createForOfIteratorHelper","signerIndex","signaturesLength","NUM_TICKS_PER_SECOND","DEFAULT_TICKS_PER_SLOT","NUM_SLOTS_PER_SECOND","MS_PER_SLOT","SYSVAR_CLOCK_PUBKEY","SYSVAR_EPOCH_SCHEDULE_PUBKEY","SYSVAR_INSTRUCTIONS_PUBKEY","SYSVAR_RECENT_BLOCKHASHES_PUBKEY","SYSVAR_RENT_PUBKEY","SYSVAR_REWARDS_PUBKEY","SYSVAR_SLOT_HASHES_PUBKEY","SYSVAR_SLOT_HISTORY_PUBKEY","SYSVAR_STAKE_HISTORY_PUBKEY","sendAndConfirmTransaction","_sendAndConfirmTransaction","sendOptions","status","nonceAccountPubkey","skipPreflight","preflightCommitment","commitment","maxRetries","sendTransaction","confirmTransaction","abortSignal","nonceValue","sleep","ms","Promise","resolve","setTimeout","encodeData","allocLength","layoutFields","decodeData$1","FeeCalculatorLayout","nu64","NonceAccountLayout","NONCE_ACCOUNT_LENGTH","NonceAccount","authorizedPubkey","feeCalculator","fromAccountData","nonceAccount","encodeDecode","bigInt","_encodeDecode","bigIntLayout","src","toBigIntLE","toBufferLE","u64","SystemInstruction","decodeInstructionType","checkProgramId","instructionTypeLayout","typeIndex","_Object$entries","SYSTEM_INSTRUCTION_LAYOUTS","_Object$entries$_i","ixType","decodeCreateAccount","checkKeyLength","_decodeData","Create","lamports","space","fromPubkey","newAccountPubkey","decodeTransfer","_decodeData2","Transfer","toPubkey","decodeTransferWithSeed","_decodeData3","TransferWithSeed","basePubkey","decodeAllocate","_decodeData4","Allocate","accountPubkey","decodeAllocateWithSeed","_decodeData5","AllocateWithSeed","base","decodeAssign","_decodeData6","Assign","decodeAssignWithSeed","_decodeData7","AssignWithSeed","decodeCreateWithSeed","_decodeData8","CreateWithSeed","decodeNonceInitialize","_decodeData9","InitializeNonceAccount","noncePubkey","decodeNonceAdvance","AdvanceNonceAccount","decodeNonceWithdraw","_decodeData10","WithdrawNonceAccount","decodeNonceAuthorize","_decodeData11","AuthorizeNonceAccount","newAuthorizedPubkey","SystemProgram","expectedLength","freeze","UpgradeNonceAccount","createAccount","params","transfer","BigInt","_type","_type2","createAccountWithSeed","createNonceAccount","initParams","nonceInitialize","instructionData","nonceAdvance","nonceWithdraw","nonceAuthorize","allocate","_type3","CHUNK_SIZE","Loader","getMinNumSignatures","Math","ceil","chunkSize","_load","program","balanceNeeded","programInfo","dataLayout","array","transactions","_data","_transaction","REQUESTS_PER_SECOND","_dataLayout","_data2","_transaction2","deployCommitment","finalizeSignature","_yield$connection$con","context","currentSlot","getMinimumBalanceForRentExemption","getAccountInfo","executable","error","owner","bytesLength","bytesLengthPadding","_rpcEndpoint","all","getSlot","slot","t0","round","load","BPF_LOADER_PROGRAM_ID","BpfLoader","elf","loaderProgramId","objToString","objKeys","obj","name","val","isArrayProp","max","propVal","toStr","isFinite","fastStableStringify","returnVal","MINIMUM_SLOT_PER_EPOCH","trailingZeros","nextPowerOfTwo","EpochSchedule","slotsPerEpoch","leaderScheduleSlotOffset","warmup","firstNormalEpoch","firstNormalSlot","getEpoch","getEpochAndSlotIndex","epoch","epochLen","getSlotsInEpoch","slotIndex","normalSlotIndex","normalEpochIndex","floor","_epoch","_slotIndex","getFirstSlotInEpoch","pow","getLastSlotInEpoch","SendTransactionError","_createSuper$1","logs","SolanaJSONRPCErrorCode","JSON_RPC_SERVER_ERROR_BLOCK_CLEANED_UP","JSON_RPC_SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE","JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_VERIFICATION_FAILURE","JSON_RPC_SERVER_ERROR_BLOCK_NOT_AVAILABLE","JSON_RPC_SERVER_ERROR_NODE_UNHEALTHY","JSON_RPC_SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE","JSON_RPC_SERVER_ERROR_SLOT_SKIPPED","JSON_RPC_SERVER_ERROR_NO_SNAPSHOT","JSON_RPC_SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED","JSON_RPC_SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX","JSON_RPC_SERVER_ERROR_TRANSACTION_HISTORY_NOT_AVAILABLE","JSON_RPC_SCAN_ERROR","JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_LEN_MISMATCH","JSON_RPC_SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET","JSON_RPC_SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION","JSON_RPC_SERVER_ERROR_MIN_CONTEXT_SLOT_NOT_REACHED","SolanaJSONRPCError","customMessage","code","fetchImpl","globalThis","fetch","RpcWebSocketClient","_RpcWebSocketCommonCl","_createSuper","generate_request_id","webSocketFactory","url","rpc","createRpc","_objectSpread$1","autoconnect","max_reconnects","reconnect","reconnect_interval","underlyingSocket","socket","_this$underlyingSocke","readyState","_get2","_get","_getPrototypeOf","reject","notify","_this$underlyingSocke2","_get3","RpcWebSocketCommonClient","decodeData","LOOKUP_TABLE_META_SIZE","AddressLookupTableAccount","isActive","U64_MAX","deactivationSlot","accountData","LookupTableMetaLayout","serializedAddressesLen","numSerializedAddresses","_BufferLayout$struct$","lastExtendedSlot","lastExtendedSlotStartIndex","lastExtendedStartIndex","authority","URL_RE","makeWebsocketUrl","endpoint","matches","match","_matches","hostish","portWithColon","rest","protocol","startsWith","startPort","parseInt","websocketPort","PublicKeyFromString","coerce","instance","string","RawAccountDataResult","tuple","literal","BufferFromRawAccountData","BLOCKHASH_CACHE_TIMEOUT_MS","assertEndpointUrl","putativeUrl","test","extractCommitmentFromConfig","commitmentOrConfig","specifiedCommitment","specifiedConfig","_objectWithoutProperties","_excluded","createRpcResult","result","union","jsonrpc","id","unknown","optional","any","UnknownRpcResult","jsonRpcResult","schema","_objectSpread","create","jsonRpcResultAndContext","number","notificationResultAndContext","versionedMessageFromResponse","response","GetInflationGovernorResult","foundation","foundationTerm","initial","taper","terminal","GetInflationRewardResult","nullable","effectiveSlot","amount","postBalance","commission","GetRecentPrioritizationFeesResult","prioritizationFee","GetInflationRateResult","total","validator","GetEpochInfoResult","slotsInEpoch","absoluteSlot","blockHeight","transactionCount","GetEpochScheduleResult","boolean","GetLeaderScheduleResult","record","TransactionErrorResult","SignatureStatusResult","SignatureReceivedResult","VersionResult","SimulatedTransactionResponseStruct","rentEpoch","unitsConsumed","returnData","BlockProductionResponseStruct","byIdentity","range","firstSlot","lastSlot","createRpcClient","httpHeaders","customFetch","fetchMiddleware","disableRetryOnRateLimit","httpAgent","agent","fetchWithMiddleware","info","init","modifiedFetchArgs","modifiedInfo","modifiedInit","clientBrowser","RpcClient","request","callback","too_many_requests_retries","res","waitTime","text","method","body","headers","COMMON_HTTP_HEADERS","log","statusText","ok","createRpcRequest","client","createRpcBatchRequest","requests","batch","methodName","GetInflationGovernorRpcResult","GetInflationRateRpcResult","GetRecentPrioritizationFeesRpcResult","GetEpochInfoRpcResult","GetEpochScheduleRpcResult","GetLeaderScheduleRpcResult","SlotRpcResult","GetSupplyRpcResult","circulating","nonCirculating","nonCirculatingAccounts","TokenAmountResult","uiAmount","decimals","uiAmountString","GetTokenLargestAccountsResult","GetTokenAccountsByOwner","ParsedAccountDataResult","parsed","GetParsedTokenAccountsByOwner","GetLargestAccountsRpcResult","AccountInfoResult","KeyedAccountInfoResult","ParsedOrRawAccountData","ParsedAccountInfoResult","KeyedParsedAccountInfoResult","StakeActivationResult","active","inactive","GetConfirmedSignaturesForAddress2RpcResult","memo","blockTime","GetSignaturesForAddressRpcResult","AccountNotificationResult","subscription","ProgramAccountInfoResult","ProgramAccountNotificationResult","SlotInfoResult","parent","root","SlotNotificationResult","SlotUpdateResult","timestamp","stats","numTransactionEntries","numSuccessfulTransactions","numFailedTransactions","maxTransactionsPerEntry","SlotUpdateNotificationResult","SignatureNotificationResult","RootNotificationResult","ContactInfoResult","gossip","tpu","VoteAccountInfoResult","votePubkey","nodePubkey","activatedStake","epochVoteAccount","epochCredits","lastVote","rootSlot","GetVoteAccounts","current","delinquent","ConfirmationStatus","SignatureStatusResponse","confirmations","confirmationStatus","GetSignatureStatusesRpcResult","GetMinimumBalanceForRentExemptionRpcResult","AddressTableLookupStruct","ConfirmedTransactionResult","AnnotatedAccountKey","source","ConfirmedTransactionAccountsModeResult","ParsedInstructionResult","RawInstructionResult","InstructionResult","UnknownInstructionResult","ParsedOrRawInstruction","ParsedConfirmedTransactionResult","TokenBalanceResult","accountIndex","mint","uiTokenAmount","LoadedAddressesResult","ConfirmedTransactionMetaResult","fee","innerInstructions","preBalances","postBalances","logMessages","preTokenBalances","postTokenBalances","loadedAddresses","computeUnitsConsumed","ParsedConfirmedTransactionMetaResult","TransactionVersionStruct","RewardsResult","rewardType","GetBlockRpcResult","previousBlockhash","parentSlot","rewards","GetNoneModeBlockRpcResult","GetAccountsModeBlockRpcResult","GetParsedBlockRpcResult","GetParsedAccountsModeBlockRpcResult","GetParsedNoneModeBlockRpcResult","GetConfirmedBlockRpcResult","GetBlockSignaturesRpcResult","GetTransactionRpcResult","GetParsedTransactionRpcResult","GetRecentBlockhashAndContextRpcResult","lamportsPerSignature","GetLatestBlockhashRpcResult","IsBlockhashValidRpcResult","PerfSampleResult","numTransactions","numSlots","samplePeriodSecs","GetRecentPerformanceSamplesRpcResult","GetFeeCalculatorRpcResult","RequestAirdropRpcResult","SendTransactionRpcResult","LogsResult","LogsNotificationResult","_process$env$npm_pack","Connection","_commitmentOrConfig","_commitment","_confirmTransactionInitialTimeout","_rpcWsEndpoint","_rpcClient","_rpcRequest","_rpcBatchRequest","_rpcWebSocket","_rpcWebSocketConnected","_rpcWebSocketHeartbeat","_rpcWebSocketIdleTimeout","_rpcWebSocketGeneration","_disableBlockhashCaching","_pollingBlockhash","_blockhashInfo","latestBlockhash","lastFetch","transactionSignatures","simulatedSignatures","_nextClientSubscriptionId","_subscriptionDisposeFunctionsByClientSubscriptionId","_subscriptionHashByClientSubscriptionId","_subscriptionStateChangeCallbacksByHash","_subscriptionCallbacksByServerSubscriptionId","_subscriptionsByHash","_subscriptionsAutoDisposedByRpc","getBlockHeight","requestPromises","_callee4","_requestPromises$requ","_extractCommitmentFro","requestHash","_callee4$","_context4","_buildArgs","fastStableStringify$1","unsafeRes","finish","wsEndpoint","confirmTransactionInitialTimeout","Infinity","on","_wsOnOpen","_wsOnError","_wsOnClose","_wsOnAccountNotification","_wsOnProgramAccountNotification","_wsOnSlotNotification","_wsOnSlotUpdatesNotification","_wsOnSignatureNotification","_wsOnRootNotification","_wsOnLogsNotification","_getBalanceAndContext","_callee5","_extractCommitmentFro2","_callee5$","_context5","getBalanceAndContext","_getBalance","_callee6","_callee6$","_context6","then","getBalance","_x8","_x9","_getBlockTime","_callee7","_callee7$","_context7","getBlockTime","_x10","_getMinimumLedgerSlot","_callee8","_callee8$","_context8","getMinimumLedgerSlot","_getFirstAvailableBlock","_callee9","_callee9$","_context9","getFirstAvailableBlock","_getSupply","_callee10","configArg","_callee10$","_context10","getSupply","_x11","_getTokenSupply","_callee11","tokenMintAddress","_callee11$","_context11","getTokenSupply","_x12","_x13","_getTokenAccountBalance","_callee12","tokenAddress","_callee12$","_context12","getTokenAccountBalance","_x14","_x15","_getTokenAccountsByOwner","_callee13","ownerAddress","_extractCommitmentFro3","_args","_callee13$","_context13","getTokenAccountsByOwner","_x16","_x17","_x18","_getParsedTokenAccountsByOwner","_callee14","_callee14$","_context14","getParsedTokenAccountsByOwner","_x19","_x20","_x21","_getLargestAccounts","_callee15","arg","_callee15$","_context15","getLargestAccounts","_x22","_getTokenLargestAccounts","_callee16","mintAddress","_callee16$","_context16","getTokenLargestAccounts","_x23","_x24","_getAccountInfoAndContext","_callee17","_extractCommitmentFro4","_callee17$","_context17","getAccountInfoAndContext","_x25","_x26","_getParsedAccountInfo","_callee18","_extractCommitmentFro5","_callee18$","_context18","getParsedAccountInfo","_x27","_x28","_getAccountInfo","_callee19","_callee19$","_context19","_x29","_x30","_getMultipleParsedAccounts","_callee20","publicKeys","rawConfig","_extractCommitmentFro6","_callee20$","_context20","getMultipleParsedAccounts","_x31","_x32","_getMultipleAccountsInfoAndContext","_callee21","_extractCommitmentFro7","_callee21$","_context21","getMultipleAccountsInfoAndContext","_x33","_x34","_getMultipleAccountsInfo","_callee22","_callee22$","_context22","getMultipleAccountsInfo","_x35","_x36","_getStakeActivation","_callee23","_extractCommitmentFro8","_callee23$","_context23","getStakeActivation","_x37","_x38","_x39","_getProgramAccounts","_callee24","configOrCommitment","_extractCommitmentFro9","encoding","configWithoutEncoding","baseSchema","_callee24$","_context24","_excluded2","withContext","getProgramAccounts","_x40","_x41","_getParsedProgramAccounts","_callee25","_extractCommitmentFro10","_callee25$","_context25","getParsedProgramAccounts","_x42","_x43","_confirmTransaction","_callee26","strategy","rawSignature","_config$abortSignal","_config","decodedSignature","_callee26$","_context26","aborted","reason","confirmTransactionUsingLegacyTimeoutStrategy","confirmTransactionUsingBlockHeightExceedanceStrategy","confirmTransactionUsingDurableNonceStrategy","_x44","_x45","getCancellationPromise","signal","addEventListener","getTransactionConfirmationPromise","signatureSubscriptionId","disposeSignatureSubscriptionStateChangeObserver","confirmationPromise","onSignature","__type","PROCESSED","subscriptionSetupPromise","resolveSubscriptionSetup","_onSubscriptionStateChange","nextState","_callee27","_callee27$","_context27","getSignatureStatus","abortConfirmation","removeSignatureListener","_confirmTransactionUsingBlockHeightExceedanceStrategy","_callee30","_ref8$strategy","expiryPromise","_this$getTransactionC","cancellationPromise","outcome","_callee30$","_context30","checkBlockHeight","_callee28","_callee28$","_context28","_callee29","currentBlockHeight","_callee29$","_context29","BLOCKHEIGHT_EXCEEDED","race","_x46","_confirmTransactionUsingDurableNonceStrategy","_callee33","_this4","_ref11$strategy","_this$getTransactionC2","_signatureStatus","signatureStatus","_outcome$slotInWhichN","commitmentForStatus","_callee33$","_context34","currentNonceValue","lastCheckedSlot","getCurrentNonceValue","_callee31","_yield$_this4$getNonc","_context31","_callee31$","_context32","getNonceAndContext","_callee32","_callee32$","_context33","NONCE_INVALID","slotInWhichNonceDidAdvance","_x47","_confirmTransactionUsingLegacyTimeoutStrategy","_callee34","_this5","timeoutId","_this$getTransactionC3","_callee34$","_context35","timeoutMs","TIMED_OUT","clearTimeout","_x48","_getClusterNodes","_callee35","_callee35$","_context36","getClusterNodes","_getVoteAccounts","_callee36","_callee36$","_context37","getVoteAccounts","_x49","_getSlot","_callee37","_extractCommitmentFro11","_callee37$","_context38","_x50","_getSlotLeader","_callee38","_extractCommitmentFro12","_callee38$","_context39","getSlotLeader","_x51","_getSlotLeaders","_callee39","startSlot","limit","_callee39$","_context40","getSlotLeaders","_x52","_x53","_getSignatureStatus","_callee40","_yield$this$getSignat","_callee40$","_context41","getSignatureStatuses","_x54","_x55","_getSignatureStatuses","_callee41","_callee41$","_context42","_x56","_x57","_getTransactionCount","_callee42","_extractCommitmentFro13","_callee42$","_context43","getTransactionCount","_x58","_getTotalSupply","_callee43","_callee43$","_context44","excludeNonCirculatingAccountsList","getTotalSupply","_x59","_getInflationGovernor","_callee44","_callee44$","_context45","getInflationGovernor","_x60","_getInflationReward","_callee45","_extractCommitmentFro14","_callee45$","_context46","getInflationReward","_x61","_x62","_x63","_getInflationRate","_callee46","_callee46$","_context47","getInflationRate","_getEpochInfo","_callee47","_extractCommitmentFro15","_callee47$","_context48","getEpochInfo","_x64","_getEpochSchedule","_callee48","epochSchedule","_callee48$","_context49","getEpochSchedule","_getLeaderSchedule","_callee49","_callee49$","_context50","getLeaderSchedule","_getMinimumBalanceForRentExemption","_callee50","_callee50$","_context51","_x65","_x66","_getRecentBlockhashAndContext","_callee51","_callee51$","_context52","getRecentBlockhashAndContext","_x67","_getRecentPerformanceSamples","_callee52","_callee52$","_context53","getRecentPerformanceSamples","_x68","_getFeeCalculatorForBlockhash","_callee53","_res$result","_callee53$","_context54","getFeeCalculatorForBlockhash","_x69","_x70","_getFeeForMessage","_callee54","wireMessage","_callee54$","_context55","_x71","_x72","_getRecentPrioritizationFees","_callee55","_config$lockedWritabl","_callee55$","_context56","lockedWritableAccounts","getRecentPrioritizationFees","_x73","_getRecentBlockhash","_callee56","_callee56$","_context57","getRecentBlockhash","_x74","_getLatestBlockhash","_callee57","_callee57$","_context58","getLatestBlockhashAndContext","getLatestBlockhash","_x75","_getLatestBlockhashAndContext","_callee58","_extractCommitmentFro16","_callee58$","_context59","_x76","_isBlockhashValid","_callee59","_extractCommitmentFro17","_callee59$","_context60","isBlockhashValid","_x77","_x78","_getVersion","_callee60","_callee60$","_context61","getVersion","_getGenesisHash","_callee61","_callee61$","_context62","getGenesisHash","_getBlock","_callee62","_extractCommitmentFro18","_res","_res2","_callee62$","_context63","_buildArgsAtLeastConfirmed","transactionDetails","t1","getBlock","_x79","_x80","_getParsedBlock","_callee63","_extractCommitmentFro19","_res3","_res4","_callee63$","_context64","getParsedBlock","_x81","_x82","_getBlockProduction","_callee64","extra","c","_callee64$","_context65","_excluded3","getBlockProduction","_x83","_getTransaction","_callee65","_extractCommitmentFro20","_callee65$","_context66","getTransaction","_x84","_x85","_getParsedTransaction","_callee66","_extractCommitmentFro21","_callee66$","_context67","getParsedTransaction","_x86","_x87","_getParsedTransactions","_callee67","_this6","_extractCommitmentFro22","_callee67$","_context68","getParsedTransactions","_x88","_x89","_getTransactions","_callee68","_this7","_extractCommitmentFro23","_callee68$","_context69","getTransactions","_x90","_x91","_getConfirmedBlock","_callee69","block","_callee69$","_context70","_ref17","getConfirmedBlock","_x92","_x93","_getBlocks","_callee70","endSlot","_callee70$","_context71","getBlocks","_x94","_x95","_x96","_getBlockSignatures","_callee71","_callee71$","_context72","getBlockSignatures","_x97","_x98","_getConfirmedBlockSignatures","_callee72","_callee72$","_context73","getConfirmedBlockSignatures","_x99","_x100","_getConfirmedTransaction","_callee73","_callee73$","_context74","getConfirmedTransaction","_x101","_x102","_getParsedConfirmedTransaction","_callee74","_callee74$","_context75","getParsedConfirmedTransaction","_x103","_x104","_getParsedConfirmedTransactions","_callee75","_this8","_callee75$","_context76","getParsedConfirmedTransactions","_x105","_x106","_getConfirmedSignaturesForAddress","_callee76","firstAvailableBlock","highestConfirmedRoot","_block","confirmedSignatureInfo","_callee76$","_context77","until","before","getConfirmedSignaturesForAddress2","getConfirmedSignaturesForAddress","_x107","_x108","_x109","_getConfirmedSignaturesForAddress2","_callee77","_callee77$","_context78","_x110","_x111","_x112","_getSignaturesForAddress","_callee78","_callee78$","_context79","getSignaturesForAddress","_x113","_x114","_x115","_getAddressLookupTable","_callee79","_yield$this$getAccoun","accountInfo","_callee79$","_context80","getAddressLookupTable","_x116","_x117","_getNonceAndContext","_callee80","_yield$this$getAccoun2","_callee80$","_context81","_x118","_x119","_getNonce","_callee81","_callee81$","_context82","getNonce","_x120","_x121","_requestAirdrop","_callee82","to","_callee82$","_context83","requestAirdrop","_x122","_x123","_blockhashWithExpiryBlockHeight2","_callee83","disableCache","timeSinceFetch","expired","_callee83$","_context84","Date","now","_pollNewBlockhash","_blockhashWithExpiryBlockHeight","_x124","_pollNewBlockhash2","_callee84","startTime","cachedLatestBlockhash","cachedBlockhash","_callee84$","_context85","_getStakeMinimumDelegation","_callee85","_extractCommitmentFro24","_callee85$","_context86","getStakeMinimumDelegation","_x125","_simulateTransaction","_callee86","transactionOrMessage","configOrSigners","includeAccounts","versionedTx","_wireTransaction","_encodedTransaction","_config2","_args87","_unsafeRes","_res5","originalTx","_signature","encodedTransaction","_logs","traceIndent","logTrace","_callee86$","_context87","sigVerify","join","simulateTransaction","_x126","_x127","_x128","_sendTransaction","_callee87","signersOrOptions","_wireTransaction2","_signature2","_callee87$","_context88","sendRawTransaction","_x129","_x130","_x131","_sendRawTransaction","_callee88","rawTransaction","_callee88$","_context89","sendEncodedTransaction","_x132","_x133","_sendEncodedTransaction","_callee89","_logs2","_callee89$","_context90","_x134","_x135","_this9","setInterval","_callee90","_callee90$","_context91","_updateSubscriptions","_this10","Number","MAX_SAFE_INTEGER","clearInterval","_ref19","_ref20","hash","_setSubscription","nextSubscription","_this$_subscriptionsB","prevState","stateChangeCallbacks","cb","_unused2","clientSubscriptionId","_this$_subscriptionSt","_this11","_updateSubscriptions2","_callee94","_this12","activeWebSocketGeneration","isCurrentConnectionStillActive","_callee94$","_context95","close","connect","_ref21","_callee93","_callee93$","_context94","callbacks","serverSubscriptionId","_callee91","_serverSubscriptionId","_callee91$","_context92","_callee92","unsubscribeMethod","_callee92$","_context93","_x136","_handleServerNotification","callbackArgs","notification","_create","_makeSubscription","subscriptionConfig","_this13","existingSubscription","_callee95","_callee95$","_context96","onAccountChange","_removeAccountChangeListener","_callee96","_callee96$","_context97","_unsubscribeClientSubscription","removeAccountChangeListener","_x137","_create2","accountId","onProgramAccountChange","filters","_removeProgramAccountChangeListener","_callee97","_callee97$","_context98","removeProgramAccountChangeListener","_x138","onLogs","_typeof","mentions","_removeOnLogsListener","_callee98","_callee98$","_context99","removeOnLogsListener","_x139","_create3","_create4","onSlotChange","_removeSlotChangeListener","_callee99","_callee99$","_context100","removeSlotChangeListener","_x140","_create5","onSlotUpdate","_removeSlotUpdateListener","_callee100","_callee100$","_context101","removeSlotUpdateListener","_x141","_unsubscribeClientSubscription2","_callee101","subscriptionName","dispose","_callee101$","_context102","_x142","_x143","override","_options","_create6","_callback","_this14","_err","onSignatureWithOptions","_callback2","_this15","_options$commitment","_excluded4","_removeSignatureListener","_callee102","_callee102$","_context103","_x144","_create7","onRootChange","_removeRootChangeListener","_callee103","_callee103$","_context104","removeRootChangeListener","_x145","Keypair","keypair","_keypair","generate","fromSecretKey","skipValidation","computedPublicKey","ii","fromSeed","LOOKUP_TABLE_INSTRUCTION_LAYOUTS","CreateLookupTable","FreezeLookupTable","ExtendLookupTable","DeactivateLookupTable","CloseLookupTable","AddressLookupTableInstruction","layoutType","decodeCreateLookupTable","checkKeysLength","recentSlot","decodeExtendLookupTable","decodeCloseLookupTable","recipient","decodeFreezeLookupTable","decodeDeactivateLookupTable","AddressLookupTableProgram","createLookupTable","_PublicKey$findProgra","_PublicKey$findProgra2","lookupTableAddress","bumpSeed","freezeLookupTable","extendLookupTable","addr","deactivateLookupTable","closeLookupTable","ComputeBudgetInstruction","COMPUTE_BUDGET_INSTRUCTION_LAYOUTS","decodeRequestUnits","RequestUnits","units","additionalFee","decodeRequestHeapFrame","RequestHeapFrame","decodeSetComputeUnitLimit","SetComputeUnitLimit","decodeSetComputeUnitPrice","SetComputeUnitPrice","microLamports","ComputeBudgetProgram","requestUnits","requestHeapFrame","setComputeUnitLimit","setComputeUnitPrice","PRIVATE_KEY_BYTES$1","PUBLIC_KEY_BYTES$1","SIGNATURE_BYTES","ED25519_INSTRUCTION_LAYOUT","u16","Ed25519Program","createInstructionWithPublicKey","instructionIndex","publicKeyOffset","signatureOffset","messageDataOffset","numSignatures","padding","signatureInstructionIndex","publicKeyInstructionIndex","messageDataSize","messageInstructionIndex","createInstructionWithPrivateKey","privateKey","ecdsaSign","msgHash","privKey","secp256k1","toCompactRawBytes","recovery","isValidPrivateKey","publicKeyCreate","PRIVATE_KEY_BYTES","ETHEREUM_ADDRESS_BYTES","PUBLIC_KEY_BYTES","SIGNATURE_OFFSETS_SERIALIZED_SIZE","SECP256K1_INSTRUCTION_LAYOUT","Secp256k1Program","publicKeyToEthAddress","keccak_256","recoveryId","createInstructionWithEthAddress","ethAddress","rawAddress","_params$instructionIn","substr","dataStart","ethAddressOffset","ethAddressInstructionIndex","pkey","messageHash","_ecdsaSign","_ecdsaSign2","STAKE_CONFIG_ID","Authorized","staker","withdrawer","Lockup","unixTimestamp","custodian","StakeInstruction","STAKE_INSTRUCTION_LAYOUTS","decodeInitialize","Initialize","stakePubkey","decodeDelegate","Delegate","decodeAuthorize","Authorize","newAuthorized","stakeAuthorizationType","o","custodianPubkey","decodeAuthorizeWithSeed","AuthorizeWithSeed","authoritySeed","authorityOwner","authorityBase","decodeSplit","Split","splitStakePubkey","decodeMerge","Merge","sourceStakePubKey","decodeWithdraw","Withdraw","decodeDeactivate","Deactivate","StakeProgram","StakeAuthorizationLayout","Staker","Withdrawer","initialize","maybeLockup","delegate","authorize","authorizeWithSeed","splitInstruction","split","splitWithSeed","merge","withdraw","deactivate","VoteInit","authorizedVoter","authorizedWithdrawer","VoteInstruction","VOTE_INSTRUCTION_LAYOUTS","decodeInitializeAccount","InitializeAccount","voteAuthorizationType","_decodeData3$voteAuth","currentAuthorityDerivedKeyOwnerPubkey","currentAuthorityDerivedKeySeed","currentAuthorityDerivedKeyBasePubkey","authorizedWithdrawerPubkey","VoteProgram","VoteAuthorizationLayout","Voter","initializeAccount","safeWithdraw","currentVoteAccountBalance","rentExemptMinimum","VALIDATOR_INFO_KEY","InfoString","website","details","keybaseUsername","ValidatorInfo","fromConfigData","configKeyCount","configKeys","rawInfo","parse","assert$1","VOTE_PROGRAM_ID","VoteAccountLayout","VoteAccount","votes","authorizedVoters","priorVoters","lastTimestamp","versionOffset","va","rootSlotValid","parseAuthorizedVoter","getPriorVoters","parsePriorVoters","epochOfLastAuthorizedSwitch","targetEpoch","idx","isEmpty","http","devnet","testnet","https","clusterApiUrl","cluster","tls","sendAndConfirmRawTransaction","_sendAndConfirmRawTransaction","confirmationStrategyOrConfirmOptions","maybeConfirmOptions","confirmationStrategy","LAMPORTS_PER_SOL"],"sources":["/home/conel0826/theblokc-solana-dev-bootcamp/my-app/node_modules/@solana/web3.js/src/utils/ed25519.ts","/home/conel0826/theblokc-solana-dev-bootcamp/my-app/node_modules/@solana/web3.js/src/utils/to-buffer.ts","/home/conel0826/theblokc-solana-dev-bootcamp/my-app/node_modules/@solana/web3.js/src/utils/borsh-schema.ts","/home/conel0826/theblokc-solana-dev-bootcamp/my-app/node_modules/@solana/web3.js/src/publickey.ts","/home/conel0826/theblokc-solana-dev-bootcamp/my-app/node_modules/@solana/web3.js/src/account.ts","/home/conel0826/theblokc-solana-dev-bootcamp/my-app/node_modules/@solana/web3.js/src/bpf-loader-deprecated.ts","/home/conel0826/theblokc-solana-dev-bootcamp/my-app/node_modules/@solana/web3.js/src/transaction/constants.ts","/home/conel0826/theblokc-solana-dev-bootcamp/my-app/node_modules/@solana/web3.js/src/transaction/expiry-custom-errors.ts","/home/conel0826/theblokc-solana-dev-bootcamp/my-app/node_modules/@solana/web3.js/src/message/account-keys.ts","/home/conel0826/theblokc-solana-dev-bootcamp/my-app/node_modules/@solana/web3.js/src/layout.ts","/home/conel0826/theblokc-solana-dev-bootcamp/my-app/node_modules/@solana/web3.js/src/utils/shortvec-encoding.ts","/home/conel0826/theblokc-solana-dev-bootcamp/my-app/node_modules/@solana/web3.js/src/utils/assert.ts","/home/conel0826/theblokc-solana-dev-bootcamp/my-app/node_modules/@solana/web3.js/src/message/compiled-keys.ts","/home/conel0826/theblokc-solana-dev-bootcamp/my-app/node_modules/@solana/web3.js/src/message/legacy.ts","/home/conel0826/theblokc-solana-dev-bootcamp/my-app/node_modules/@solana/web3.js/src/message/v0.ts","/home/conel0826/theblokc-solana-dev-bootcamp/my-app/node_modules/@solana/web3.js/src/message/versioned.ts","/home/conel0826/theblokc-solana-dev-bootcamp/my-app/node_modules/@solana/web3.js/src/transaction/legacy.ts","/home/conel0826/theblokc-solana-dev-bootcamp/my-app/node_modules/@solana/web3.js/src/transaction/message.ts","/home/conel0826/theblokc-solana-dev-bootcamp/my-app/node_modules/@solana/web3.js/src/transaction/versioned.ts","/home/conel0826/theblokc-solana-dev-bootcamp/my-app/node_modules/@solana/web3.js/src/timing.ts","/home/conel0826/theblokc-solana-dev-bootcamp/my-app/node_modules/@solana/web3.js/src/sysvar.ts","/home/conel0826/theblokc-solana-dev-bootcamp/my-app/node_modules/@solana/web3.js/src/utils/send-and-confirm-transaction.ts","/home/conel0826/theblokc-solana-dev-bootcamp/my-app/node_modules/@solana/web3.js/src/utils/sleep.ts","/home/conel0826/theblokc-solana-dev-bootcamp/my-app/node_modules/@solana/web3.js/src/instruction.ts","/home/conel0826/theblokc-solana-dev-bootcamp/my-app/node_modules/@solana/web3.js/src/fee-calculator.ts","/home/conel0826/theblokc-solana-dev-bootcamp/my-app/node_modules/@solana/web3.js/src/nonce-account.ts","/home/conel0826/theblokc-solana-dev-bootcamp/my-app/node_modules/@solana/web3.js/src/utils/bigint.ts","/home/conel0826/theblokc-solana-dev-bootcamp/my-app/node_modules/@solana/web3.js/src/programs/system.ts","/home/conel0826/theblokc-solana-dev-bootcamp/my-app/node_modules/@solana/web3.js/src/loader.ts","/home/conel0826/theblokc-solana-dev-bootcamp/my-app/node_modules/@solana/web3.js/src/bpf-loader.ts","/home/conel0826/theblokc-solana-dev-bootcamp/my-app/node_modules/node_modules/.pnpm/fast-stable-stringify@1.0.0/node_modules/fast-stable-stringify/index.js","/home/conel0826/theblokc-solana-dev-bootcamp/my-app/node_modules/@solana/web3.js/src/epoch-schedule.ts","/home/conel0826/theblokc-solana-dev-bootcamp/my-app/node_modules/@solana/web3.js/src/errors.ts","/home/conel0826/theblokc-solana-dev-bootcamp/my-app/node_modules/@solana/web3.js/src/__forks__/browser/fetch-impl.ts","/home/conel0826/theblokc-solana-dev-bootcamp/my-app/node_modules/@solana/web3.js/src/rpc-websocket.ts","/home/conel0826/theblokc-solana-dev-bootcamp/my-app/node_modules/@solana/web3.js/src/account-data.ts","/home/conel0826/theblokc-solana-dev-bootcamp/my-app/node_modules/@solana/web3.js/src/programs/address-lookup-table/state.ts","/home/conel0826/theblokc-solana-dev-bootcamp/my-app/node_modules/@solana/web3.js/src/utils/makeWebsocketUrl.ts","/home/conel0826/theblokc-solana-dev-bootcamp/my-app/node_modules/@solana/web3.js/src/connection.ts","/home/conel0826/theblokc-solana-dev-bootcamp/my-app/node_modules/@solana/web3.js/src/keypair.ts","/home/conel0826/theblokc-solana-dev-bootcamp/my-app/node_modules/@solana/web3.js/src/programs/address-lookup-table/index.ts","/home/conel0826/theblokc-solana-dev-bootcamp/my-app/node_modules/@solana/web3.js/src/programs/compute-budget.ts","/home/conel0826/theblokc-solana-dev-bootcamp/my-app/node_modules/@solana/web3.js/src/programs/ed25519.ts","/home/conel0826/theblokc-solana-dev-bootcamp/my-app/node_modules/@solana/web3.js/src/utils/secp256k1.ts","/home/conel0826/theblokc-solana-dev-bootcamp/my-app/node_modules/@solana/web3.js/src/programs/secp256k1.ts","/home/conel0826/theblokc-solana-dev-bootcamp/my-app/node_modules/@solana/web3.js/src/programs/stake.ts","/home/conel0826/theblokc-solana-dev-bootcamp/my-app/node_modules/@solana/web3.js/src/programs/vote.ts","/home/conel0826/theblokc-solana-dev-bootcamp/my-app/node_modules/@solana/web3.js/src/validator-info.ts","/home/conel0826/theblokc-solana-dev-bootcamp/my-app/node_modules/@solana/web3.js/src/vote-account.ts","/home/conel0826/theblokc-solana-dev-bootcamp/my-app/node_modules/@solana/web3.js/src/utils/cluster.ts","/home/conel0826/theblokc-solana-dev-bootcamp/my-app/node_modules/@solana/web3.js/src/utils/send-and-confirm-raw-transaction.ts","/home/conel0826/theblokc-solana-dev-bootcamp/my-app/node_modules/@solana/web3.js/src/index.ts"],"sourcesContent":["import {ed25519} from '@noble/curves/ed25519';\n\n/**\n * A 64 byte secret key, the first 32 bytes of which is the\n * private scalar and the last 32 bytes is the public key.\n * Read more: https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/\n */\ntype Ed25519SecretKey = Uint8Array;\n\n/**\n * Ed25519 Keypair\n */\nexport interface Ed25519Keypair {\n  publicKey: Uint8Array;\n  secretKey: Ed25519SecretKey;\n}\n\nexport const generatePrivateKey = ed25519.utils.randomPrivateKey;\nexport const generateKeypair = (): Ed25519Keypair => {\n  const privateScalar = ed25519.utils.randomPrivateKey();\n  const publicKey = getPublicKey(privateScalar);\n  const secretKey = new Uint8Array(64);\n  secretKey.set(privateScalar);\n  secretKey.set(publicKey, 32);\n  return {\n    publicKey,\n    secretKey,\n  };\n};\nexport const getPublicKey = ed25519.getPublicKey;\nexport function isOnCurve(publicKey: Uint8Array): boolean {\n  try {\n    ed25519.ExtendedPoint.fromHex(publicKey);\n    return true;\n  } catch {\n    return false;\n  }\n}\nexport const sign = (\n  message: Parameters<typeof ed25519.sign>[0],\n  secretKey: Ed25519SecretKey,\n) => ed25519.sign(message, secretKey.slice(0, 32));\nexport const verify = ed25519.verify;\n","import {Buffer} from 'buffer';\n\nexport const toBuffer = (arr: Buffer | Uint8Array | Array<number>): Buffer => {\n  if (Buffer.isBuffer(arr)) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return Buffer.from(arr);\n  }\n};\n","import {Buffer} from 'buffer';\nimport {serialize, deserialize, deserializeUnchecked} from 'borsh';\n\n// Class wrapping a plain object\nexport class Struct {\n  constructor(properties: any) {\n    Object.assign(this, properties);\n  }\n\n  encode(): Buffer {\n    return Buffer.from(serialize(SOLANA_SCHEMA, this));\n  }\n\n  static decode(data: Buffer): any {\n    return deserialize(SOLANA_SCHEMA, this, data);\n  }\n\n  static decodeUnchecked(data: Buffer): any {\n    return deserializeUnchecked(SOLANA_SCHEMA, this, data);\n  }\n}\n\n// Class representing a Rust-compatible enum, since enums are only strings or\n// numbers in pure JS\nexport class Enum extends Struct {\n  enum: string = '';\n  constructor(properties: any) {\n    super(properties);\n    if (Object.keys(properties).length !== 1) {\n      throw new Error('Enum can only take single value');\n    }\n    Object.keys(properties).map(key => {\n      this.enum = key;\n    });\n  }\n}\n\nexport const SOLANA_SCHEMA: Map<Function, any> = new Map();\n","import BN from 'bn.js';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport {sha256} from '@noble/hashes/sha256';\n\nimport {isOnCurve} from './utils/ed25519';\nimport {Struct, SOLANA_SCHEMA} from './utils/borsh-schema';\nimport {toBuffer} from './utils/to-buffer';\n\n/**\n * Maximum length of derived pubkey seed\n */\nexport const MAX_SEED_LENGTH = 32;\n\n/**\n * Size of public key in bytes\n */\nexport const PUBLIC_KEY_LENGTH = 32;\n\n/**\n * Value to be converted into public key\n */\nexport type PublicKeyInitData =\n  | number\n  | string\n  | Uint8Array\n  | Array<number>\n  | PublicKeyData;\n\n/**\n * JSON object representation of PublicKey class\n */\nexport type PublicKeyData = {\n  /** @internal */\n  _bn: BN;\n};\n\nfunction isPublicKeyData(value: PublicKeyInitData): value is PublicKeyData {\n  return (value as PublicKeyData)._bn !== undefined;\n}\n\n// local counter used by PublicKey.unique()\nlet uniquePublicKeyCounter = 1;\n\n/**\n * A public key\n */\nexport class PublicKey extends Struct {\n  /** @internal */\n  _bn: BN;\n\n  /**\n   * Create a new PublicKey object\n   * @param value ed25519 public key as buffer or base-58 encoded string\n   */\n  constructor(value: PublicKeyInitData) {\n    super({});\n    if (isPublicKeyData(value)) {\n      this._bn = value._bn;\n    } else {\n      if (typeof value === 'string') {\n        // assume base 58 encoding by default\n        const decoded = bs58.decode(value);\n        if (decoded.length != PUBLIC_KEY_LENGTH) {\n          throw new Error(`Invalid public key input`);\n        }\n        this._bn = new BN(decoded);\n      } else {\n        this._bn = new BN(value);\n      }\n\n      if (this._bn.byteLength() > PUBLIC_KEY_LENGTH) {\n        throw new Error(`Invalid public key input`);\n      }\n    }\n  }\n\n  /**\n   * Returns a unique PublicKey for tests and benchmarks using a counter\n   */\n  static unique(): PublicKey {\n    const key = new PublicKey(uniquePublicKeyCounter);\n    uniquePublicKeyCounter += 1;\n    return new PublicKey(key.toBuffer());\n  }\n\n  /**\n   * Default public key value. The base58-encoded string representation is all ones (as seen below)\n   * The underlying BN number is 32 bytes that are all zeros\n   */\n  static default: PublicKey = new PublicKey('11111111111111111111111111111111');\n\n  /**\n   * Checks if two publicKeys are equal\n   */\n  equals(publicKey: PublicKey): boolean {\n    return this._bn.eq(publicKey._bn);\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toBase58(): string {\n    return bs58.encode(this.toBytes());\n  }\n\n  toJSON(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Return the byte array representation of the public key in big endian\n   */\n  toBytes(): Uint8Array {\n    const buf = this.toBuffer();\n    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);\n  }\n\n  /**\n   * Return the Buffer representation of the public key in big endian\n   */\n  toBuffer(): Buffer {\n    const b = this._bn.toArrayLike(Buffer);\n    if (b.length === PUBLIC_KEY_LENGTH) {\n      return b;\n    }\n\n    const zeroPad = Buffer.alloc(32);\n    b.copy(zeroPad, 32 - b.length);\n    return zeroPad;\n  }\n\n  get [Symbol.toStringTag](): string {\n    return `PublicKey(${this.toString()})`;\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toString(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Derive a public key from another key, a seed, and a program ID.\n   * The program ID will also serve as the owner of the public key, giving\n   * it permission to write data to the account.\n   */\n  /* eslint-disable require-await */\n  static async createWithSeed(\n    fromPublicKey: PublicKey,\n    seed: string,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    const buffer = Buffer.concat([\n      fromPublicKey.toBuffer(),\n      Buffer.from(seed),\n      programId.toBuffer(),\n    ]);\n    const publicKeyBytes = sha256(buffer);\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Derive a program address from seeds and a program ID.\n   */\n  /* eslint-disable require-await */\n  static createProgramAddressSync(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): PublicKey {\n    let buffer = Buffer.alloc(0);\n    seeds.forEach(function (seed) {\n      if (seed.length > MAX_SEED_LENGTH) {\n        throw new TypeError(`Max seed length exceeded`);\n      }\n      buffer = Buffer.concat([buffer, toBuffer(seed)]);\n    });\n    buffer = Buffer.concat([\n      buffer,\n      programId.toBuffer(),\n      Buffer.from('ProgramDerivedAddress'),\n    ]);\n    const publicKeyBytes = sha256(buffer);\n    if (isOnCurve(publicKeyBytes)) {\n      throw new Error(`Invalid seeds, address must fall off the curve`);\n    }\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Async version of createProgramAddressSync\n   * For backwards compatibility\n   *\n   * @deprecated Use {@link createProgramAddressSync} instead\n   */\n  /* eslint-disable require-await */\n  static async createProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    return this.createProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Find a valid program address\n   *\n   * Valid program addresses must fall off the ed25519 curve.  This function\n   * iterates a nonce until it finds one that when combined with the seeds\n   * results in a valid program address.\n   */\n  static findProgramAddressSync(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): [PublicKey, number] {\n    let nonce = 255;\n    let address;\n    while (nonce != 0) {\n      try {\n        const seedsWithNonce = seeds.concat(Buffer.from([nonce]));\n        address = this.createProgramAddressSync(seedsWithNonce, programId);\n      } catch (err) {\n        if (err instanceof TypeError) {\n          throw err;\n        }\n        nonce--;\n        continue;\n      }\n      return [address, nonce];\n    }\n    throw new Error(`Unable to find a viable program address nonce`);\n  }\n\n  /**\n   * Async version of findProgramAddressSync\n   * For backwards compatibility\n   *\n   * @deprecated Use {@link findProgramAddressSync} instead\n   */\n  static async findProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<[PublicKey, number]> {\n    return this.findProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Check that a pubkey is on the ed25519 curve.\n   */\n  static isOnCurve(pubkeyData: PublicKeyInitData): boolean {\n    const pubkey = new PublicKey(pubkeyData);\n    return isOnCurve(pubkey.toBytes());\n  }\n}\n\nSOLANA_SCHEMA.set(PublicKey, {\n  kind: 'struct',\n  fields: [['_bn', 'u256']],\n});\n","import {Buffer} from 'buffer';\n\nimport {generatePrivateKey, getPublicKey} from './utils/ed25519';\nimport {toBuffer} from './utils/to-buffer';\nimport {PublicKey} from './publickey';\n\n/**\n * An account key pair (public and secret keys).\n *\n * @deprecated since v1.10.0, please use {@link Keypair} instead.\n */\nexport class Account {\n  /** @internal */\n  private _publicKey: Buffer;\n  /** @internal */\n  private _secretKey: Buffer;\n\n  /**\n   * Create a new Account object\n   *\n   * If the secretKey parameter is not provided a new key pair is randomly\n   * created for the account\n   *\n   * @param secretKey Secret key for the account\n   */\n  constructor(secretKey?: Uint8Array | Array<number>) {\n    if (secretKey) {\n      const secretKeyBuffer = toBuffer(secretKey);\n      if (secretKey.length !== 64) {\n        throw new Error('bad secret key size');\n      }\n      this._publicKey = secretKeyBuffer.slice(32, 64);\n      this._secretKey = secretKeyBuffer.slice(0, 32);\n    } else {\n      this._secretKey = toBuffer(generatePrivateKey());\n      this._publicKey = toBuffer(getPublicKey(this._secretKey));\n    }\n  }\n\n  /**\n   * The public key for this account\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._publicKey);\n  }\n\n  /**\n   * The **unencrypted** secret key for this account. The first 32 bytes\n   * is the private scalar and the last 32 bytes is the public key.\n   * Read more: https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/\n   */\n  get secretKey(): Buffer {\n    return Buffer.concat([this._secretKey, this._publicKey], 64);\n  }\n}\n","import {PublicKey} from './publickey';\n\nexport const BPF_LOADER_DEPRECATED_PROGRAM_ID = new PublicKey(\n  'BPFLoader1111111111111111111111111111111111',\n);\n","/**\n * Maximum over-the-wire size of a Transaction\n *\n * 1280 is IPv6 minimum MTU\n * 40 bytes is the size of the IPv6 header\n * 8 bytes is the size of the fragment header\n */\nexport const PACKET_DATA_SIZE = 1280 - 40 - 8;\n\nexport const VERSION_PREFIX_MASK = 0x7f;\n\nexport const SIGNATURE_LENGTH_IN_BYTES = 64;\n","export class TransactionExpiredBlockheightExceededError extends Error {\n  signature: string;\n\n  constructor(signature: string) {\n    super(`Signature ${signature} has expired: block height exceeded.`);\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(\n  TransactionExpiredBlockheightExceededError.prototype,\n  'name',\n  {\n    value: 'TransactionExpiredBlockheightExceededError',\n  },\n);\n\nexport class TransactionExpiredTimeoutError extends Error {\n  signature: string;\n\n  constructor(signature: string, timeoutSeconds: number) {\n    super(\n      `Transaction was not confirmed in ${timeoutSeconds.toFixed(\n        2,\n      )} seconds. It is ` +\n        'unknown if it succeeded or failed. Check signature ' +\n        `${signature} using the Solana Explorer or CLI tools.`,\n    );\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(TransactionExpiredTimeoutError.prototype, 'name', {\n  value: 'TransactionExpiredTimeoutError',\n});\n\nexport class TransactionExpiredNonceInvalidError extends Error {\n  signature: string;\n\n  constructor(signature: string) {\n    super(`Signature ${signature} has expired: the nonce is no longer valid.`);\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(TransactionExpiredNonceInvalidError.prototype, 'name', {\n  value: 'TransactionExpiredNonceInvalidError',\n});\n","import {LoadedAddresses} from '../connection';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport {MessageCompiledInstruction} from './index';\n\nexport type AccountKeysFromLookups = LoadedAddresses;\n\nexport class MessageAccountKeys {\n  staticAccountKeys: Array<PublicKey>;\n  accountKeysFromLookups?: AccountKeysFromLookups;\n\n  constructor(\n    staticAccountKeys: Array<PublicKey>,\n    accountKeysFromLookups?: AccountKeysFromLookups,\n  ) {\n    this.staticAccountKeys = staticAccountKeys;\n    this.accountKeysFromLookups = accountKeysFromLookups;\n  }\n\n  keySegments(): Array<Array<PublicKey>> {\n    const keySegments = [this.staticAccountKeys];\n    if (this.accountKeysFromLookups) {\n      keySegments.push(this.accountKeysFromLookups.writable);\n      keySegments.push(this.accountKeysFromLookups.readonly);\n    }\n    return keySegments;\n  }\n\n  get(index: number): PublicKey | undefined {\n    for (const keySegment of this.keySegments()) {\n      if (index < keySegment.length) {\n        return keySegment[index];\n      } else {\n        index -= keySegment.length;\n      }\n    }\n    return;\n  }\n\n  get length(): number {\n    return this.keySegments().flat().length;\n  }\n\n  compileInstructions(\n    instructions: Array<TransactionInstruction>,\n  ): Array<MessageCompiledInstruction> {\n    // Bail early if any account indexes would overflow a u8\n    const U8_MAX = 255;\n    if (this.length > U8_MAX + 1) {\n      throw new Error('Account index overflow encountered during compilation');\n    }\n\n    const keyIndexMap = new Map();\n    this.keySegments()\n      .flat()\n      .forEach((key, index) => {\n        keyIndexMap.set(key.toBase58(), index);\n      });\n\n    const findKeyIndex = (key: PublicKey) => {\n      const keyIndex = keyIndexMap.get(key.toBase58());\n      if (keyIndex === undefined)\n        throw new Error(\n          'Encountered an unknown instruction account key during compilation',\n        );\n      return keyIndex;\n    };\n\n    return instructions.map((instruction): MessageCompiledInstruction => {\n      return {\n        programIdIndex: findKeyIndex(instruction.programId),\n        accountKeyIndexes: instruction.keys.map(meta =>\n          findKeyIndex(meta.pubkey),\n        ),\n        data: instruction.data,\n      };\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {VoteAuthorizeWithSeedArgs} from './programs/vote';\n\n/**\n * Layout for a public key\n */\nexport const publicKey = (property: string = 'publicKey') => {\n  return BufferLayout.blob(32, property);\n};\n\n/**\n * Layout for a signature\n */\nexport const signature = (property: string = 'signature') => {\n  return BufferLayout.blob(64, property);\n};\n\n/**\n * Layout for a 64bit unsigned value\n */\nexport const uint64 = (property: string = 'uint64') => {\n  return BufferLayout.blob(8, property);\n};\n\ninterface IRustStringShim\n  extends Omit<\n    BufferLayout.Structure<\n      Readonly<{\n        length: number;\n        lengthPadding: number;\n        chars: Uint8Array;\n      }>\n    >,\n    'decode' | 'encode' | 'replicate'\n  > {\n  alloc: (str: string) => number;\n  decode: (b: Uint8Array, offset?: number) => string;\n  encode: (str: string, b: Uint8Array, offset?: number) => number;\n  replicate: (property: string) => this;\n}\n\n/**\n * Layout for a Rust String type\n */\nexport const rustString = (\n  property: string = 'string',\n): BufferLayout.Layout<string> => {\n  const rsl = BufferLayout.struct<\n    Readonly<{\n      length?: number;\n      lengthPadding?: number;\n      chars: Uint8Array;\n    }>\n  >(\n    [\n      BufferLayout.u32('length'),\n      BufferLayout.u32('lengthPadding'),\n      BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), 'chars'),\n    ],\n    property,\n  );\n  const _decode = rsl.decode.bind(rsl);\n  const _encode = rsl.encode.bind(rsl);\n\n  const rslShim = rsl as unknown as IRustStringShim;\n\n  rslShim.decode = (b: Uint8Array, offset?: number) => {\n    const data = _decode(b, offset);\n    return data['chars'].toString();\n  };\n\n  rslShim.encode = (str: string, b: Uint8Array, offset?: number) => {\n    const data = {\n      chars: Buffer.from(str, 'utf8'),\n    };\n    return _encode(data, b, offset);\n  };\n\n  rslShim.alloc = (str: string) => {\n    return (\n      BufferLayout.u32().span +\n      BufferLayout.u32().span +\n      Buffer.from(str, 'utf8').length\n    );\n  };\n\n  return rslShim;\n};\n\n/**\n * Layout for an Authorized object\n */\nexport const authorized = (property: string = 'authorized') => {\n  return BufferLayout.struct<\n    Readonly<{\n      staker: Uint8Array;\n      withdrawer: Uint8Array;\n    }>\n  >([publicKey('staker'), publicKey('withdrawer')], property);\n};\n\n/**\n * Layout for a Lockup object\n */\nexport const lockup = (property: string = 'lockup') => {\n  return BufferLayout.struct<\n    Readonly<{\n      custodian: Uint8Array;\n      epoch: number;\n      unixTimestamp: number;\n    }>\n  >(\n    [\n      BufferLayout.ns64('unixTimestamp'),\n      BufferLayout.ns64('epoch'),\n      publicKey('custodian'),\n    ],\n    property,\n  );\n};\n\n/**\n *  Layout for a VoteInit object\n */\nexport const voteInit = (property: string = 'voteInit') => {\n  return BufferLayout.struct<\n    Readonly<{\n      authorizedVoter: Uint8Array;\n      authorizedWithdrawer: Uint8Array;\n      commission: number;\n      nodePubkey: Uint8Array;\n    }>\n  >(\n    [\n      publicKey('nodePubkey'),\n      publicKey('authorizedVoter'),\n      publicKey('authorizedWithdrawer'),\n      BufferLayout.u8('commission'),\n    ],\n    property,\n  );\n};\n\n/**\n *  Layout for a VoteAuthorizeWithSeedArgs object\n */\nexport const voteAuthorizeWithSeedArgs = (\n  property: string = 'voteAuthorizeWithSeedArgs',\n) => {\n  return BufferLayout.struct<VoteAuthorizeWithSeedArgs>(\n    [\n      BufferLayout.u32('voteAuthorizationType'),\n      publicKey('currentAuthorityDerivedKeyOwnerPubkey'),\n      rustString('currentAuthorityDerivedKeySeed'),\n      publicKey('newAuthorized'),\n    ],\n    property,\n  );\n};\n\nexport function getAlloc(type: any, fields: any): number {\n  const getItemAlloc = (item: any): number => {\n    if (item.span >= 0) {\n      return item.span;\n    } else if (typeof item.alloc === 'function') {\n      return item.alloc(fields[item.property]);\n    } else if ('count' in item && 'elementLayout' in item) {\n      const field = fields[item.property];\n      if (Array.isArray(field)) {\n        return field.length * getItemAlloc(item.elementLayout);\n      }\n    } else if ('fields' in item) {\n      // This is a `Structure` whose size needs to be recursively measured.\n      return getAlloc({layout: item}, fields[item.property]);\n    }\n    // Couldn't determine allocated size of layout\n    return 0;\n  };\n\n  let alloc = 0;\n  type.layout.fields.forEach((item: any) => {\n    alloc += getItemAlloc(item);\n  });\n\n  return alloc;\n}\n","export function decodeLength(bytes: Array<number>): number {\n  let len = 0;\n  let size = 0;\n  for (;;) {\n    let elem = bytes.shift() as number;\n    len |= (elem & 0x7f) << (size * 7);\n    size += 1;\n    if ((elem & 0x80) === 0) {\n      break;\n    }\n  }\n  return len;\n}\n\nexport function encodeLength(bytes: Array<number>, len: number) {\n  let rem_len = len;\n  for (;;) {\n    let elem = rem_len & 0x7f;\n    rem_len >>= 7;\n    if (rem_len == 0) {\n      bytes.push(elem);\n      break;\n    } else {\n      elem |= 0x80;\n      bytes.push(elem);\n    }\n  }\n}\n","export default function (\n  condition: unknown,\n  message?: string,\n): asserts condition {\n  if (!condition) {\n    throw new Error(message || 'Assertion failed');\n  }\n}\n","import {MessageHeader, MessageAddressTableLookup} from './index';\nimport {AccountKeysFromLookups} from './account-keys';\nimport {AddressLookupTableAccount} from '../programs';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {PublicKey} from '../publickey';\n\nexport type CompiledKeyMeta = {\n  isSigner: boolean;\n  isWritable: boolean;\n  isInvoked: boolean;\n};\n\ntype KeyMetaMap = Map<string, CompiledKeyMeta>;\n\nexport class CompiledKeys {\n  payer: PublicKey;\n  keyMetaMap: KeyMetaMap;\n\n  constructor(payer: PublicKey, keyMetaMap: KeyMetaMap) {\n    this.payer = payer;\n    this.keyMetaMap = keyMetaMap;\n  }\n\n  static compile(\n    instructions: Array<TransactionInstruction>,\n    payer: PublicKey,\n  ): CompiledKeys {\n    const keyMetaMap: KeyMetaMap = new Map();\n    const getOrInsertDefault = (pubkey: PublicKey): CompiledKeyMeta => {\n      const address = pubkey.toBase58();\n      let keyMeta = keyMetaMap.get(address);\n      if (keyMeta === undefined) {\n        keyMeta = {\n          isSigner: false,\n          isWritable: false,\n          isInvoked: false,\n        };\n        keyMetaMap.set(address, keyMeta);\n      }\n      return keyMeta;\n    };\n\n    const payerKeyMeta = getOrInsertDefault(payer);\n    payerKeyMeta.isSigner = true;\n    payerKeyMeta.isWritable = true;\n\n    for (const ix of instructions) {\n      getOrInsertDefault(ix.programId).isInvoked = true;\n      for (const accountMeta of ix.keys) {\n        const keyMeta = getOrInsertDefault(accountMeta.pubkey);\n        keyMeta.isSigner ||= accountMeta.isSigner;\n        keyMeta.isWritable ||= accountMeta.isWritable;\n      }\n    }\n\n    return new CompiledKeys(payer, keyMetaMap);\n  }\n\n  getMessageComponents(): [MessageHeader, Array<PublicKey>] {\n    const mapEntries = [...this.keyMetaMap.entries()];\n    assert(mapEntries.length <= 256, 'Max static account keys length exceeded');\n\n    const writableSigners = mapEntries.filter(\n      ([, meta]) => meta.isSigner && meta.isWritable,\n    );\n    const readonlySigners = mapEntries.filter(\n      ([, meta]) => meta.isSigner && !meta.isWritable,\n    );\n    const writableNonSigners = mapEntries.filter(\n      ([, meta]) => !meta.isSigner && meta.isWritable,\n    );\n    const readonlyNonSigners = mapEntries.filter(\n      ([, meta]) => !meta.isSigner && !meta.isWritable,\n    );\n\n    const header: MessageHeader = {\n      numRequiredSignatures: writableSigners.length + readonlySigners.length,\n      numReadonlySignedAccounts: readonlySigners.length,\n      numReadonlyUnsignedAccounts: readonlyNonSigners.length,\n    };\n\n    // sanity checks\n    {\n      assert(\n        writableSigners.length > 0,\n        'Expected at least one writable signer key',\n      );\n      const [payerAddress] = writableSigners[0];\n      assert(\n        payerAddress === this.payer.toBase58(),\n        'Expected first writable signer key to be the fee payer',\n      );\n    }\n\n    const staticAccountKeys = [\n      ...writableSigners.map(([address]) => new PublicKey(address)),\n      ...readonlySigners.map(([address]) => new PublicKey(address)),\n      ...writableNonSigners.map(([address]) => new PublicKey(address)),\n      ...readonlyNonSigners.map(([address]) => new PublicKey(address)),\n    ];\n\n    return [header, staticAccountKeys];\n  }\n\n  extractTableLookup(\n    lookupTable: AddressLookupTableAccount,\n  ): [MessageAddressTableLookup, AccountKeysFromLookups] | undefined {\n    const [writableIndexes, drainedWritableKeys] =\n      this.drainKeysFoundInLookupTable(\n        lookupTable.state.addresses,\n        keyMeta =>\n          !keyMeta.isSigner && !keyMeta.isInvoked && keyMeta.isWritable,\n      );\n    const [readonlyIndexes, drainedReadonlyKeys] =\n      this.drainKeysFoundInLookupTable(\n        lookupTable.state.addresses,\n        keyMeta =>\n          !keyMeta.isSigner && !keyMeta.isInvoked && !keyMeta.isWritable,\n      );\n\n    // Don't extract lookup if no keys were found\n    if (writableIndexes.length === 0 && readonlyIndexes.length === 0) {\n      return;\n    }\n\n    return [\n      {\n        accountKey: lookupTable.key,\n        writableIndexes,\n        readonlyIndexes,\n      },\n      {\n        writable: drainedWritableKeys,\n        readonly: drainedReadonlyKeys,\n      },\n    ];\n  }\n\n  /** @internal */\n  private drainKeysFoundInLookupTable(\n    lookupTableEntries: Array<PublicKey>,\n    keyMetaFilter: (keyMeta: CompiledKeyMeta) => boolean,\n  ): [Array<number>, Array<PublicKey>] {\n    const lookupTableIndexes = new Array();\n    const drainedKeys = new Array();\n\n    for (const [address, keyMeta] of this.keyMetaMap.entries()) {\n      if (keyMetaFilter(keyMeta)) {\n        const key = new PublicKey(address);\n        const lookupTableIndex = lookupTableEntries.findIndex(entry =>\n          entry.equals(key),\n        );\n        if (lookupTableIndex >= 0) {\n          assert(lookupTableIndex < 256, 'Max lookup table index exceeded');\n          lookupTableIndexes.push(lookupTableIndex);\n          drainedKeys.push(key);\n          this.keyMetaMap.delete(address);\n        }\n      }\n    }\n\n    return [lookupTableIndexes, drainedKeys];\n  }\n}\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey, PUBLIC_KEY_LENGTH} from '../publickey';\nimport type {Blockhash} from '../blockhash';\nimport * as Layout from '../layout';\nimport {PACKET_DATA_SIZE, VERSION_PREFIX_MASK} from '../transaction/constants';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport {toBuffer} from '../utils/to-buffer';\nimport {\n  MessageHeader,\n  MessageAddressTableLookup,\n  MessageCompiledInstruction,\n} from './index';\nimport {TransactionInstruction} from '../transaction';\nimport {CompiledKeys} from './compiled-keys';\nimport {MessageAccountKeys} from './account-keys';\n\n/**\n * An instruction to execute by a program\n *\n * @property {number} programIdIndex\n * @property {number[]} accounts\n * @property {string} data\n */\nexport type CompiledInstruction = {\n  /** Index into the transaction keys array indicating the program account that executes this instruction */\n  programIdIndex: number;\n  /** Ordered indices into the transaction keys array indicating which accounts to pass to the program */\n  accounts: number[];\n  /** The program input data encoded as base 58 */\n  data: string;\n};\n\n/**\n * Message constructor arguments\n */\nexport type MessageArgs = {\n  /** The message header, identifying signed and read-only `accountKeys` */\n  header: MessageHeader;\n  /** All the account keys used by this transaction */\n  accountKeys: string[] | PublicKey[];\n  /** The hash of a recent ledger block */\n  recentBlockhash: Blockhash;\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  instructions: CompiledInstruction[];\n};\n\nexport type CompileLegacyArgs = {\n  payerKey: PublicKey;\n  instructions: Array<TransactionInstruction>;\n  recentBlockhash: Blockhash;\n};\n\n/**\n * List of instructions to be processed atomically\n */\nexport class Message {\n  header: MessageHeader;\n  accountKeys: PublicKey[];\n  recentBlockhash: Blockhash;\n  instructions: CompiledInstruction[];\n\n  private indexToProgramIds: Map<number, PublicKey> = new Map<\n    number,\n    PublicKey\n  >();\n\n  constructor(args: MessageArgs) {\n    this.header = args.header;\n    this.accountKeys = args.accountKeys.map(account => new PublicKey(account));\n    this.recentBlockhash = args.recentBlockhash;\n    this.instructions = args.instructions;\n    this.instructions.forEach(ix =>\n      this.indexToProgramIds.set(\n        ix.programIdIndex,\n        this.accountKeys[ix.programIdIndex],\n      ),\n    );\n  }\n\n  get version(): 'legacy' {\n    return 'legacy';\n  }\n\n  get staticAccountKeys(): Array<PublicKey> {\n    return this.accountKeys;\n  }\n\n  get compiledInstructions(): Array<MessageCompiledInstruction> {\n    return this.instructions.map(\n      (ix): MessageCompiledInstruction => ({\n        programIdIndex: ix.programIdIndex,\n        accountKeyIndexes: ix.accounts,\n        data: bs58.decode(ix.data),\n      }),\n    );\n  }\n\n  get addressTableLookups(): Array<MessageAddressTableLookup> {\n    return [];\n  }\n\n  getAccountKeys(): MessageAccountKeys {\n    return new MessageAccountKeys(this.staticAccountKeys);\n  }\n\n  static compile(args: CompileLegacyArgs): Message {\n    const compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);\n    const [header, staticAccountKeys] = compiledKeys.getMessageComponents();\n    const accountKeys = new MessageAccountKeys(staticAccountKeys);\n    const instructions = accountKeys.compileInstructions(args.instructions).map(\n      (ix: MessageCompiledInstruction): CompiledInstruction => ({\n        programIdIndex: ix.programIdIndex,\n        accounts: ix.accountKeyIndexes,\n        data: bs58.encode(ix.data),\n      }),\n    );\n    return new Message({\n      header,\n      accountKeys: staticAccountKeys,\n      recentBlockhash: args.recentBlockhash,\n      instructions,\n    });\n  }\n\n  isAccountSigner(index: number): boolean {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index: number): boolean {\n    const numSignedAccounts = this.header.numRequiredSignatures;\n    if (index >= this.header.numRequiredSignatures) {\n      const unsignedAccountIndex = index - numSignedAccounts;\n      const numUnsignedAccounts = this.accountKeys.length - numSignedAccounts;\n      const numWritableUnsignedAccounts =\n        numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;\n      return unsignedAccountIndex < numWritableUnsignedAccounts;\n    } else {\n      const numWritableSignedAccounts =\n        numSignedAccounts - this.header.numReadonlySignedAccounts;\n      return index < numWritableSignedAccounts;\n    }\n  }\n\n  isProgramId(index: number): boolean {\n    return this.indexToProgramIds.has(index);\n  }\n\n  programIds(): PublicKey[] {\n    return [...this.indexToProgramIds.values()];\n  }\n\n  nonProgramIds(): PublicKey[] {\n    return this.accountKeys.filter((_, index) => !this.isProgramId(index));\n  }\n\n  serialize(): Buffer {\n    const numKeys = this.accountKeys.length;\n\n    let keyCount: number[] = [];\n    shortvec.encodeLength(keyCount, numKeys);\n\n    const instructions = this.instructions.map(instruction => {\n      const {accounts, programIdIndex} = instruction;\n      const data = Array.from(bs58.decode(instruction.data));\n\n      let keyIndicesCount: number[] = [];\n      shortvec.encodeLength(keyIndicesCount, accounts.length);\n\n      let dataCount: number[] = [];\n      shortvec.encodeLength(dataCount, data.length);\n\n      return {\n        programIdIndex,\n        keyIndicesCount: Buffer.from(keyIndicesCount),\n        keyIndices: accounts,\n        dataLength: Buffer.from(dataCount),\n        data,\n      };\n    });\n\n    let instructionCount: number[] = [];\n    shortvec.encodeLength(instructionCount, instructions.length);\n    let instructionBuffer = Buffer.alloc(PACKET_DATA_SIZE);\n    Buffer.from(instructionCount).copy(instructionBuffer);\n    let instructionBufferLength = instructionCount.length;\n\n    instructions.forEach(instruction => {\n      const instructionLayout = BufferLayout.struct<\n        Readonly<{\n          data: number[];\n          dataLength: Uint8Array;\n          keyIndices: number[];\n          keyIndicesCount: Uint8Array;\n          programIdIndex: number;\n        }>\n      >([\n        BufferLayout.u8('programIdIndex'),\n\n        BufferLayout.blob(\n          instruction.keyIndicesCount.length,\n          'keyIndicesCount',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8('keyIndex'),\n          instruction.keyIndices.length,\n          'keyIndices',\n        ),\n        BufferLayout.blob(instruction.dataLength.length, 'dataLength'),\n        BufferLayout.seq(\n          BufferLayout.u8('userdatum'),\n          instruction.data.length,\n          'data',\n        ),\n      ]);\n      const length = instructionLayout.encode(\n        instruction,\n        instructionBuffer,\n        instructionBufferLength,\n      );\n      instructionBufferLength += length;\n    });\n    instructionBuffer = instructionBuffer.slice(0, instructionBufferLength);\n\n    const signDataLayout = BufferLayout.struct<\n      Readonly<{\n        keyCount: Uint8Array;\n        keys: Uint8Array[];\n        numReadonlySignedAccounts: Uint8Array;\n        numReadonlyUnsignedAccounts: Uint8Array;\n        numRequiredSignatures: Uint8Array;\n        recentBlockhash: Uint8Array;\n      }>\n    >([\n      BufferLayout.blob(1, 'numRequiredSignatures'),\n      BufferLayout.blob(1, 'numReadonlySignedAccounts'),\n      BufferLayout.blob(1, 'numReadonlyUnsignedAccounts'),\n      BufferLayout.blob(keyCount.length, 'keyCount'),\n      BufferLayout.seq(Layout.publicKey('key'), numKeys, 'keys'),\n      Layout.publicKey('recentBlockhash'),\n    ]);\n\n    const transaction = {\n      numRequiredSignatures: Buffer.from([this.header.numRequiredSignatures]),\n      numReadonlySignedAccounts: Buffer.from([\n        this.header.numReadonlySignedAccounts,\n      ]),\n      numReadonlyUnsignedAccounts: Buffer.from([\n        this.header.numReadonlyUnsignedAccounts,\n      ]),\n      keyCount: Buffer.from(keyCount),\n      keys: this.accountKeys.map(key => toBuffer(key.toBytes())),\n      recentBlockhash: bs58.decode(this.recentBlockhash),\n    };\n\n    let signData = Buffer.alloc(2048);\n    const length = signDataLayout.encode(transaction, signData);\n    instructionBuffer.copy(signData, length);\n    return signData.slice(0, length + instructionBuffer.length);\n  }\n\n  /**\n   * Decode a compiled message into a Message object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Message {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const numRequiredSignatures = byteArray.shift()!;\n    if (\n      numRequiredSignatures !==\n      (numRequiredSignatures & VERSION_PREFIX_MASK)\n    ) {\n      throw new Error(\n        'Versioned messages must be deserialized with VersionedMessage.deserialize()',\n      );\n    }\n\n    const numReadonlySignedAccounts = byteArray.shift()!;\n    const numReadonlyUnsignedAccounts = byteArray.shift()!;\n\n    const accountCount = shortvec.decodeLength(byteArray);\n    let accountKeys = [];\n    for (let i = 0; i < accountCount; i++) {\n      const account = byteArray.slice(0, PUBLIC_KEY_LENGTH);\n      byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n      accountKeys.push(new PublicKey(Buffer.from(account)));\n    }\n\n    const recentBlockhash = byteArray.slice(0, PUBLIC_KEY_LENGTH);\n    byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    let instructions: CompiledInstruction[] = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = byteArray.shift()!;\n      const accountCount = shortvec.decodeLength(byteArray);\n      const accounts = byteArray.slice(0, accountCount);\n      byteArray = byteArray.slice(accountCount);\n      const dataLength = shortvec.decodeLength(byteArray);\n      const dataSlice = byteArray.slice(0, dataLength);\n      const data = bs58.encode(Buffer.from(dataSlice));\n      byteArray = byteArray.slice(dataLength);\n      instructions.push({\n        programIdIndex,\n        accounts,\n        data,\n      });\n    }\n\n    const messageArgs = {\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      recentBlockhash: bs58.encode(Buffer.from(recentBlockhash)),\n      accountKeys,\n      instructions,\n    };\n\n    return new Message(messageArgs);\n  }\n}\n","import bs58 from 'bs58';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from '../layout';\nimport {Blockhash} from '../blockhash';\nimport {\n  MessageHeader,\n  MessageAddressTableLookup,\n  MessageCompiledInstruction,\n} from './index';\nimport {PublicKey, PUBLIC_KEY_LENGTH} from '../publickey';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport assert from '../utils/assert';\nimport {PACKET_DATA_SIZE, VERSION_PREFIX_MASK} from '../transaction/constants';\nimport {TransactionInstruction} from '../transaction';\nimport {AddressLookupTableAccount} from '../programs';\nimport {CompiledKeys} from './compiled-keys';\nimport {AccountKeysFromLookups, MessageAccountKeys} from './account-keys';\n\n/**\n * Message constructor arguments\n */\nexport type MessageV0Args = {\n  /** The message header, identifying signed and read-only `accountKeys` */\n  header: MessageHeader;\n  /** The static account keys used by this transaction */\n  staticAccountKeys: PublicKey[];\n  /** The hash of a recent ledger block */\n  recentBlockhash: Blockhash;\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  compiledInstructions: MessageCompiledInstruction[];\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  addressTableLookups: MessageAddressTableLookup[];\n};\n\nexport type CompileV0Args = {\n  payerKey: PublicKey;\n  instructions: Array<TransactionInstruction>;\n  recentBlockhash: Blockhash;\n  addressLookupTableAccounts?: Array<AddressLookupTableAccount>;\n};\n\nexport type GetAccountKeysArgs =\n  | {\n      accountKeysFromLookups?: AccountKeysFromLookups | null;\n    }\n  | {\n      addressLookupTableAccounts?: AddressLookupTableAccount[] | null;\n    };\n\nexport class MessageV0 {\n  header: MessageHeader;\n  staticAccountKeys: Array<PublicKey>;\n  recentBlockhash: Blockhash;\n  compiledInstructions: Array<MessageCompiledInstruction>;\n  addressTableLookups: Array<MessageAddressTableLookup>;\n\n  constructor(args: MessageV0Args) {\n    this.header = args.header;\n    this.staticAccountKeys = args.staticAccountKeys;\n    this.recentBlockhash = args.recentBlockhash;\n    this.compiledInstructions = args.compiledInstructions;\n    this.addressTableLookups = args.addressTableLookups;\n  }\n\n  get version(): 0 {\n    return 0;\n  }\n\n  get numAccountKeysFromLookups(): number {\n    let count = 0;\n    for (const lookup of this.addressTableLookups) {\n      count += lookup.readonlyIndexes.length + lookup.writableIndexes.length;\n    }\n    return count;\n  }\n\n  getAccountKeys(args?: GetAccountKeysArgs): MessageAccountKeys {\n    let accountKeysFromLookups: AccountKeysFromLookups | undefined;\n    if (\n      args &&\n      'accountKeysFromLookups' in args &&\n      args.accountKeysFromLookups\n    ) {\n      if (\n        this.numAccountKeysFromLookups !=\n        args.accountKeysFromLookups.writable.length +\n          args.accountKeysFromLookups.readonly.length\n      ) {\n        throw new Error(\n          'Failed to get account keys because of a mismatch in the number of account keys from lookups',\n        );\n      }\n      accountKeysFromLookups = args.accountKeysFromLookups;\n    } else if (\n      args &&\n      'addressLookupTableAccounts' in args &&\n      args.addressLookupTableAccounts\n    ) {\n      accountKeysFromLookups = this.resolveAddressTableLookups(\n        args.addressLookupTableAccounts,\n      );\n    } else if (this.addressTableLookups.length > 0) {\n      throw new Error(\n        'Failed to get account keys because address table lookups were not resolved',\n      );\n    }\n    return new MessageAccountKeys(\n      this.staticAccountKeys,\n      accountKeysFromLookups,\n    );\n  }\n\n  isAccountSigner(index: number): boolean {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index: number): boolean {\n    const numSignedAccounts = this.header.numRequiredSignatures;\n    const numStaticAccountKeys = this.staticAccountKeys.length;\n    if (index >= numStaticAccountKeys) {\n      const lookupAccountKeysIndex = index - numStaticAccountKeys;\n      const numWritableLookupAccountKeys = this.addressTableLookups.reduce(\n        (count, lookup) => count + lookup.writableIndexes.length,\n        0,\n      );\n      return lookupAccountKeysIndex < numWritableLookupAccountKeys;\n    } else if (index >= this.header.numRequiredSignatures) {\n      const unsignedAccountIndex = index - numSignedAccounts;\n      const numUnsignedAccounts = numStaticAccountKeys - numSignedAccounts;\n      const numWritableUnsignedAccounts =\n        numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;\n      return unsignedAccountIndex < numWritableUnsignedAccounts;\n    } else {\n      const numWritableSignedAccounts =\n        numSignedAccounts - this.header.numReadonlySignedAccounts;\n      return index < numWritableSignedAccounts;\n    }\n  }\n\n  resolveAddressTableLookups(\n    addressLookupTableAccounts: AddressLookupTableAccount[],\n  ): AccountKeysFromLookups {\n    const accountKeysFromLookups: AccountKeysFromLookups = {\n      writable: [],\n      readonly: [],\n    };\n\n    for (const tableLookup of this.addressTableLookups) {\n      const tableAccount = addressLookupTableAccounts.find(account =>\n        account.key.equals(tableLookup.accountKey),\n      );\n      if (!tableAccount) {\n        throw new Error(\n          `Failed to find address lookup table account for table key ${tableLookup.accountKey.toBase58()}`,\n        );\n      }\n\n      for (const index of tableLookup.writableIndexes) {\n        if (index < tableAccount.state.addresses.length) {\n          accountKeysFromLookups.writable.push(\n            tableAccount.state.addresses[index],\n          );\n        } else {\n          throw new Error(\n            `Failed to find address for index ${index} in address lookup table ${tableLookup.accountKey.toBase58()}`,\n          );\n        }\n      }\n\n      for (const index of tableLookup.readonlyIndexes) {\n        if (index < tableAccount.state.addresses.length) {\n          accountKeysFromLookups.readonly.push(\n            tableAccount.state.addresses[index],\n          );\n        } else {\n          throw new Error(\n            `Failed to find address for index ${index} in address lookup table ${tableLookup.accountKey.toBase58()}`,\n          );\n        }\n      }\n    }\n\n    return accountKeysFromLookups;\n  }\n\n  static compile(args: CompileV0Args): MessageV0 {\n    const compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);\n\n    const addressTableLookups = new Array<MessageAddressTableLookup>();\n    const accountKeysFromLookups: AccountKeysFromLookups = {\n      writable: new Array(),\n      readonly: new Array(),\n    };\n    const lookupTableAccounts = args.addressLookupTableAccounts || [];\n    for (const lookupTable of lookupTableAccounts) {\n      const extractResult = compiledKeys.extractTableLookup(lookupTable);\n      if (extractResult !== undefined) {\n        const [addressTableLookup, {writable, readonly}] = extractResult;\n        addressTableLookups.push(addressTableLookup);\n        accountKeysFromLookups.writable.push(...writable);\n        accountKeysFromLookups.readonly.push(...readonly);\n      }\n    }\n\n    const [header, staticAccountKeys] = compiledKeys.getMessageComponents();\n    const accountKeys = new MessageAccountKeys(\n      staticAccountKeys,\n      accountKeysFromLookups,\n    );\n    const compiledInstructions = accountKeys.compileInstructions(\n      args.instructions,\n    );\n    return new MessageV0({\n      header,\n      staticAccountKeys,\n      recentBlockhash: args.recentBlockhash,\n      compiledInstructions,\n      addressTableLookups,\n    });\n  }\n\n  serialize(): Uint8Array {\n    const encodedStaticAccountKeysLength = Array<number>();\n    shortvec.encodeLength(\n      encodedStaticAccountKeysLength,\n      this.staticAccountKeys.length,\n    );\n\n    const serializedInstructions = this.serializeInstructions();\n    const encodedInstructionsLength = Array<number>();\n    shortvec.encodeLength(\n      encodedInstructionsLength,\n      this.compiledInstructions.length,\n    );\n\n    const serializedAddressTableLookups = this.serializeAddressTableLookups();\n    const encodedAddressTableLookupsLength = Array<number>();\n    shortvec.encodeLength(\n      encodedAddressTableLookupsLength,\n      this.addressTableLookups.length,\n    );\n\n    const messageLayout = BufferLayout.struct<{\n      prefix: number;\n      header: MessageHeader;\n      staticAccountKeysLength: Uint8Array;\n      staticAccountKeys: Array<Uint8Array>;\n      recentBlockhash: Uint8Array;\n      instructionsLength: Uint8Array;\n      serializedInstructions: Uint8Array;\n      addressTableLookupsLength: Uint8Array;\n      serializedAddressTableLookups: Uint8Array;\n    }>([\n      BufferLayout.u8('prefix'),\n      BufferLayout.struct<MessageHeader>(\n        [\n          BufferLayout.u8('numRequiredSignatures'),\n          BufferLayout.u8('numReadonlySignedAccounts'),\n          BufferLayout.u8('numReadonlyUnsignedAccounts'),\n        ],\n        'header',\n      ),\n      BufferLayout.blob(\n        encodedStaticAccountKeysLength.length,\n        'staticAccountKeysLength',\n      ),\n      BufferLayout.seq(\n        Layout.publicKey(),\n        this.staticAccountKeys.length,\n        'staticAccountKeys',\n      ),\n      Layout.publicKey('recentBlockhash'),\n      BufferLayout.blob(encodedInstructionsLength.length, 'instructionsLength'),\n      BufferLayout.blob(\n        serializedInstructions.length,\n        'serializedInstructions',\n      ),\n      BufferLayout.blob(\n        encodedAddressTableLookupsLength.length,\n        'addressTableLookupsLength',\n      ),\n      BufferLayout.blob(\n        serializedAddressTableLookups.length,\n        'serializedAddressTableLookups',\n      ),\n    ]);\n\n    const serializedMessage = new Uint8Array(PACKET_DATA_SIZE);\n    const MESSAGE_VERSION_0_PREFIX = 1 << 7;\n    const serializedMessageLength = messageLayout.encode(\n      {\n        prefix: MESSAGE_VERSION_0_PREFIX,\n        header: this.header,\n        staticAccountKeysLength: new Uint8Array(encodedStaticAccountKeysLength),\n        staticAccountKeys: this.staticAccountKeys.map(key => key.toBytes()),\n        recentBlockhash: bs58.decode(this.recentBlockhash),\n        instructionsLength: new Uint8Array(encodedInstructionsLength),\n        serializedInstructions,\n        addressTableLookupsLength: new Uint8Array(\n          encodedAddressTableLookupsLength,\n        ),\n        serializedAddressTableLookups,\n      },\n      serializedMessage,\n    );\n    return serializedMessage.slice(0, serializedMessageLength);\n  }\n\n  private serializeInstructions(): Uint8Array {\n    let serializedLength = 0;\n    const serializedInstructions = new Uint8Array(PACKET_DATA_SIZE);\n    for (const instruction of this.compiledInstructions) {\n      const encodedAccountKeyIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedAccountKeyIndexesLength,\n        instruction.accountKeyIndexes.length,\n      );\n\n      const encodedDataLength = Array<number>();\n      shortvec.encodeLength(encodedDataLength, instruction.data.length);\n\n      const instructionLayout = BufferLayout.struct<{\n        programIdIndex: number;\n        encodedAccountKeyIndexesLength: Uint8Array;\n        accountKeyIndexes: number[];\n        encodedDataLength: Uint8Array;\n        data: Uint8Array;\n      }>([\n        BufferLayout.u8('programIdIndex'),\n        BufferLayout.blob(\n          encodedAccountKeyIndexesLength.length,\n          'encodedAccountKeyIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          instruction.accountKeyIndexes.length,\n          'accountKeyIndexes',\n        ),\n        BufferLayout.blob(encodedDataLength.length, 'encodedDataLength'),\n        BufferLayout.blob(instruction.data.length, 'data'),\n      ]);\n\n      serializedLength += instructionLayout.encode(\n        {\n          programIdIndex: instruction.programIdIndex,\n          encodedAccountKeyIndexesLength: new Uint8Array(\n            encodedAccountKeyIndexesLength,\n          ),\n          accountKeyIndexes: instruction.accountKeyIndexes,\n          encodedDataLength: new Uint8Array(encodedDataLength),\n          data: instruction.data,\n        },\n        serializedInstructions,\n        serializedLength,\n      );\n    }\n\n    return serializedInstructions.slice(0, serializedLength);\n  }\n\n  private serializeAddressTableLookups(): Uint8Array {\n    let serializedLength = 0;\n    const serializedAddressTableLookups = new Uint8Array(PACKET_DATA_SIZE);\n    for (const lookup of this.addressTableLookups) {\n      const encodedWritableIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedWritableIndexesLength,\n        lookup.writableIndexes.length,\n      );\n\n      const encodedReadonlyIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedReadonlyIndexesLength,\n        lookup.readonlyIndexes.length,\n      );\n\n      const addressTableLookupLayout = BufferLayout.struct<{\n        accountKey: Uint8Array;\n        encodedWritableIndexesLength: Uint8Array;\n        writableIndexes: number[];\n        encodedReadonlyIndexesLength: Uint8Array;\n        readonlyIndexes: number[];\n      }>([\n        Layout.publicKey('accountKey'),\n        BufferLayout.blob(\n          encodedWritableIndexesLength.length,\n          'encodedWritableIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          lookup.writableIndexes.length,\n          'writableIndexes',\n        ),\n        BufferLayout.blob(\n          encodedReadonlyIndexesLength.length,\n          'encodedReadonlyIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          lookup.readonlyIndexes.length,\n          'readonlyIndexes',\n        ),\n      ]);\n\n      serializedLength += addressTableLookupLayout.encode(\n        {\n          accountKey: lookup.accountKey.toBytes(),\n          encodedWritableIndexesLength: new Uint8Array(\n            encodedWritableIndexesLength,\n          ),\n          writableIndexes: lookup.writableIndexes,\n          encodedReadonlyIndexesLength: new Uint8Array(\n            encodedReadonlyIndexesLength,\n          ),\n          readonlyIndexes: lookup.readonlyIndexes,\n        },\n        serializedAddressTableLookups,\n        serializedLength,\n      );\n    }\n\n    return serializedAddressTableLookups.slice(0, serializedLength);\n  }\n\n  static deserialize(serializedMessage: Uint8Array): MessageV0 {\n    let byteArray = [...serializedMessage];\n\n    const prefix = byteArray.shift() as number;\n    const maskedPrefix = prefix & VERSION_PREFIX_MASK;\n    assert(\n      prefix !== maskedPrefix,\n      `Expected versioned message but received legacy message`,\n    );\n\n    const version = maskedPrefix;\n    assert(\n      version === 0,\n      `Expected versioned message with version 0 but found version ${version}`,\n    );\n\n    const header: MessageHeader = {\n      numRequiredSignatures: byteArray.shift() as number,\n      numReadonlySignedAccounts: byteArray.shift() as number,\n      numReadonlyUnsignedAccounts: byteArray.shift() as number,\n    };\n\n    const staticAccountKeys = [];\n    const staticAccountKeysLength = shortvec.decodeLength(byteArray);\n    for (let i = 0; i < staticAccountKeysLength; i++) {\n      staticAccountKeys.push(\n        new PublicKey(byteArray.splice(0, PUBLIC_KEY_LENGTH)),\n      );\n    }\n\n    const recentBlockhash = bs58.encode(byteArray.splice(0, PUBLIC_KEY_LENGTH));\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    const compiledInstructions: MessageCompiledInstruction[] = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = byteArray.shift() as number;\n      const accountKeyIndexesLength = shortvec.decodeLength(byteArray);\n      const accountKeyIndexes = byteArray.splice(0, accountKeyIndexesLength);\n      const dataLength = shortvec.decodeLength(byteArray);\n      const data = new Uint8Array(byteArray.splice(0, dataLength));\n      compiledInstructions.push({\n        programIdIndex,\n        accountKeyIndexes,\n        data,\n      });\n    }\n\n    const addressTableLookupsCount = shortvec.decodeLength(byteArray);\n    const addressTableLookups: MessageAddressTableLookup[] = [];\n    for (let i = 0; i < addressTableLookupsCount; i++) {\n      const accountKey = new PublicKey(byteArray.splice(0, PUBLIC_KEY_LENGTH));\n      const writableIndexesLength = shortvec.decodeLength(byteArray);\n      const writableIndexes = byteArray.splice(0, writableIndexesLength);\n      const readonlyIndexesLength = shortvec.decodeLength(byteArray);\n      const readonlyIndexes = byteArray.splice(0, readonlyIndexesLength);\n      addressTableLookups.push({\n        accountKey,\n        writableIndexes,\n        readonlyIndexes,\n      });\n    }\n\n    return new MessageV0({\n      header,\n      staticAccountKeys,\n      recentBlockhash,\n      compiledInstructions,\n      addressTableLookups,\n    });\n  }\n}\n","import {VERSION_PREFIX_MASK} from '../transaction/constants';\nimport {Message} from './legacy';\nimport {MessageV0} from './v0';\n\nexport type VersionedMessage = Message | MessageV0;\n// eslint-disable-next-line no-redeclare\nexport const VersionedMessage = {\n  deserializeMessageVersion(serializedMessage: Uint8Array): 'legacy' | number {\n    const prefix = serializedMessage[0];\n    const maskedPrefix = prefix & VERSION_PREFIX_MASK;\n\n    // if the highest bit of the prefix is not set, the message is not versioned\n    if (maskedPrefix === prefix) {\n      return 'legacy';\n    }\n\n    // the lower 7 bits of the prefix indicate the message version\n    return maskedPrefix;\n  },\n\n  deserialize: (serializedMessage: Uint8Array): VersionedMessage => {\n    const version =\n      VersionedMessage.deserializeMessageVersion(serializedMessage);\n    if (version === 'legacy') {\n      return Message.from(serializedMessage);\n    }\n\n    if (version === 0) {\n      return MessageV0.deserialize(serializedMessage);\n    } else {\n      throw new Error(\n        `Transaction message version ${version} deserialization is not supported`,\n      );\n    }\n  },\n};\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n\nimport {PACKET_DATA_SIZE, SIGNATURE_LENGTH_IN_BYTES} from './constants';\nimport {Connection} from '../connection';\nimport {Message} from '../message';\nimport {PublicKey} from '../publickey';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport {toBuffer} from '../utils/to-buffer';\nimport invariant from '../utils/assert';\nimport type {Signer} from '../keypair';\nimport type {Blockhash} from '../blockhash';\nimport type {CompiledInstruction} from '../message';\nimport {sign, verify} from '../utils/ed25519';\n\n/**\n * Transaction signature as base-58 encoded string\n */\nexport type TransactionSignature = string;\n\nexport const enum TransactionStatus {\n  BLOCKHEIGHT_EXCEEDED,\n  PROCESSED,\n  TIMED_OUT,\n  NONCE_INVALID,\n}\n\n/**\n * Default (empty) signature\n */\nconst DEFAULT_SIGNATURE = Buffer.alloc(SIGNATURE_LENGTH_IN_BYTES).fill(0);\n\n/**\n * Account metadata used to define instructions\n */\nexport type AccountMeta = {\n  /** An account's public key */\n  pubkey: PublicKey;\n  /** True if an instruction requires a transaction signature matching `pubkey` */\n  isSigner: boolean;\n  /** True if the `pubkey` can be loaded as a read-write account. */\n  isWritable: boolean;\n};\n\n/**\n * List of TransactionInstruction object fields that may be initialized at construction\n */\nexport type TransactionInstructionCtorFields = {\n  keys: Array<AccountMeta>;\n  programId: PublicKey;\n  data?: Buffer;\n};\n\n/**\n * Configuration object for Transaction.serialize()\n */\nexport type SerializeConfig = {\n  /** Require all transaction signatures be present (default: true) */\n  requireAllSignatures?: boolean;\n  /** Verify provided signatures (default: true) */\n  verifySignatures?: boolean;\n};\n\n/**\n * @internal\n */\nexport interface TransactionInstructionJSON {\n  keys: {\n    pubkey: string;\n    isSigner: boolean;\n    isWritable: boolean;\n  }[];\n  programId: string;\n  data: number[];\n}\n\n/**\n * Transaction Instruction class\n */\nexport class TransactionInstruction {\n  /**\n   * Public keys to include in this transaction\n   * Boolean represents whether this pubkey needs to sign the transaction\n   */\n  keys: Array<AccountMeta>;\n\n  /**\n   * Program Id to execute\n   */\n  programId: PublicKey;\n\n  /**\n   * Program input\n   */\n  data: Buffer = Buffer.alloc(0);\n\n  constructor(opts: TransactionInstructionCtorFields) {\n    this.programId = opts.programId;\n    this.keys = opts.keys;\n    if (opts.data) {\n      this.data = opts.data;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON(): TransactionInstructionJSON {\n    return {\n      keys: this.keys.map(({pubkey, isSigner, isWritable}) => ({\n        pubkey: pubkey.toJSON(),\n        isSigner,\n        isWritable,\n      })),\n      programId: this.programId.toJSON(),\n      data: [...this.data],\n    };\n  }\n}\n\n/**\n * Pair of signature and corresponding public key\n */\nexport type SignaturePubkeyPair = {\n  signature: Buffer | null;\n  publicKey: PublicKey;\n};\n\n/**\n * List of Transaction object fields that may be initialized at construction\n */\nexport type TransactionCtorFields_DEPRECATED = {\n  /** Optional nonce information used for offline nonce'd transactions */\n  nonceInfo?: NonceInformation | null;\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n  /** A recent blockhash */\n  recentBlockhash?: Blockhash;\n};\n\n// For backward compatibility; an unfortunate consequence of being\n// forced to over-export types by the documentation generator.\n// See https://github.com/solana-labs/solana/pull/25820\nexport type TransactionCtorFields = TransactionCtorFields_DEPRECATED;\n\n/**\n * Blockhash-based transactions have a lifetime that are defined by\n * the blockhash they include. Any transaction whose blockhash is\n * too old will be rejected.\n */\nexport type TransactionBlockhashCtor = {\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n  /** A recent blockhash */\n  blockhash: Blockhash;\n  /** the last block chain can advance to before tx is declared expired */\n  lastValidBlockHeight: number;\n};\n\n/**\n * Use these options to construct a durable nonce transaction.\n */\nexport type TransactionNonceCtor = {\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  minContextSlot: number;\n  nonceInfo: NonceInformation;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n};\n\n/**\n * Nonce information to be used to build an offline Transaction.\n */\nexport type NonceInformation = {\n  /** The current blockhash stored in the nonce */\n  nonce: Blockhash;\n  /** AdvanceNonceAccount Instruction */\n  nonceInstruction: TransactionInstruction;\n};\n\n/**\n * @internal\n */\nexport interface TransactionJSON {\n  recentBlockhash: string | null;\n  feePayer: string | null;\n  nonceInfo: {\n    nonce: string;\n    nonceInstruction: TransactionInstructionJSON;\n  } | null;\n  instructions: TransactionInstructionJSON[];\n  signers: string[];\n}\n\n/**\n * Transaction class\n */\nexport class Transaction {\n  /**\n   * Signatures for the transaction.  Typically created by invoking the\n   * `sign()` method\n   */\n  signatures: Array<SignaturePubkeyPair> = [];\n\n  /**\n   * The first (payer) Transaction signature\n   *\n   * @returns {Buffer | null} Buffer of payer's signature\n   */\n  get signature(): Buffer | null {\n    if (this.signatures.length > 0) {\n      return this.signatures[0].signature;\n    }\n    return null;\n  }\n\n  /**\n   * The transaction fee payer\n   */\n  feePayer?: PublicKey;\n\n  /**\n   * The instructions to atomically execute\n   */\n  instructions: Array<TransactionInstruction> = [];\n\n  /**\n   * A recent transaction id. Must be populated by the caller\n   */\n  recentBlockhash?: Blockhash;\n\n  /**\n   * the last block chain can advance to before tx is declared expired\n   * */\n  lastValidBlockHeight?: number;\n\n  /**\n   * Optional Nonce information. If populated, transaction will use a durable\n   * Nonce hash instead of a recentBlockhash. Must be populated by the caller\n   */\n  nonceInfo?: NonceInformation;\n\n  /**\n   * If this is a nonce transaction this represents the minimum slot from which\n   * to evaluate if the nonce has advanced when attempting to confirm the\n   * transaction. This protects against a case where the transaction confirmation\n   * logic loads the nonce account from an old slot and assumes the mismatch in\n   * nonce value implies that the nonce has been advanced.\n   */\n  minNonceContextSlot?: number;\n\n  /**\n   * @internal\n   */\n  _message?: Message;\n\n  /**\n   * @internal\n   */\n  _json?: TransactionJSON;\n\n  // Construct a transaction with a blockhash and lastValidBlockHeight\n  constructor(opts?: TransactionBlockhashCtor);\n\n  // Construct a transaction using a durable nonce\n  constructor(opts?: TransactionNonceCtor);\n\n  /**\n   * @deprecated `TransactionCtorFields` has been deprecated and will be removed in a future version.\n   * Please supply a `TransactionBlockhashCtor` instead.\n   */\n  constructor(opts?: TransactionCtorFields_DEPRECATED);\n\n  /**\n   * Construct an empty Transaction\n   */\n  constructor(\n    opts?:\n      | TransactionBlockhashCtor\n      | TransactionNonceCtor\n      | TransactionCtorFields_DEPRECATED,\n  ) {\n    if (!opts) {\n      return;\n    }\n    if (opts.feePayer) {\n      this.feePayer = opts.feePayer;\n    }\n    if (opts.signatures) {\n      this.signatures = opts.signatures;\n    }\n    if (Object.prototype.hasOwnProperty.call(opts, 'nonceInfo')) {\n      const {minContextSlot, nonceInfo} = opts as TransactionNonceCtor;\n      this.minNonceContextSlot = minContextSlot;\n      this.nonceInfo = nonceInfo;\n    } else if (\n      Object.prototype.hasOwnProperty.call(opts, 'lastValidBlockHeight')\n    ) {\n      const {blockhash, lastValidBlockHeight} =\n        opts as TransactionBlockhashCtor;\n      this.recentBlockhash = blockhash;\n      this.lastValidBlockHeight = lastValidBlockHeight;\n    } else {\n      const {recentBlockhash, nonceInfo} =\n        opts as TransactionCtorFields_DEPRECATED;\n      if (nonceInfo) {\n        this.nonceInfo = nonceInfo;\n      }\n      this.recentBlockhash = recentBlockhash;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON(): TransactionJSON {\n    return {\n      recentBlockhash: this.recentBlockhash || null,\n      feePayer: this.feePayer ? this.feePayer.toJSON() : null,\n      nonceInfo: this.nonceInfo\n        ? {\n            nonce: this.nonceInfo.nonce,\n            nonceInstruction: this.nonceInfo.nonceInstruction.toJSON(),\n          }\n        : null,\n      instructions: this.instructions.map(instruction => instruction.toJSON()),\n      signers: this.signatures.map(({publicKey}) => {\n        return publicKey.toJSON();\n      }),\n    };\n  }\n\n  /**\n   * Add one or more instructions to this Transaction\n   *\n   * @param {Array< Transaction | TransactionInstruction | TransactionInstructionCtorFields >} items - Instructions to add to the Transaction\n   */\n  add(\n    ...items: Array<\n      Transaction | TransactionInstruction | TransactionInstructionCtorFields\n    >\n  ): Transaction {\n    if (items.length === 0) {\n      throw new Error('No instructions');\n    }\n\n    items.forEach((item: any) => {\n      if ('instructions' in item) {\n        this.instructions = this.instructions.concat(item.instructions);\n      } else if ('data' in item && 'programId' in item && 'keys' in item) {\n        this.instructions.push(item);\n      } else {\n        this.instructions.push(new TransactionInstruction(item));\n      }\n    });\n    return this;\n  }\n\n  /**\n   * Compile transaction data\n   */\n  compileMessage(): Message {\n    if (\n      this._message &&\n      JSON.stringify(this.toJSON()) === JSON.stringify(this._json)\n    ) {\n      return this._message;\n    }\n\n    let recentBlockhash;\n    let instructions: TransactionInstruction[];\n    if (this.nonceInfo) {\n      recentBlockhash = this.nonceInfo.nonce;\n      if (this.instructions[0] != this.nonceInfo.nonceInstruction) {\n        instructions = [this.nonceInfo.nonceInstruction, ...this.instructions];\n      } else {\n        instructions = this.instructions;\n      }\n    } else {\n      recentBlockhash = this.recentBlockhash;\n      instructions = this.instructions;\n    }\n    if (!recentBlockhash) {\n      throw new Error('Transaction recentBlockhash required');\n    }\n\n    if (instructions.length < 1) {\n      console.warn('No instructions provided');\n    }\n\n    let feePayer: PublicKey;\n    if (this.feePayer) {\n      feePayer = this.feePayer;\n    } else if (this.signatures.length > 0 && this.signatures[0].publicKey) {\n      // Use implicit fee payer\n      feePayer = this.signatures[0].publicKey;\n    } else {\n      throw new Error('Transaction fee payer required');\n    }\n\n    for (let i = 0; i < instructions.length; i++) {\n      if (instructions[i].programId === undefined) {\n        throw new Error(\n          `Transaction instruction index ${i} has undefined program id`,\n        );\n      }\n    }\n\n    const programIds: string[] = [];\n    const accountMetas: AccountMeta[] = [];\n    instructions.forEach(instruction => {\n      instruction.keys.forEach(accountMeta => {\n        accountMetas.push({...accountMeta});\n      });\n\n      const programId = instruction.programId.toString();\n      if (!programIds.includes(programId)) {\n        programIds.push(programId);\n      }\n    });\n\n    // Append programID account metas\n    programIds.forEach(programId => {\n      accountMetas.push({\n        pubkey: new PublicKey(programId),\n        isSigner: false,\n        isWritable: false,\n      });\n    });\n\n    // Cull duplicate account metas\n    const uniqueMetas: AccountMeta[] = [];\n    accountMetas.forEach(accountMeta => {\n      const pubkeyString = accountMeta.pubkey.toString();\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.toString() === pubkeyString;\n      });\n      if (uniqueIndex > -1) {\n        uniqueMetas[uniqueIndex].isWritable =\n          uniqueMetas[uniqueIndex].isWritable || accountMeta.isWritable;\n        uniqueMetas[uniqueIndex].isSigner =\n          uniqueMetas[uniqueIndex].isSigner || accountMeta.isSigner;\n      } else {\n        uniqueMetas.push(accountMeta);\n      }\n    });\n\n    // Sort. Prioritizing first by signer, then by writable\n    uniqueMetas.sort(function (x, y) {\n      if (x.isSigner !== y.isSigner) {\n        // Signers always come before non-signers\n        return x.isSigner ? -1 : 1;\n      }\n      if (x.isWritable !== y.isWritable) {\n        // Writable accounts always come before read-only accounts\n        return x.isWritable ? -1 : 1;\n      }\n      // Otherwise, sort by pubkey, stringwise.\n      const options = {\n        localeMatcher: 'best fit',\n        usage: 'sort',\n        sensitivity: 'variant',\n        ignorePunctuation: false,\n        numeric: false,\n        caseFirst: 'lower',\n      } as Intl.CollatorOptions;\n      return x.pubkey\n        .toBase58()\n        .localeCompare(y.pubkey.toBase58(), 'en', options);\n    });\n\n    // Move fee payer to the front\n    const feePayerIndex = uniqueMetas.findIndex(x => {\n      return x.pubkey.equals(feePayer);\n    });\n    if (feePayerIndex > -1) {\n      const [payerMeta] = uniqueMetas.splice(feePayerIndex, 1);\n      payerMeta.isSigner = true;\n      payerMeta.isWritable = true;\n      uniqueMetas.unshift(payerMeta);\n    } else {\n      uniqueMetas.unshift({\n        pubkey: feePayer,\n        isSigner: true,\n        isWritable: true,\n      });\n    }\n\n    // Disallow unknown signers\n    for (const signature of this.signatures) {\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.equals(signature.publicKey);\n      });\n      if (uniqueIndex > -1) {\n        if (!uniqueMetas[uniqueIndex].isSigner) {\n          uniqueMetas[uniqueIndex].isSigner = true;\n          console.warn(\n            'Transaction references a signature that is unnecessary, ' +\n              'only the fee payer and instruction signer accounts should sign a transaction. ' +\n              'This behavior is deprecated and will throw an error in the next major version release.',\n          );\n        }\n      } else {\n        throw new Error(`unknown signer: ${signature.publicKey.toString()}`);\n      }\n    }\n\n    let numRequiredSignatures = 0;\n    let numReadonlySignedAccounts = 0;\n    let numReadonlyUnsignedAccounts = 0;\n\n    // Split out signing from non-signing keys and count header values\n    const signedKeys: string[] = [];\n    const unsignedKeys: string[] = [];\n    uniqueMetas.forEach(({pubkey, isSigner, isWritable}) => {\n      if (isSigner) {\n        signedKeys.push(pubkey.toString());\n        numRequiredSignatures += 1;\n        if (!isWritable) {\n          numReadonlySignedAccounts += 1;\n        }\n      } else {\n        unsignedKeys.push(pubkey.toString());\n        if (!isWritable) {\n          numReadonlyUnsignedAccounts += 1;\n        }\n      }\n    });\n\n    const accountKeys = signedKeys.concat(unsignedKeys);\n    const compiledInstructions: CompiledInstruction[] = instructions.map(\n      instruction => {\n        const {data, programId} = instruction;\n        return {\n          programIdIndex: accountKeys.indexOf(programId.toString()),\n          accounts: instruction.keys.map(meta =>\n            accountKeys.indexOf(meta.pubkey.toString()),\n          ),\n          data: bs58.encode(data),\n        };\n      },\n    );\n\n    compiledInstructions.forEach(instruction => {\n      invariant(instruction.programIdIndex >= 0);\n      instruction.accounts.forEach(keyIndex => invariant(keyIndex >= 0));\n    });\n\n    return new Message({\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      accountKeys,\n      recentBlockhash,\n      instructions: compiledInstructions,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _compile(): Message {\n    const message = this.compileMessage();\n    const signedKeys = message.accountKeys.slice(\n      0,\n      message.header.numRequiredSignatures,\n    );\n\n    if (this.signatures.length === signedKeys.length) {\n      const valid = this.signatures.every((pair, index) => {\n        return signedKeys[index].equals(pair.publicKey);\n      });\n\n      if (valid) return message;\n    }\n\n    this.signatures = signedKeys.map(publicKey => ({\n      signature: null,\n      publicKey,\n    }));\n\n    return message;\n  }\n\n  /**\n   * Get a buffer of the Transaction data that need to be covered by signatures\n   */\n  serializeMessage(): Buffer {\n    return this._compile().serialize();\n  }\n\n  /**\n   * Get the estimated fee associated with a transaction\n   *\n   * @param {Connection} connection Connection to RPC Endpoint.\n   *\n   * @returns {Promise<number | null>} The estimated fee for the transaction\n   */\n  async getEstimatedFee(connection: Connection): Promise<number | null> {\n    return (await connection.getFeeForMessage(this.compileMessage())).value;\n  }\n\n  /**\n   * Specify the public keys which will be used to sign the Transaction.\n   * The first signer will be used as the transaction fee payer account.\n   *\n   * Signatures can be added with either `partialSign` or `addSignature`\n   *\n   * @deprecated Deprecated since v0.84.0. Only the fee payer needs to be\n   * specified and it can be set in the Transaction constructor or with the\n   * `feePayer` property.\n   */\n  setSigners(...signers: Array<PublicKey>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    const seen = new Set();\n    this.signatures = signers\n      .filter(publicKey => {\n        const key = publicKey.toString();\n        if (seen.has(key)) {\n          return false;\n        } else {\n          seen.add(key);\n          return true;\n        }\n      })\n      .map(publicKey => ({signature: null, publicKey}));\n  }\n\n  /**\n   * Sign the Transaction with the specified signers. Multiple signatures may\n   * be applied to a Transaction. The first signature is considered \"primary\"\n   * and is used identify and confirm transactions.\n   *\n   * If the Transaction `feePayer` is not set, the first signer will be used\n   * as the transaction fee payer account.\n   *\n   * Transaction fields should not be modified after the first call to `sign`,\n   * as doing so may invalidate the signature and cause the Transaction to be\n   * rejected.\n   *\n   * The Transaction must be assigned a valid `recentBlockhash` before invoking this method\n   *\n   * @param {Array<Signer>} signers Array of signers that will sign the transaction\n   */\n  sign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    this.signatures = uniqueSigners.map(signer => ({\n      signature: null,\n      publicKey: signer.publicKey,\n    }));\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * Partially sign a transaction with the specified accounts. All accounts must\n   * correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * All the caveats from the `sign` method apply to `partialSign`\n   *\n   * @param {Array<Signer>} signers Array of signers that will sign the transaction\n   */\n  partialSign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * @internal\n   */\n  _partialSign(message: Message, ...signers: Array<Signer>) {\n    const signData = message.serialize();\n    signers.forEach(signer => {\n      const signature = sign(signData, signer.secretKey);\n      this._addSignature(signer.publicKey, toBuffer(signature));\n    });\n  }\n\n  /**\n   * Add an externally created signature to a transaction. The public key\n   * must correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * @param {PublicKey} pubkey Public key that will be added to the transaction.\n   * @param {Buffer} signature An externally created signature to add to the transaction.\n   */\n  addSignature(pubkey: PublicKey, signature: Buffer) {\n    this._compile(); // Ensure signatures array is populated\n    this._addSignature(pubkey, signature);\n  }\n\n  /**\n   * @internal\n   */\n  _addSignature(pubkey: PublicKey, signature: Buffer) {\n    invariant(signature.length === 64);\n\n    const index = this.signatures.findIndex(sigpair =>\n      pubkey.equals(sigpair.publicKey),\n    );\n    if (index < 0) {\n      throw new Error(`unknown signer: ${pubkey.toString()}`);\n    }\n\n    this.signatures[index].signature = Buffer.from(signature);\n  }\n\n  /**\n   * Verify signatures of a Transaction\n   * Optional parameter specifies if we're expecting a fully signed Transaction or a partially signed one.\n   * If no boolean is provided, we expect a fully signed Transaction by default.\n   *\n   * @param {boolean} [requireAllSignatures=true] Require a fully signed Transaction\n   */\n  verifySignatures(requireAllSignatures?: boolean): boolean {\n    return this._verifySignatures(\n      this.serializeMessage(),\n      requireAllSignatures === undefined ? true : requireAllSignatures,\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _verifySignatures(\n    signData: Uint8Array,\n    requireAllSignatures: boolean,\n  ): boolean {\n    for (const {signature, publicKey} of this.signatures) {\n      if (signature === null) {\n        if (requireAllSignatures) {\n          return false;\n        }\n      } else {\n        if (!verify(signature, signData, publicKey.toBytes())) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Serialize the Transaction in the wire format.\n   *\n   * @param {Buffer} [config] Config of transaction.\n   *\n   * @returns {Buffer} Signature of transaction in wire format.\n   */\n  serialize(config?: SerializeConfig): Buffer {\n    const {requireAllSignatures, verifySignatures} = Object.assign(\n      {requireAllSignatures: true, verifySignatures: true},\n      config,\n    );\n\n    const signData = this.serializeMessage();\n    if (\n      verifySignatures &&\n      !this._verifySignatures(signData, requireAllSignatures)\n    ) {\n      throw new Error('Signature verification failed');\n    }\n\n    return this._serialize(signData);\n  }\n\n  /**\n   * @internal\n   */\n  _serialize(signData: Buffer): Buffer {\n    const {signatures} = this;\n    const signatureCount: number[] = [];\n    shortvec.encodeLength(signatureCount, signatures.length);\n    const transactionLength =\n      signatureCount.length + signatures.length * 64 + signData.length;\n    const wireTransaction = Buffer.alloc(transactionLength);\n    invariant(signatures.length < 256);\n    Buffer.from(signatureCount).copy(wireTransaction, 0);\n    signatures.forEach(({signature}, index) => {\n      if (signature !== null) {\n        invariant(signature.length === 64, `signature has invalid length`);\n        Buffer.from(signature).copy(\n          wireTransaction,\n          signatureCount.length + index * 64,\n        );\n      }\n    });\n    signData.copy(\n      wireTransaction,\n      signatureCount.length + signatures.length * 64,\n    );\n    invariant(\n      wireTransaction.length <= PACKET_DATA_SIZE,\n      `Transaction too large: ${wireTransaction.length} > ${PACKET_DATA_SIZE}`,\n    );\n    return wireTransaction;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get keys(): Array<PublicKey> {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].keys.map(keyObj => keyObj.pubkey);\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get programId(): PublicKey {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].programId;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get data(): Buffer {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].data;\n  }\n\n  /**\n   * Parse a wire transaction into a Transaction object.\n   *\n   * @param {Buffer | Uint8Array | Array<number>} buffer Signature of wire Transaction\n   *\n   * @returns {Transaction} Transaction associated with the signature\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Transaction {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const signatureCount = shortvec.decodeLength(byteArray);\n    let signatures = [];\n    for (let i = 0; i < signatureCount; i++) {\n      const signature = byteArray.slice(0, SIGNATURE_LENGTH_IN_BYTES);\n      byteArray = byteArray.slice(SIGNATURE_LENGTH_IN_BYTES);\n      signatures.push(bs58.encode(Buffer.from(signature)));\n    }\n\n    return Transaction.populate(Message.from(byteArray), signatures);\n  }\n\n  /**\n   * Populate Transaction object from message and signatures\n   *\n   * @param {Message} message Message of transaction\n   * @param {Array<string>} signatures List of signatures to assign to the transaction\n   *\n   * @returns {Transaction} The populated Transaction\n   */\n  static populate(\n    message: Message,\n    signatures: Array<string> = [],\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.recentBlockhash = message.recentBlockhash;\n    if (message.header.numRequiredSignatures > 0) {\n      transaction.feePayer = message.accountKeys[0];\n    }\n    signatures.forEach((signature, index) => {\n      const sigPubkeyPair = {\n        signature:\n          signature == bs58.encode(DEFAULT_SIGNATURE)\n            ? null\n            : bs58.decode(signature),\n        publicKey: message.accountKeys[index],\n      };\n      transaction.signatures.push(sigPubkeyPair);\n    });\n\n    message.instructions.forEach(instruction => {\n      const keys = instruction.accounts.map(account => {\n        const pubkey = message.accountKeys[account];\n        return {\n          pubkey,\n          isSigner:\n            transaction.signatures.some(\n              keyObj => keyObj.publicKey.toString() === pubkey.toString(),\n            ) || message.isAccountSigner(account),\n          isWritable: message.isAccountWritable(account),\n        };\n      });\n\n      transaction.instructions.push(\n        new TransactionInstruction({\n          keys,\n          programId: message.accountKeys[instruction.programIdIndex],\n          data: bs58.decode(instruction.data),\n        }),\n      );\n    });\n\n    transaction._message = message;\n    transaction._json = transaction.toJSON();\n\n    return transaction;\n  }\n}\n","import {AccountKeysFromLookups} from '../message/account-keys';\nimport assert from '../utils/assert';\nimport {toBuffer} from '../utils/to-buffer';\nimport {Blockhash} from '../blockhash';\nimport {Message, MessageV0, VersionedMessage} from '../message';\nimport {PublicKey} from '../publickey';\nimport {AddressLookupTableAccount} from '../programs';\nimport {AccountMeta, TransactionInstruction} from './legacy';\n\nexport type TransactionMessageArgs = {\n  payerKey: PublicKey;\n  instructions: Array<TransactionInstruction>;\n  recentBlockhash: Blockhash;\n};\n\nexport type DecompileArgs =\n  | {\n      accountKeysFromLookups: AccountKeysFromLookups;\n    }\n  | {\n      addressLookupTableAccounts: AddressLookupTableAccount[];\n    };\n\nexport class TransactionMessage {\n  payerKey: PublicKey;\n  instructions: Array<TransactionInstruction>;\n  recentBlockhash: Blockhash;\n\n  constructor(args: TransactionMessageArgs) {\n    this.payerKey = args.payerKey;\n    this.instructions = args.instructions;\n    this.recentBlockhash = args.recentBlockhash;\n  }\n\n  static decompile(\n    message: VersionedMessage,\n    args?: DecompileArgs,\n  ): TransactionMessage {\n    const {header, compiledInstructions, recentBlockhash} = message;\n\n    const {\n      numRequiredSignatures,\n      numReadonlySignedAccounts,\n      numReadonlyUnsignedAccounts,\n    } = header;\n\n    const numWritableSignedAccounts =\n      numRequiredSignatures - numReadonlySignedAccounts;\n    assert(numWritableSignedAccounts > 0, 'Message header is invalid');\n\n    const numWritableUnsignedAccounts =\n      message.staticAccountKeys.length -\n      numRequiredSignatures -\n      numReadonlyUnsignedAccounts;\n    assert(numWritableUnsignedAccounts >= 0, 'Message header is invalid');\n\n    const accountKeys = message.getAccountKeys(args);\n    const payerKey = accountKeys.get(0);\n    if (payerKey === undefined) {\n      throw new Error(\n        'Failed to decompile message because no account keys were found',\n      );\n    }\n\n    const instructions: TransactionInstruction[] = [];\n    for (const compiledIx of compiledInstructions) {\n      const keys: AccountMeta[] = [];\n\n      for (const keyIndex of compiledIx.accountKeyIndexes) {\n        const pubkey = accountKeys.get(keyIndex);\n        if (pubkey === undefined) {\n          throw new Error(\n            `Failed to find key for account key index ${keyIndex}`,\n          );\n        }\n\n        const isSigner = keyIndex < numRequiredSignatures;\n\n        let isWritable;\n        if (isSigner) {\n          isWritable = keyIndex < numWritableSignedAccounts;\n        } else if (keyIndex < accountKeys.staticAccountKeys.length) {\n          isWritable =\n            keyIndex - numRequiredSignatures < numWritableUnsignedAccounts;\n        } else {\n          isWritable =\n            keyIndex - accountKeys.staticAccountKeys.length <\n            // accountKeysFromLookups cannot be undefined because we already found a pubkey for this index above\n            accountKeys.accountKeysFromLookups!.writable.length;\n        }\n\n        keys.push({\n          pubkey,\n          isSigner: keyIndex < header.numRequiredSignatures,\n          isWritable,\n        });\n      }\n\n      const programId = accountKeys.get(compiledIx.programIdIndex);\n      if (programId === undefined) {\n        throw new Error(\n          `Failed to find program id for program id index ${compiledIx.programIdIndex}`,\n        );\n      }\n\n      instructions.push(\n        new TransactionInstruction({\n          programId,\n          data: toBuffer(compiledIx.data),\n          keys,\n        }),\n      );\n    }\n\n    return new TransactionMessage({\n      payerKey,\n      instructions,\n      recentBlockhash,\n    });\n  }\n\n  compileToLegacyMessage(): Message {\n    return Message.compile({\n      payerKey: this.payerKey,\n      recentBlockhash: this.recentBlockhash,\n      instructions: this.instructions,\n    });\n  }\n\n  compileToV0Message(\n    addressLookupTableAccounts?: AddressLookupTableAccount[],\n  ): MessageV0 {\n    return MessageV0.compile({\n      payerKey: this.payerKey,\n      recentBlockhash: this.recentBlockhash,\n      instructions: this.instructions,\n      addressLookupTableAccounts,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {Signer} from '../keypair';\nimport assert from '../utils/assert';\nimport {VersionedMessage} from '../message/versioned';\nimport {SIGNATURE_LENGTH_IN_BYTES} from './constants';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport * as Layout from '../layout';\nimport {sign} from '../utils/ed25519';\nimport {PublicKey} from '../publickey';\n\nexport type TransactionVersion = 'legacy' | 0;\n\n/**\n * Versioned transaction class\n */\nexport class VersionedTransaction {\n  signatures: Array<Uint8Array>;\n  message: VersionedMessage;\n\n  get version(): TransactionVersion {\n    return this.message.version;\n  }\n\n  constructor(message: VersionedMessage, signatures?: Array<Uint8Array>) {\n    if (signatures !== undefined) {\n      assert(\n        signatures.length === message.header.numRequiredSignatures,\n        'Expected signatures length to be equal to the number of required signatures',\n      );\n      this.signatures = signatures;\n    } else {\n      const defaultSignatures = [];\n      for (let i = 0; i < message.header.numRequiredSignatures; i++) {\n        defaultSignatures.push(new Uint8Array(SIGNATURE_LENGTH_IN_BYTES));\n      }\n      this.signatures = defaultSignatures;\n    }\n    this.message = message;\n  }\n\n  serialize(): Uint8Array {\n    const serializedMessage = this.message.serialize();\n\n    const encodedSignaturesLength = Array<number>();\n    shortvec.encodeLength(encodedSignaturesLength, this.signatures.length);\n\n    const transactionLayout = BufferLayout.struct<{\n      encodedSignaturesLength: Uint8Array;\n      signatures: Array<Uint8Array>;\n      serializedMessage: Uint8Array;\n    }>([\n      BufferLayout.blob(\n        encodedSignaturesLength.length,\n        'encodedSignaturesLength',\n      ),\n      BufferLayout.seq(\n        Layout.signature(),\n        this.signatures.length,\n        'signatures',\n      ),\n      BufferLayout.blob(serializedMessage.length, 'serializedMessage'),\n    ]);\n\n    const serializedTransaction = new Uint8Array(2048);\n    const serializedTransactionLength = transactionLayout.encode(\n      {\n        encodedSignaturesLength: new Uint8Array(encodedSignaturesLength),\n        signatures: this.signatures,\n        serializedMessage,\n      },\n      serializedTransaction,\n    );\n\n    return serializedTransaction.slice(0, serializedTransactionLength);\n  }\n\n  static deserialize(serializedTransaction: Uint8Array): VersionedTransaction {\n    let byteArray = [...serializedTransaction];\n\n    const signatures = [];\n    const signaturesLength = shortvec.decodeLength(byteArray);\n    for (let i = 0; i < signaturesLength; i++) {\n      signatures.push(\n        new Uint8Array(byteArray.splice(0, SIGNATURE_LENGTH_IN_BYTES)),\n      );\n    }\n\n    const message = VersionedMessage.deserialize(new Uint8Array(byteArray));\n    return new VersionedTransaction(message, signatures);\n  }\n\n  sign(signers: Array<Signer>) {\n    const messageData = this.message.serialize();\n    const signerPubkeys = this.message.staticAccountKeys.slice(\n      0,\n      this.message.header.numRequiredSignatures,\n    );\n    for (const signer of signers) {\n      const signerIndex = signerPubkeys.findIndex(pubkey =>\n        pubkey.equals(signer.publicKey),\n      );\n      assert(\n        signerIndex >= 0,\n        `Cannot sign with non signer key ${signer.publicKey.toBase58()}`,\n      );\n      this.signatures[signerIndex] = sign(messageData, signer.secretKey);\n    }\n  }\n\n  addSignature(publicKey: PublicKey, signature: Uint8Array) {\n    assert(signature.byteLength === 64, 'Signature must be 64 bytes long');\n    const signerPubkeys = this.message.staticAccountKeys.slice(\n      0,\n      this.message.header.numRequiredSignatures,\n    );\n    const signerIndex = signerPubkeys.findIndex(pubkey =>\n      pubkey.equals(publicKey),\n    );\n    assert(\n      signerIndex >= 0,\n      `Can not add signature; \\`${publicKey.toBase58()}\\` is not required to sign this transaction`,\n    );\n    this.signatures[signerIndex] = signature;\n  }\n}\n","// TODO: These constants should be removed in favor of reading them out of a\n// Syscall account\n\n/**\n * @internal\n */\nexport const NUM_TICKS_PER_SECOND = 160;\n\n/**\n * @internal\n */\nexport const DEFAULT_TICKS_PER_SLOT = 64;\n\n/**\n * @internal\n */\nexport const NUM_SLOTS_PER_SECOND =\n  NUM_TICKS_PER_SECOND / DEFAULT_TICKS_PER_SLOT;\n\n/**\n * @internal\n */\nexport const MS_PER_SLOT = 1000 / NUM_SLOTS_PER_SECOND;\n","import {PublicKey} from './publickey';\n\nexport const SYSVAR_CLOCK_PUBKEY = new PublicKey(\n  'SysvarC1ock11111111111111111111111111111111',\n);\n\nexport const SYSVAR_EPOCH_SCHEDULE_PUBKEY = new PublicKey(\n  'SysvarEpochSchedu1e111111111111111111111111',\n);\n\nexport const SYSVAR_INSTRUCTIONS_PUBKEY = new PublicKey(\n  'Sysvar1nstructions1111111111111111111111111',\n);\n\nexport const SYSVAR_RECENT_BLOCKHASHES_PUBKEY = new PublicKey(\n  'SysvarRecentB1ockHashes11111111111111111111',\n);\n\nexport const SYSVAR_RENT_PUBKEY = new PublicKey(\n  'SysvarRent111111111111111111111111111111111',\n);\n\nexport const SYSVAR_REWARDS_PUBKEY = new PublicKey(\n  'SysvarRewards111111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HASHES_PUBKEY = new PublicKey(\n  'SysvarS1otHashes111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HISTORY_PUBKEY = new PublicKey(\n  'SysvarS1otHistory11111111111111111111111111',\n);\n\nexport const SYSVAR_STAKE_HISTORY_PUBKEY = new PublicKey(\n  'SysvarStakeHistory1111111111111111111111111',\n);\n","import {Connection, SignatureResult} from '../connection';\nimport {Transaction} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\nimport type {Signer} from '../keypair';\nimport type {TransactionSignature} from '../transaction';\n\n/**\n * Sign, send and confirm a transaction.\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Transaction} transaction\n * @param {Array<Signer>} signers\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmTransaction(\n  connection: Connection,\n  transaction: Transaction,\n  signers: Array<Signer>,\n  options?: ConfirmOptions &\n    Readonly<{\n      // A signal that, when aborted, cancels any outstanding transaction confirmation operations\n      abortSignal?: AbortSignal;\n    }>,\n): Promise<TransactionSignature> {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    maxRetries: options.maxRetries,\n    minContextSlot: options.minContextSlot,\n  };\n\n  const signature = await connection.sendTransaction(\n    transaction,\n    signers,\n    sendOptions,\n  );\n\n  let status: SignatureResult;\n  if (\n    transaction.recentBlockhash != null &&\n    transaction.lastValidBlockHeight != null\n  ) {\n    status = (\n      await connection.confirmTransaction(\n        {\n          abortSignal: options?.abortSignal,\n          signature: signature,\n          blockhash: transaction.recentBlockhash,\n          lastValidBlockHeight: transaction.lastValidBlockHeight,\n        },\n        options && options.commitment,\n      )\n    ).value;\n  } else if (\n    transaction.minNonceContextSlot != null &&\n    transaction.nonceInfo != null\n  ) {\n    const {nonceInstruction} = transaction.nonceInfo;\n    const nonceAccountPubkey = nonceInstruction.keys[0].pubkey;\n    status = (\n      await connection.confirmTransaction(\n        {\n          abortSignal: options?.abortSignal,\n          minContextSlot: transaction.minNonceContextSlot,\n          nonceAccountPubkey,\n          nonceValue: transaction.nonceInfo.nonce,\n          signature,\n        },\n        options && options.commitment,\n      )\n    ).value;\n  } else {\n    if (options?.abortSignal != null) {\n      console.warn(\n        'sendAndConfirmTransaction(): A transaction with a deprecated confirmation strategy was ' +\n          'supplied along with an `abortSignal`. Only transactions having `lastValidBlockHeight` ' +\n          'or a combination of `nonceInfo` and `minNonceContextSlot` are abortable.',\n      );\n    }\n    status = (\n      await connection.confirmTransaction(\n        signature,\n        options && options.commitment,\n      )\n    ).value;\n  }\n\n  if (status.err) {\n    throw new Error(\n      `Transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","// zzz\nexport function sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from './layout';\n\nexport interface IInstructionInputData {\n  readonly instruction: number;\n}\n\n/**\n * @internal\n */\nexport type InstructionType<TInputData extends IInstructionInputData> = {\n  /** The Instruction index (from solana upstream program) */\n  index: number;\n  /** The BufferLayout to use to build data */\n  layout: BufferLayout.Layout<TInputData>;\n};\n\n/**\n * Populate a buffer of instruction data using an InstructionType\n * @internal\n */\nexport function encodeData<TInputData extends IInstructionInputData>(\n  type: InstructionType<TInputData>,\n  fields?: any,\n): Buffer {\n  const allocLength =\n    type.layout.span >= 0 ? type.layout.span : Layout.getAlloc(type, fields);\n  const data = Buffer.alloc(allocLength);\n  const layoutFields = Object.assign({instruction: type.index}, fields);\n  type.layout.encode(layoutFields, data);\n  return data;\n}\n\n/**\n * Decode instruction data buffer using an InstructionType\n * @internal\n */\nexport function decodeData<TInputData extends IInstructionInputData>(\n  type: InstructionType<TInputData>,\n  buffer: Buffer,\n): TInputData {\n  let data: TInputData;\n  try {\n    data = type.layout.decode(buffer);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (data.instruction !== type.index) {\n    throw new Error(\n      `invalid instruction; instruction index mismatch ${data.instruction} != ${type.index}`,\n    );\n  }\n\n  return data;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\n/**\n * https://github.com/solana-labs/solana/blob/90bedd7e067b5b8f3ddbb45da00a4e9cabb22c62/sdk/src/fee_calculator.rs#L7-L11\n *\n * @internal\n */\nexport const FeeCalculatorLayout = BufferLayout.nu64('lamportsPerSignature');\n\n/**\n * Calculator for transaction fees.\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\nexport interface FeeCalculator {\n  /** Cost in lamports to validate a signature. */\n  lamportsPerSignature: number;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport {Buffer} from 'buffer';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport type {FeeCalculator} from './fee-calculator';\nimport {FeeCalculatorLayout} from './fee-calculator';\nimport {toBuffer} from './utils/to-buffer';\n\n/**\n * See https://github.com/solana-labs/solana/blob/0ea2843ec9cdc517572b8e62c959f41b55cf4453/sdk/src/nonce_state.rs#L29-L32\n *\n * @internal\n */\nconst NonceAccountLayout = BufferLayout.struct<\n  Readonly<{\n    authorizedPubkey: Uint8Array;\n    feeCalculator: Readonly<{\n      lamportsPerSignature: number;\n    }>;\n    nonce: Uint8Array;\n    state: number;\n    version: number;\n  }>\n>([\n  BufferLayout.u32('version'),\n  BufferLayout.u32('state'),\n  Layout.publicKey('authorizedPubkey'),\n  Layout.publicKey('nonce'),\n  BufferLayout.struct<Readonly<{lamportsPerSignature: number}>>(\n    [FeeCalculatorLayout],\n    'feeCalculator',\n  ),\n]);\n\nexport const NONCE_ACCOUNT_LENGTH = NonceAccountLayout.span;\n\n/**\n * A durable nonce is a 32 byte value encoded as a base58 string.\n */\nexport type DurableNonce = string;\n\ntype NonceAccountArgs = {\n  authorizedPubkey: PublicKey;\n  nonce: DurableNonce;\n  feeCalculator: FeeCalculator;\n};\n\n/**\n * NonceAccount class\n */\nexport class NonceAccount {\n  authorizedPubkey: PublicKey;\n  nonce: DurableNonce;\n  feeCalculator: FeeCalculator;\n\n  /**\n   * @internal\n   */\n  constructor(args: NonceAccountArgs) {\n    this.authorizedPubkey = args.authorizedPubkey;\n    this.nonce = args.nonce;\n    this.feeCalculator = args.feeCalculator;\n  }\n\n  /**\n   * Deserialize NonceAccount from the account data.\n   *\n   * @param buffer account data\n   * @return NonceAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): NonceAccount {\n    const nonceAccount = NonceAccountLayout.decode(toBuffer(buffer), 0);\n    return new NonceAccount({\n      authorizedPubkey: new PublicKey(nonceAccount.authorizedPubkey),\n      nonce: new PublicKey(nonceAccount.nonce).toString(),\n      feeCalculator: nonceAccount.feeCalculator,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport {blob, Layout} from '@solana/buffer-layout';\nimport {toBigIntLE, toBufferLE} from 'bigint-buffer';\n\ninterface EncodeDecode<T> {\n  decode(buffer: Buffer, offset?: number): T;\n  encode(src: T, buffer: Buffer, offset?: number): number;\n}\n\nconst encodeDecode = <T>(layout: Layout<T>): EncodeDecode<T> => {\n  const decode = layout.decode.bind(layout);\n  const encode = layout.encode.bind(layout);\n  return {decode, encode};\n};\n\nconst bigInt =\n  (length: number) =>\n  (property?: string): Layout<bigint> => {\n    const layout = blob(length, property);\n    const {encode, decode} = encodeDecode(layout);\n\n    const bigIntLayout = layout as Layout<unknown> as Layout<bigint>;\n\n    bigIntLayout.decode = (buffer: Buffer, offset: number) => {\n      const src = decode(buffer, offset);\n      return toBigIntLE(Buffer.from(src));\n    };\n\n    bigIntLayout.encode = (bigInt: bigint, buffer: Buffer, offset: number) => {\n      const src = toBufferLE(bigInt, length);\n      return encode(src, buffer, offset);\n    };\n\n    return bigIntLayout;\n  };\n\nexport const u64 = bigInt(8);\n\nexport const u128 = bigInt(16);\n\nexport const u192 = bigInt(24);\n\nexport const u256 = bigInt(32);\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {NONCE_ACCOUNT_LENGTH} from '../nonce-account';\nimport {PublicKey} from '../publickey';\nimport {SYSVAR_RECENT_BLOCKHASHES_PUBKEY, SYSVAR_RENT_PUBKEY} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\nimport {u64} from '../utils/bigint';\n\n/**\n * Create account system transaction params\n */\nexport type CreateAccountParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account */\n  newAccountPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Transfer system transaction params\n */\nexport type TransferParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number | bigint;\n};\n\n/**\n * Assign system transaction params\n */\nexport type AssignParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Create account with seed system transaction params\n */\nexport type CreateAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account. Must be pre-calculated with PublicKey.createWithSeed() */\n  newAccountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the created account. Must be the same as the base key used to create `newAccountPubkey` */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the created account. Must be the same as the seed used to create `newAccountPubkey` */\n  seed: string;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Create nonce account system transaction params\n */\nexport type CreateNonceAccountParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n};\n\n/**\n * Create nonce account with seed system transaction params\n */\nexport type CreateNonceAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n  /** Base public key to use to derive the address of the nonce account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the nonce account */\n  seed: string;\n};\n\n/**\n * Initialize nonce account system instruction params\n */\nexport type InitializeNonceParams = {\n  /** Nonce account which will be initialized */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the initialized nonce account */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Advance nonce account system instruction params\n */\nexport type AdvanceNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Withdraw nonce account system transaction params\n */\nexport type WithdrawNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key of the account which will receive the withdrawn nonce account balance */\n  toPubkey: PublicKey;\n  /** Amount of lamports to withdraw from the nonce account */\n  lamports: number;\n};\n\n/**\n * Authorize nonce account system transaction params\n */\nexport type AuthorizeNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the current nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key to set as the new nonce authority */\n  newAuthorizedPubkey: PublicKey;\n};\n\n/**\n * Allocate account system transaction params\n */\nexport type AllocateParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Amount of space in bytes to allocate */\n  space: number;\n};\n\n/**\n * Allocate account with seed system transaction params\n */\nexport type AllocateWithSeedParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the allocated account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the allocated account */\n  seed: string;\n  /** Amount of space in bytes to allocate */\n  space: number;\n  /** Public key of the program to assign as the owner of the allocated account */\n  programId: PublicKey;\n};\n\n/**\n * Assign account with seed system transaction params\n */\nexport type AssignWithSeedParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the assigned account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the assigned account */\n  seed: string;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Transfer with seed system transaction params\n */\nexport type TransferWithSeedParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number | bigint;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/** Decoded transfer system transaction instruction */\nexport type DecodedTransferInstruction = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: bigint;\n};\n\n/** Decoded transferWithSeed system transaction instruction */\nexport type DecodedTransferWithSeedInstruction = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: bigint;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/**\n * System Instruction class\n */\nexport class SystemInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a system instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): SystemInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: SystemInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(SYSTEM_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as SystemInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a SystemInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a create account system instruction and retrieve the instruction params.\n   */\n  static decodeCreateAccount(\n    instruction: TransactionInstruction,\n  ): CreateAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Create,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a transfer system instruction and retrieve the instruction params.\n   */\n  static decodeTransfer(\n    instruction: TransactionInstruction,\n  ): DecodedTransferInstruction {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Transfer,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a transfer with seed system instruction and retrieve the instruction params.\n   */\n  static decodeTransferWithSeed(\n    instruction: TransactionInstruction,\n  ): DecodedTransferWithSeedInstruction {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      basePubkey: instruction.keys[1].pubkey,\n      toPubkey: instruction.keys[2].pubkey,\n      lamports,\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an allocate system instruction and retrieve the instruction params.\n   */\n  static decodeAllocate(instruction: TransactionInstruction): AllocateParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {space} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Allocate,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      space,\n    };\n  }\n\n  /**\n   * Decode an allocate with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAllocateWithSeed(\n    instruction: TransactionInstruction,\n  ): AllocateWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign system instruction and retrieve the instruction params.\n   */\n  static decodeAssign(instruction: TransactionInstruction): AssignParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Assign,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAssignWithSeed(\n    instruction: TransactionInstruction,\n  ): AssignWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a create account with seed system instruction and retrieve the instruction params.\n   */\n  static decodeCreateWithSeed(\n    instruction: TransactionInstruction,\n  ): CreateAccountWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {base, seed, lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a nonce initialize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * Decode a nonce advance system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAdvance(\n    instruction: TransactionInstruction,\n  ): AdvanceNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * Decode a nonce withdraw system instruction and retrieve the instruction params.\n   */\n  static decodeNonceWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a nonce authorize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[1].pubkey,\n      newAuthorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(SystemProgram.programId)) {\n      throw new Error('invalid instruction; programId is not SystemProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid SystemInstructionType's\n */\nexport type SystemInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof SystemInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'AdvanceNonceAccount'\n  | 'Allocate'\n  | 'AllocateWithSeed'\n  | 'Assign'\n  | 'AssignWithSeed'\n  | 'AuthorizeNonceAccount'\n  | 'Create'\n  | 'CreateWithSeed'\n  | 'InitializeNonceAccount'\n  | 'Transfer'\n  | 'TransferWithSeed'\n  | 'WithdrawNonceAccount'\n  | 'UpgradeNonceAccount';\n\ntype SystemInstructionInputData = {\n  AdvanceNonceAccount: IInstructionInputData;\n  Allocate: IInstructionInputData & {\n    space: number;\n  };\n  AllocateWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    programId: Uint8Array;\n    seed: string;\n    space: number;\n  };\n  Assign: IInstructionInputData & {\n    programId: Uint8Array;\n  };\n  AssignWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    seed: string;\n    programId: Uint8Array;\n  };\n  AuthorizeNonceAccount: IInstructionInputData & {\n    authorized: Uint8Array;\n  };\n  Create: IInstructionInputData & {\n    lamports: number;\n    programId: Uint8Array;\n    space: number;\n  };\n  CreateWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    lamports: number;\n    programId: Uint8Array;\n    seed: string;\n    space: number;\n  };\n  InitializeNonceAccount: IInstructionInputData & {\n    authorized: Uint8Array;\n  };\n  Transfer: IInstructionInputData & {\n    lamports: bigint;\n  };\n  TransferWithSeed: IInstructionInputData & {\n    lamports: bigint;\n    programId: Uint8Array;\n    seed: string;\n  };\n  WithdrawNonceAccount: IInstructionInputData & {\n    lamports: number;\n  };\n  UpgradeNonceAccount: IInstructionInputData;\n};\n\n/**\n * An enumeration of valid system InstructionType's\n * @internal\n */\nexport const SYSTEM_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in SystemInstructionType]: InstructionType<\n    SystemInstructionInputData[Instruction]\n  >;\n}>({\n  Create: {\n    index: 0,\n    layout: BufferLayout.struct<SystemInstructionInputData['Create']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Assign: {\n    index: 1,\n    layout: BufferLayout.struct<SystemInstructionInputData['Assign']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Transfer: {\n    index: 2,\n    layout: BufferLayout.struct<SystemInstructionInputData['Transfer']>([\n      BufferLayout.u32('instruction'),\n      u64('lamports'),\n    ]),\n  },\n  CreateWithSeed: {\n    index: 3,\n    layout: BufferLayout.struct<SystemInstructionInputData['CreateWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  AdvanceNonceAccount: {\n    index: 4,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['AdvanceNonceAccount']\n    >([BufferLayout.u32('instruction')]),\n  },\n  WithdrawNonceAccount: {\n    index: 5,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['WithdrawNonceAccount']\n    >([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')]),\n  },\n  InitializeNonceAccount: {\n    index: 6,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['InitializeNonceAccount']\n    >([BufferLayout.u32('instruction'), Layout.publicKey('authorized')]),\n  },\n  AuthorizeNonceAccount: {\n    index: 7,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['AuthorizeNonceAccount']\n    >([BufferLayout.u32('instruction'), Layout.publicKey('authorized')]),\n  },\n  Allocate: {\n    index: 8,\n    layout: BufferLayout.struct<SystemInstructionInputData['Allocate']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('space'),\n    ]),\n  },\n  AllocateWithSeed: {\n    index: 9,\n    layout: BufferLayout.struct<SystemInstructionInputData['AllocateWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        Layout.publicKey('base'),\n        Layout.rustString('seed'),\n        BufferLayout.ns64('space'),\n        Layout.publicKey('programId'),\n      ],\n    ),\n  },\n  AssignWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct<SystemInstructionInputData['AssignWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  TransferWithSeed: {\n    index: 11,\n    layout: BufferLayout.struct<SystemInstructionInputData['TransferWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        u64('lamports'),\n        Layout.rustString('seed'),\n        Layout.publicKey('programId'),\n      ],\n    ),\n  },\n  UpgradeNonceAccount: {\n    index: 12,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['UpgradeNonceAccount']\n    >([BufferLayout.u32('instruction')]),\n  },\n});\n\n/**\n * Factory class for transactions to interact with the System program\n */\nexport class SystemProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the System program\n   */\n  static programId: PublicKey = new PublicKey(\n    '11111111111111111111111111111111',\n  );\n\n  /**\n   * Generate a transaction instruction that creates a new account\n   */\n  static createAccount(params: CreateAccountParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.Create;\n    const data = encodeData(type, {\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.newAccountPubkey, isSigner: true, isWritable: true},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that transfers lamports from one account to another\n   */\n  static transfer(\n    params: TransferParams | TransferWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed;\n      data = encodeData(type, {\n        lamports: BigInt(params.lamports),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Transfer;\n      data = encodeData(type, {lamports: BigInt(params.lamports)});\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that assigns an account to a program\n   */\n  static assign(\n    params: AssignParams | AssignWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Assign;\n      data = encodeData(type, {\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that creates a new account at\n   *   an address generated with `from`, a seed, and programId\n   */\n  static createAccountWithSeed(\n    params: CreateAccountWithSeedParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed;\n    const data = encodeData(type, {\n      base: toBuffer(params.basePubkey.toBuffer()),\n      seed: params.seed,\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n    let keys = [\n      {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n      {pubkey: params.newAccountPubkey, isSigner: false, isWritable: true},\n    ];\n    if (params.basePubkey != params.fromPubkey) {\n      keys.push({\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false,\n      });\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction that creates a new Nonce account\n   */\n  static createNonceAccount(\n    params: CreateNonceAccountParams | CreateNonceAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    if ('basePubkey' in params && 'seed' in params) {\n      transaction.add(\n        SystemProgram.createAccountWithSeed({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          basePubkey: params.basePubkey,\n          seed: params.seed,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    } else {\n      transaction.add(\n        SystemProgram.createAccount({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    }\n\n    const initParams = {\n      noncePubkey: params.noncePubkey,\n      authorizedPubkey: params.authorizedPubkey,\n    };\n\n    transaction.add(this.nonceInitialize(initParams));\n    return transaction;\n  }\n\n  /**\n   * Generate an instruction to initialize a Nonce account\n   */\n  static nonceInitialize(\n    params: InitializeNonceParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.authorizedPubkey.toBuffer()),\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate an instruction to advance the nonce in a Nonce account\n   */\n  static nonceAdvance(params: AdvanceNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount;\n    const data = encodeData(type);\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction instruction that withdraws lamports from a Nonce account\n   */\n  static nonceWithdraw(params: WithdrawNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount;\n    const data = encodeData(type, {lamports: params.lamports});\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that authorizes a new PublicKey as the authority\n   * on a Nonce account.\n   */\n  static nonceAuthorize(params: AuthorizeNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.newAuthorizedPubkey.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that allocates space in an account without funding\n   */\n  static allocate(\n    params: AllocateParams | AllocateWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        space: params.space,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Allocate;\n      data = encodeData(type, {\n        space: params.space,\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey} from './publickey';\nimport {Transaction, PACKET_DATA_SIZE} from './transaction';\nimport {MS_PER_SLOT} from './timing';\nimport {SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {sendAndConfirmTransaction} from './utils/send-and-confirm-transaction';\nimport {sleep} from './utils/sleep';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\nimport {SystemProgram} from './programs/system';\nimport {IInstructionInputData} from './instruction';\n\n// Keep program chunks under PACKET_DATA_SIZE, leaving enough room for the\n// rest of the Transaction fields\n//\n// TODO: replace 300 with a proper constant for the size of the other\n// Transaction fields\nconst CHUNK_SIZE = PACKET_DATA_SIZE - 300;\n\n/**\n * Program loader interface\n */\nexport class Loader {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Amount of program data placed in each load Transaction\n   */\n  static chunkSize: number = CHUNK_SIZE;\n\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return (\n      2 * // Every transaction requires two signatures (payer + program)\n      (Math.ceil(dataLength / Loader.chunkSize) +\n        1 + // Add one for Create transaction\n        1) // Add one for Finalize transaction\n    );\n  }\n\n  /**\n   * Loads a generic program\n   *\n   * @param connection The connection to use\n   * @param payer System account that pays to load the program\n   * @param program Account to load the program into\n   * @param programId Public key that identifies the loader\n   * @param data Program octets\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static async load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    programId: PublicKey,\n    data: Buffer | Uint8Array | Array<number>,\n  ): Promise<boolean> {\n    {\n      const balanceNeeded = await connection.getMinimumBalanceForRentExemption(\n        data.length,\n      );\n\n      // Fetch program account info to check if it has already been created\n      const programInfo = await connection.getAccountInfo(\n        program.publicKey,\n        'confirmed',\n      );\n\n      let transaction: Transaction | null = null;\n      if (programInfo !== null) {\n        if (programInfo.executable) {\n          console.error('Program load failed, account is already executable');\n          return false;\n        }\n\n        if (programInfo.data.length !== data.length) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.allocate({\n              accountPubkey: program.publicKey,\n              space: data.length,\n            }),\n          );\n        }\n\n        if (!programInfo.owner.equals(programId)) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.assign({\n              accountPubkey: program.publicKey,\n              programId,\n            }),\n          );\n        }\n\n        if (programInfo.lamports < balanceNeeded) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.transfer({\n              fromPubkey: payer.publicKey,\n              toPubkey: program.publicKey,\n              lamports: balanceNeeded - programInfo.lamports,\n            }),\n          );\n        }\n      } else {\n        transaction = new Transaction().add(\n          SystemProgram.createAccount({\n            fromPubkey: payer.publicKey,\n            newAccountPubkey: program.publicKey,\n            lamports: balanceNeeded > 0 ? balanceNeeded : 1,\n            space: data.length,\n            programId,\n          }),\n        );\n      }\n\n      // If the account is already created correctly, skip this step\n      // and proceed directly to loading instructions\n      if (transaction !== null) {\n        await sendAndConfirmTransaction(\n          connection,\n          transaction,\n          [payer, program],\n          {\n            commitment: 'confirmed',\n          },\n        );\n      }\n    }\n\n    const dataLayout = BufferLayout.struct<\n      Readonly<{\n        bytes: number[];\n        bytesLength: number;\n        bytesLengthPadding: number;\n        instruction: number;\n        offset: number;\n      }>\n    >([\n      BufferLayout.u32('instruction'),\n      BufferLayout.u32('offset'),\n      BufferLayout.u32('bytesLength'),\n      BufferLayout.u32('bytesLengthPadding'),\n      BufferLayout.seq(\n        BufferLayout.u8('byte'),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'bytes',\n      ),\n    ]);\n\n    const chunkSize = Loader.chunkSize;\n    let offset = 0;\n    let array = data;\n    let transactions = [];\n    while (array.length > 0) {\n      const bytes = array.slice(0, chunkSize);\n      const data = Buffer.alloc(chunkSize + 16);\n      dataLayout.encode(\n        {\n          instruction: 0, // Load instruction\n          offset,\n          bytes: bytes as number[],\n          bytesLength: 0,\n          bytesLengthPadding: 0,\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [{pubkey: program.publicKey, isSigner: true, isWritable: true}],\n        programId,\n        data,\n      });\n      transactions.push(\n        sendAndConfirmTransaction(connection, transaction, [payer, program], {\n          commitment: 'confirmed',\n        }),\n      );\n\n      // Delay between sends in an attempt to reduce rate limit errors\n      if (connection._rpcEndpoint.includes('solana.com')) {\n        const REQUESTS_PER_SECOND = 4;\n        await sleep(1000 / REQUESTS_PER_SECOND);\n      }\n\n      offset += chunkSize;\n      array = array.slice(chunkSize);\n    }\n    await Promise.all(transactions);\n\n    // Finalize the account loaded with program data for execution\n    {\n      const dataLayout = BufferLayout.struct<IInstructionInputData>([\n        BufferLayout.u32('instruction'),\n      ]);\n\n      const data = Buffer.alloc(dataLayout.span);\n      dataLayout.encode(\n        {\n          instruction: 1, // Finalize instruction\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [\n          {pubkey: program.publicKey, isSigner: true, isWritable: true},\n          {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        ],\n        programId,\n        data,\n      });\n      const deployCommitment = 'processed';\n      const finalizeSignature = await connection.sendTransaction(\n        transaction,\n        [payer, program],\n        {preflightCommitment: deployCommitment},\n      );\n      const {context, value} = await connection.confirmTransaction(\n        {\n          signature: finalizeSignature,\n          lastValidBlockHeight: transaction.lastValidBlockHeight!,\n          blockhash: transaction.recentBlockhash!,\n        },\n        deployCommitment,\n      );\n      if (value.err) {\n        throw new Error(\n          `Transaction ${finalizeSignature} failed (${JSON.stringify(value)})`,\n        );\n      }\n      // We prevent programs from being usable until the slot after their deployment.\n      // See https://github.com/solana-labs/solana/pull/29654\n      while (\n        true // eslint-disable-line no-constant-condition\n      ) {\n        try {\n          const currentSlot = await connection.getSlot({\n            commitment: deployCommitment,\n          });\n          if (currentSlot > context.slot) {\n            break;\n          }\n        } catch {\n          /* empty */\n        }\n        await new Promise(resolve =>\n          setTimeout(resolve, Math.round(MS_PER_SLOT / 2)),\n        );\n      }\n    }\n\n    // success\n    return true;\n  }\n}\n","import type {Buffer} from 'buffer';\n\nimport {PublicKey} from './publickey';\nimport {Loader} from './loader';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\n\nexport const BPF_LOADER_PROGRAM_ID = new PublicKey(\n  'BPFLoader2111111111111111111111111111111111',\n);\n\n/**\n * Factory class for transactions to interact with a program loader\n */\nexport class BpfLoader {\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return Loader.getMinNumSignatures(dataLength);\n  }\n\n  /**\n   * Load a SBF program\n   *\n   * @param connection The connection to use\n   * @param payer Account that will pay program loading fees\n   * @param program Account to load the program into\n   * @param elf The entire ELF containing the SBF program\n   * @param loaderProgramId The program id of the BPF loader to use\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    elf: Buffer | Uint8Array | Array<number>,\n    loaderProgramId: PublicKey,\n  ): Promise<boolean> {\n    return Loader.load(connection, payer, program, loaderProgramId, elf);\n  }\n}\n","var objToString = Object.prototype.toString;\nvar objKeys = Object.keys || function(obj) {\n\t\tvar keys = [];\n\t\tfor (var name in obj) {\n\t\t\tkeys.push(name);\n\t\t}\n\t\treturn keys;\n\t};\n\nfunction stringify(val, isArrayProp) {\n\tvar i, max, str, keys, key, propVal, toStr;\n\tif (val === true) {\n\t\treturn \"true\";\n\t}\n\tif (val === false) {\n\t\treturn \"false\";\n\t}\n\tswitch (typeof val) {\n\t\tcase \"object\":\n\t\t\tif (val === null) {\n\t\t\t\treturn null;\n\t\t\t} else if (val.toJSON && typeof val.toJSON === \"function\") {\n\t\t\t\treturn stringify(val.toJSON(), isArrayProp);\n\t\t\t} else {\n\t\t\t\ttoStr = objToString.call(val);\n\t\t\t\tif (toStr === \"[object Array]\") {\n\t\t\t\t\tstr = '[';\n\t\t\t\t\tmax = val.length - 1;\n\t\t\t\t\tfor(i = 0; i < max; i++) {\n\t\t\t\t\t\tstr += stringify(val[i], true) + ',';\n\t\t\t\t\t}\n\t\t\t\t\tif (max > -1) {\n\t\t\t\t\t\tstr += stringify(val[i], true);\n\t\t\t\t\t}\n\t\t\t\t\treturn str + ']';\n\t\t\t\t} else if (toStr === \"[object Object]\") {\n\t\t\t\t\t// only object is left\n\t\t\t\t\tkeys = objKeys(val).sort();\n\t\t\t\t\tmax = keys.length;\n\t\t\t\t\tstr = \"\";\n\t\t\t\t\ti = 0;\n\t\t\t\t\twhile (i < max) {\n\t\t\t\t\t\tkey = keys[i];\n\t\t\t\t\t\tpropVal = stringify(val[key], false);\n\t\t\t\t\t\tif (propVal !== undefined) {\n\t\t\t\t\t\t\tif (str) {\n\t\t\t\t\t\t\t\tstr += ',';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tstr += JSON.stringify(key) + ':' + propVal;\n\t\t\t\t\t\t}\n\t\t\t\t\t\ti++;\n\t\t\t\t\t}\n\t\t\t\t\treturn '{' + str + '}';\n\t\t\t\t} else {\n\t\t\t\t\treturn JSON.stringify(val);\n\t\t\t\t}\n\t\t\t}\n\t\tcase \"function\":\n\t\tcase \"undefined\":\n\t\t\treturn isArrayProp ? null : undefined;\n\t\tcase \"string\":\n\t\t\treturn JSON.stringify(val);\n\t\tdefault:\n\t\t\treturn isFinite(val) ? val : null;\n\t}\n}\n\nmodule.exports = function(val) {\n\tvar returnVal = stringify(val, false);\n\tif (returnVal !== undefined) {\n\t\treturn ''+ returnVal;\n\t}\n};\n","const MINIMUM_SLOT_PER_EPOCH = 32;\n\n// Returns the number of trailing zeros in the binary representation of self.\nfunction trailingZeros(n: number) {\n  let trailingZeros = 0;\n  while (n > 1) {\n    n /= 2;\n    trailingZeros++;\n  }\n  return trailingZeros;\n}\n\n// Returns the smallest power of two greater than or equal to n\nfunction nextPowerOfTwo(n: number) {\n  if (n === 0) return 1;\n  n--;\n  n |= n >> 1;\n  n |= n >> 2;\n  n |= n >> 4;\n  n |= n >> 8;\n  n |= n >> 16;\n  n |= n >> 32;\n  return n + 1;\n}\n\n/**\n * Epoch schedule\n * (see https://docs.solana.com/terminology#epoch)\n * Can be retrieved with the {@link Connection.getEpochSchedule} method\n */\nexport class EpochSchedule {\n  /** The maximum number of slots in each epoch */\n  public slotsPerEpoch: number;\n  /** The number of slots before beginning of an epoch to calculate a leader schedule for that epoch */\n  public leaderScheduleSlotOffset: number;\n  /** Indicates whether epochs start short and grow */\n  public warmup: boolean;\n  /** The first epoch with `slotsPerEpoch` slots */\n  public firstNormalEpoch: number;\n  /** The first slot of `firstNormalEpoch` */\n  public firstNormalSlot: number;\n\n  constructor(\n    slotsPerEpoch: number,\n    leaderScheduleSlotOffset: number,\n    warmup: boolean,\n    firstNormalEpoch: number,\n    firstNormalSlot: number,\n  ) {\n    this.slotsPerEpoch = slotsPerEpoch;\n    this.leaderScheduleSlotOffset = leaderScheduleSlotOffset;\n    this.warmup = warmup;\n    this.firstNormalEpoch = firstNormalEpoch;\n    this.firstNormalSlot = firstNormalSlot;\n  }\n\n  getEpoch(slot: number): number {\n    return this.getEpochAndSlotIndex(slot)[0];\n  }\n\n  getEpochAndSlotIndex(slot: number): [number, number] {\n    if (slot < this.firstNormalSlot) {\n      const epoch =\n        trailingZeros(nextPowerOfTwo(slot + MINIMUM_SLOT_PER_EPOCH + 1)) -\n        trailingZeros(MINIMUM_SLOT_PER_EPOCH) -\n        1;\n\n      const epochLen = this.getSlotsInEpoch(epoch);\n      const slotIndex = slot - (epochLen - MINIMUM_SLOT_PER_EPOCH);\n      return [epoch, slotIndex];\n    } else {\n      const normalSlotIndex = slot - this.firstNormalSlot;\n      const normalEpochIndex = Math.floor(normalSlotIndex / this.slotsPerEpoch);\n      const epoch = this.firstNormalEpoch + normalEpochIndex;\n      const slotIndex = normalSlotIndex % this.slotsPerEpoch;\n      return [epoch, slotIndex];\n    }\n  }\n\n  getFirstSlotInEpoch(epoch: number): number {\n    if (epoch <= this.firstNormalEpoch) {\n      return (Math.pow(2, epoch) - 1) * MINIMUM_SLOT_PER_EPOCH;\n    } else {\n      return (\n        (epoch - this.firstNormalEpoch) * this.slotsPerEpoch +\n        this.firstNormalSlot\n      );\n    }\n  }\n\n  getLastSlotInEpoch(epoch: number): number {\n    return this.getFirstSlotInEpoch(epoch) + this.getSlotsInEpoch(epoch) - 1;\n  }\n\n  getSlotsInEpoch(epoch: number) {\n    if (epoch < this.firstNormalEpoch) {\n      return Math.pow(2, epoch + trailingZeros(MINIMUM_SLOT_PER_EPOCH));\n    } else {\n      return this.slotsPerEpoch;\n    }\n  }\n}\n","export class SendTransactionError extends Error {\n  logs: string[] | undefined;\n\n  constructor(message: string, logs?: string[]) {\n    super(message);\n\n    this.logs = logs;\n  }\n}\n\n// Keep in sync with client/src/rpc_custom_errors.rs\n// Typescript `enums` thwart tree-shaking. See https://bargsten.org/jsts/enums/\nexport const SolanaJSONRPCErrorCode = {\n  JSON_RPC_SERVER_ERROR_BLOCK_CLEANED_UP: -32001,\n  JSON_RPC_SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE: -32002,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_VERIFICATION_FAILURE: -32003,\n  JSON_RPC_SERVER_ERROR_BLOCK_NOT_AVAILABLE: -32004,\n  JSON_RPC_SERVER_ERROR_NODE_UNHEALTHY: -32005,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE: -32006,\n  JSON_RPC_SERVER_ERROR_SLOT_SKIPPED: -32007,\n  JSON_RPC_SERVER_ERROR_NO_SNAPSHOT: -32008,\n  JSON_RPC_SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED: -32009,\n  JSON_RPC_SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX: -32010,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_HISTORY_NOT_AVAILABLE: -32011,\n  JSON_RPC_SCAN_ERROR: -32012,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_LEN_MISMATCH: -32013,\n  JSON_RPC_SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET: -32014,\n  JSON_RPC_SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION: -32015,\n  JSON_RPC_SERVER_ERROR_MIN_CONTEXT_SLOT_NOT_REACHED: -32016,\n} as const;\nexport type SolanaJSONRPCErrorCodeEnum =\n  (typeof SolanaJSONRPCErrorCode)[keyof typeof SolanaJSONRPCErrorCode];\n\nexport class SolanaJSONRPCError extends Error {\n  code: SolanaJSONRPCErrorCodeEnum | unknown;\n  data?: any;\n  constructor(\n    {\n      code,\n      message,\n      data,\n    }: Readonly<{code: unknown; message: string; data?: any}>,\n    customMessage?: string,\n  ) {\n    super(customMessage != null ? `${customMessage}: ${message}` : message);\n    this.code = code;\n    this.data = data;\n    this.name = 'SolanaJSONRPCError';\n  }\n}\n","export const Headers = globalThis.Headers;\nexport const Request = globalThis.Request;\nexport const Response = globalThis.Response;\nexport default globalThis.fetch;\n","import RpcWebSocketCommonClient from 'rpc-websockets/dist/lib/client';\nimport RpcWebSocketBrowserFactory from 'rpc-websockets/dist/lib/client/websocket.browser';\nimport {\n  ICommonWebSocket,\n  IWSClientAdditionalOptions,\n  NodeWebSocketType,\n  NodeWebSocketTypeOptions,\n} from 'rpc-websockets/dist/lib/client/client.types';\n\nimport createRpc from './rpc-websocket-factory';\n\ninterface IHasReadyState {\n  readyState: WebSocket['readyState'];\n}\n\nexport default class RpcWebSocketClient extends RpcWebSocketCommonClient {\n  private underlyingSocket: IHasReadyState | undefined;\n  constructor(\n    address?: string,\n    options?: IWSClientAdditionalOptions & NodeWebSocketTypeOptions,\n    generate_request_id?: (\n      method: string,\n      params: object | Array<any>,\n    ) => number,\n  ) {\n    const webSocketFactory = (url: string) => {\n      const rpc = createRpc(url, {\n        autoconnect: true,\n        max_reconnects: 5,\n        reconnect: true,\n        reconnect_interval: 1000,\n        ...options,\n      });\n      if ('socket' in rpc) {\n        this.underlyingSocket = (\n          rpc as ReturnType<typeof RpcWebSocketBrowserFactory>\n        ).socket;\n      } else {\n        this.underlyingSocket = rpc as NodeWebSocketType;\n      }\n      return rpc as ICommonWebSocket;\n    };\n    super(webSocketFactory, address, options, generate_request_id);\n  }\n  call(\n    ...args: Parameters<RpcWebSocketCommonClient['call']>\n  ): ReturnType<RpcWebSocketCommonClient['call']> {\n    const readyState = this.underlyingSocket?.readyState;\n    if (readyState === 1 /* WebSocket.OPEN */) {\n      return super.call(...args);\n    }\n    return Promise.reject(\n      new Error(\n        'Tried to call a JSON-RPC method `' +\n          args[0] +\n          '` but the socket was not `CONNECTING` or `OPEN` (`readyState` was ' +\n          readyState +\n          ')',\n      ),\n    );\n  }\n  notify(\n    ...args: Parameters<RpcWebSocketCommonClient['notify']>\n  ): ReturnType<RpcWebSocketCommonClient['notify']> {\n    const readyState = this.underlyingSocket?.readyState;\n    if (readyState === 1 /* WebSocket.OPEN */) {\n      return super.notify(...args);\n    }\n    return Promise.reject(\n      new Error(\n        'Tried to send a JSON-RPC notification `' +\n          args[0] +\n          '` but the socket was not `CONNECTING` or `OPEN` (`readyState` was ' +\n          readyState +\n          ')',\n      ),\n    );\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nexport interface IAccountStateData {\n  readonly typeIndex: number;\n}\n\n/**\n * @internal\n */\nexport type AccountType<TInputData extends IAccountStateData> = {\n  /** The account type index (from solana upstream program) */\n  index: number;\n  /** The BufferLayout to use to build data */\n  layout: BufferLayout.Layout<TInputData>;\n};\n\n/**\n * Decode account data buffer using an AccountType\n * @internal\n */\nexport function decodeData<TAccountStateData extends IAccountStateData>(\n  type: AccountType<TAccountStateData>,\n  data: Uint8Array,\n): TAccountStateData {\n  let decoded: TAccountStateData;\n  try {\n    decoded = type.layout.decode(data);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (decoded.typeIndex !== type.index) {\n    throw new Error(\n      `invalid account data; account type mismatch ${decoded.typeIndex} != ${type.index}`,\n    );\n  }\n\n  return decoded;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport assert from '../../utils/assert';\nimport * as Layout from '../../layout';\nimport {PublicKey} from '../../publickey';\nimport {u64} from '../../utils/bigint';\nimport {decodeData} from '../../account-data';\n\nexport type AddressLookupTableState = {\n  deactivationSlot: bigint;\n  lastExtendedSlot: number;\n  lastExtendedSlotStartIndex: number;\n  authority?: PublicKey;\n  addresses: Array<PublicKey>;\n};\n\nexport type AddressLookupTableAccountArgs = {\n  key: PublicKey;\n  state: AddressLookupTableState;\n};\n\n/// The serialized size of lookup table metadata\nconst LOOKUP_TABLE_META_SIZE = 56;\n\nexport class AddressLookupTableAccount {\n  key: PublicKey;\n  state: AddressLookupTableState;\n\n  constructor(args: AddressLookupTableAccountArgs) {\n    this.key = args.key;\n    this.state = args.state;\n  }\n\n  isActive(): boolean {\n    const U64_MAX = BigInt('0xffffffffffffffff');\n    return this.state.deactivationSlot === U64_MAX;\n  }\n\n  static deserialize(accountData: Uint8Array): AddressLookupTableState {\n    const meta = decodeData(LookupTableMetaLayout, accountData);\n\n    const serializedAddressesLen = accountData.length - LOOKUP_TABLE_META_SIZE;\n    assert(serializedAddressesLen >= 0, 'lookup table is invalid');\n    assert(serializedAddressesLen % 32 === 0, 'lookup table is invalid');\n\n    const numSerializedAddresses = serializedAddressesLen / 32;\n    const {addresses} = BufferLayout.struct<{addresses: Array<Uint8Array>}>([\n      BufferLayout.seq(Layout.publicKey(), numSerializedAddresses, 'addresses'),\n    ]).decode(accountData.slice(LOOKUP_TABLE_META_SIZE));\n\n    return {\n      deactivationSlot: meta.deactivationSlot,\n      lastExtendedSlot: meta.lastExtendedSlot,\n      lastExtendedSlotStartIndex: meta.lastExtendedStartIndex,\n      authority:\n        meta.authority.length !== 0\n          ? new PublicKey(meta.authority[0])\n          : undefined,\n      addresses: addresses.map(address => new PublicKey(address)),\n    };\n  }\n}\n\nconst LookupTableMetaLayout = {\n  index: 1,\n  layout: BufferLayout.struct<{\n    typeIndex: number;\n    deactivationSlot: bigint;\n    lastExtendedSlot: number;\n    lastExtendedStartIndex: number;\n    authority: Array<Uint8Array>;\n  }>([\n    BufferLayout.u32('typeIndex'),\n    u64('deactivationSlot'),\n    BufferLayout.nu64('lastExtendedSlot'),\n    BufferLayout.u8('lastExtendedStartIndex'),\n    BufferLayout.u8(), // option\n    BufferLayout.seq(\n      Layout.publicKey(),\n      BufferLayout.offset(BufferLayout.u8(), -1),\n      'authority',\n    ),\n  ]),\n};\n","const URL_RE = /^[^:]+:\\/\\/([^:[]+|\\[[^\\]]+\\])(:\\d+)?(.*)/i;\n\nexport function makeWebsocketUrl(endpoint: string) {\n  const matches = endpoint.match(URL_RE);\n  if (matches == null) {\n    throw TypeError(`Failed to validate endpoint URL \\`${endpoint}\\``);\n  }\n  const [\n    _, // eslint-disable-line @typescript-eslint/no-unused-vars\n    hostish,\n    portWithColon,\n    rest,\n  ] = matches;\n  const protocol = endpoint.startsWith('https:') ? 'wss:' : 'ws:';\n  const startPort =\n    portWithColon == null ? null : parseInt(portWithColon.slice(1), 10);\n  const websocketPort =\n    // Only shift the port by +1 as a convention for ws(s) only if given endpoint\n    // is explictly specifying the endpoint port (HTTP-based RPC), assuming\n    // we're directly trying to connect to solana-validator's ws listening port.\n    // When the endpoint omits the port, we're connecting to the protocol\n    // default ports: http(80) or https(443) and it's assumed we're behind a reverse\n    // proxy which manages WebSocket upgrade and backend port redirection.\n    startPort == null ? '' : `:${startPort + 1}`;\n  return `${protocol}//${hostish}${websocketPort}${rest}`;\n}\n","import HttpKeepAliveAgent, {\n  HttpsAgent as HttpsKeepAliveAgent,\n} from 'agentkeepalive';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n// @ts-ignore\nimport fastStableStringify from 'fast-stable-stringify';\nimport type {Agent as NodeHttpAgent} from 'http';\nimport {Agent as NodeHttpsAgent} from 'https';\nimport {\n  type as pick,\n  number,\n  string,\n  array,\n  boolean,\n  literal,\n  record,\n  union,\n  optional,\n  nullable,\n  coerce,\n  instance,\n  create,\n  tuple,\n  unknown,\n  any,\n} from 'superstruct';\nimport type {Struct} from 'superstruct';\nimport RpcClient from 'jayson/lib/client/browser';\nimport {JSONRPCError} from 'jayson';\n\nimport {EpochSchedule} from './epoch-schedule';\nimport {SendTransactionError, SolanaJSONRPCError} from './errors';\nimport fetchImpl from './fetch-impl';\nimport {DurableNonce, NonceAccount} from './nonce-account';\nimport {PublicKey} from './publickey';\nimport {Signer} from './keypair';\nimport RpcWebSocketClient from './rpc-websocket';\nimport {MS_PER_SLOT} from './timing';\nimport {\n  Transaction,\n  TransactionStatus,\n  TransactionVersion,\n  VersionedTransaction,\n} from './transaction';\nimport {Message, MessageHeader, MessageV0, VersionedMessage} from './message';\nimport {AddressLookupTableAccount} from './programs/address-lookup-table/state';\nimport assert from './utils/assert';\nimport {sleep} from './utils/sleep';\nimport {toBuffer} from './utils/to-buffer';\nimport {\n  TransactionExpiredBlockheightExceededError,\n  TransactionExpiredNonceInvalidError,\n  TransactionExpiredTimeoutError,\n} from './transaction/expiry-custom-errors';\nimport {makeWebsocketUrl} from './utils/makeWebsocketUrl';\nimport type {Blockhash} from './blockhash';\nimport type {FeeCalculator} from './fee-calculator';\nimport type {TransactionSignature} from './transaction';\nimport type {CompiledInstruction} from './message';\n\nconst PublicKeyFromString = coerce(\n  instance(PublicKey),\n  string(),\n  value => new PublicKey(value),\n);\n\nconst RawAccountDataResult = tuple([string(), literal('base64')]);\n\nconst BufferFromRawAccountData = coerce(\n  instance(Buffer),\n  RawAccountDataResult,\n  value => Buffer.from(value[0], 'base64'),\n);\n\n/**\n * Attempt to use a recent blockhash for up to 30 seconds\n * @internal\n */\nexport const BLOCKHASH_CACHE_TIMEOUT_MS = 30 * 1000;\n\n/**\n * HACK.\n * Copied from rpc-websockets/dist/lib/client.\n * Otherwise, `yarn build` fails with:\n * https://gist.github.com/steveluscher/c057eca81d479ef705cdb53162f9971d\n */\ninterface IWSRequestParams {\n  [x: string]: any;\n  [x: number]: any;\n}\n\ntype ClientSubscriptionId = number;\n/** @internal */ type ServerSubscriptionId = number;\n/** @internal */ type SubscriptionConfigHash = string;\n/** @internal */ type SubscriptionDisposeFn = () => Promise<void>;\n/** @internal */ type SubscriptionStateChangeCallback = (\n  nextState: StatefulSubscription['state'],\n) => void;\n/** @internal */ type SubscriptionStateChangeDisposeFn = () => void;\n/**\n * @internal\n * Every subscription contains the args used to open the subscription with\n * the server, and a list of callers interested in notifications.\n */\ntype BaseSubscription<TMethod = SubscriptionConfig['method']> = Readonly<{\n  args: IWSRequestParams;\n  callbacks: Set<Extract<SubscriptionConfig, {method: TMethod}>['callback']>;\n}>;\n/**\n * @internal\n * A subscription may be in various states of connectedness. Only when it is\n * fully connected will it have a server subscription id associated with it.\n * This id can be returned to the server to unsubscribe the client entirely.\n */\ntype StatefulSubscription = Readonly<\n  // New subscriptions that have not yet been\n  // sent to the server start in this state.\n  | {\n      state: 'pending';\n    }\n  // These subscriptions have been sent to the server\n  // and are waiting for the server to acknowledge them.\n  | {\n      state: 'subscribing';\n    }\n  // These subscriptions have been acknowledged by the\n  // server and have been assigned server subscription ids.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'subscribed';\n    }\n  // These subscriptions are intended to be torn down and\n  // are waiting on an acknowledgement from the server.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'unsubscribing';\n    }\n  // The request to tear down these subscriptions has been\n  // acknowledged by the server. The `serverSubscriptionId`\n  // is the id of the now-dead subscription.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'unsubscribed';\n    }\n>;\n/**\n * A type that encapsulates a subscription's RPC method\n * names and notification (callback) signature.\n */\ntype SubscriptionConfig = Readonly<\n  | {\n      callback: AccountChangeCallback;\n      method: 'accountSubscribe';\n      unsubscribeMethod: 'accountUnsubscribe';\n    }\n  | {\n      callback: LogsCallback;\n      method: 'logsSubscribe';\n      unsubscribeMethod: 'logsUnsubscribe';\n    }\n  | {\n      callback: ProgramAccountChangeCallback;\n      method: 'programSubscribe';\n      unsubscribeMethod: 'programUnsubscribe';\n    }\n  | {\n      callback: RootChangeCallback;\n      method: 'rootSubscribe';\n      unsubscribeMethod: 'rootUnsubscribe';\n    }\n  | {\n      callback: SignatureSubscriptionCallback;\n      method: 'signatureSubscribe';\n      unsubscribeMethod: 'signatureUnsubscribe';\n    }\n  | {\n      callback: SlotChangeCallback;\n      method: 'slotSubscribe';\n      unsubscribeMethod: 'slotUnsubscribe';\n    }\n  | {\n      callback: SlotUpdateCallback;\n      method: 'slotsUpdatesSubscribe';\n      unsubscribeMethod: 'slotsUpdatesUnsubscribe';\n    }\n>;\n/**\n * @internal\n * Utility type that keeps tagged unions intact while omitting properties.\n */\ntype DistributiveOmit<T, K extends PropertyKey> = T extends unknown\n  ? Omit<T, K>\n  : never;\n/**\n * @internal\n * This type represents a single subscribable 'topic.' It's made up of:\n *\n * - The args used to open the subscription with the server,\n * - The state of the subscription, in terms of its connectedness, and\n * - The set of callbacks to call when the server publishes notifications\n *\n * This record gets indexed by `SubscriptionConfigHash` and is used to\n * set up subscriptions, fan out notifications, and track subscription state.\n */\ntype Subscription = BaseSubscription &\n  StatefulSubscription &\n  DistributiveOmit<SubscriptionConfig, 'callback'>;\n\ntype RpcRequest = (methodName: string, args: Array<any>) => Promise<any>;\n\ntype RpcBatchRequest = (requests: RpcParams[]) => Promise<any[]>;\n\n/**\n * @internal\n */\nexport type RpcParams = {\n  methodName: string;\n  args: Array<any>;\n};\n\nexport type TokenAccountsFilter =\n  | {\n      mint: PublicKey;\n    }\n  | {\n      programId: PublicKey;\n    };\n\n/**\n * Extra contextual information for RPC responses\n */\nexport type Context = {\n  slot: number;\n};\n\n/**\n * Options for sending transactions\n */\nexport type SendOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Options for confirming transactions\n */\nexport type ConfirmOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** desired commitment level */\n  commitment?: Commitment;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Options for getConfirmedSignaturesForAddress2\n */\nexport type ConfirmedSignaturesForAddress2Options = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n};\n\n/**\n * Options for getSignaturesForAddress\n */\nexport type SignaturesForAddressOptions = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * RPC Response with extra contextual information\n */\nexport type RpcResponseAndContext<T> = {\n  /** response context */\n  context: Context;\n  /** response value */\n  value: T;\n};\n\nexport type BlockhashWithExpiryBlockHeight = Readonly<{\n  blockhash: Blockhash;\n  lastValidBlockHeight: number;\n}>;\n\n/**\n * A strategy for confirming transactions that uses the last valid\n * block height for a given blockhash to check for transaction expiration.\n */\nexport type BlockheightBasedTransactionConfirmationStrategy =\n  BaseTransactionConfirmationStrategy & BlockhashWithExpiryBlockHeight;\n\n/**\n * A strategy for confirming durable nonce transactions.\n */\nexport type DurableNonceTransactionConfirmationStrategy =\n  BaseTransactionConfirmationStrategy & {\n    /**\n     * The lowest slot at which to fetch the nonce value from the\n     * nonce account. This should be no lower than the slot at\n     * which the last-known value of the nonce was fetched.\n     */\n    minContextSlot: number;\n    /**\n     * The account where the current value of the nonce is stored.\n     */\n    nonceAccountPubkey: PublicKey;\n    /**\n     * The nonce value that was used to sign the transaction\n     * for which confirmation is being sought.\n     */\n    nonceValue: DurableNonce;\n  };\n\n/**\n * Properties shared by all transaction confirmation strategies\n */\nexport type BaseTransactionConfirmationStrategy = Readonly<{\n  /** A signal that, when aborted, cancels any outstanding transaction confirmation operations */\n  abortSignal?: AbortSignal;\n  signature: TransactionSignature;\n}>;\n\n/**\n * This type represents all transaction confirmation strategies\n */\nexport type TransactionConfirmationStrategy =\n  | BlockheightBasedTransactionConfirmationStrategy\n  | DurableNonceTransactionConfirmationStrategy;\n\n/* @internal */\nfunction assertEndpointUrl(putativeUrl: string) {\n  if (/^https?:/.test(putativeUrl) === false) {\n    throw new TypeError('Endpoint URL must start with `http:` or `https:`.');\n  }\n  return putativeUrl;\n}\n\n/** @internal */\nfunction extractCommitmentFromConfig<TConfig>(\n  commitmentOrConfig?: Commitment | ({commitment?: Commitment} & TConfig),\n) {\n  let commitment: Commitment | undefined;\n  let config: Omit<TConfig, 'commitment'> | undefined;\n  if (typeof commitmentOrConfig === 'string') {\n    commitment = commitmentOrConfig;\n  } else if (commitmentOrConfig) {\n    const {commitment: specifiedCommitment, ...specifiedConfig} =\n      commitmentOrConfig;\n    commitment = specifiedCommitment;\n    config = specifiedConfig;\n  }\n  return {commitment, config};\n}\n\n/**\n * @internal\n */\nfunction createRpcResult<T, U>(result: Struct<T, U>) {\n  return union([\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      result,\n    }),\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      error: pick({\n        code: unknown(),\n        message: string(),\n        data: optional(any()),\n      }),\n    }),\n  ]);\n}\n\nconst UnknownRpcResult = createRpcResult(unknown());\n\n/**\n * @internal\n */\nfunction jsonRpcResult<T, U>(schema: Struct<T, U>) {\n  return coerce(createRpcResult(schema), UnknownRpcResult, value => {\n    if ('error' in value) {\n      return value;\n    } else {\n      return {\n        ...value,\n        result: create(value.result, schema),\n      };\n    }\n  });\n}\n\n/**\n * @internal\n */\nfunction jsonRpcResultAndContext<T, U>(value: Struct<T, U>) {\n  return jsonRpcResult(\n    pick({\n      context: pick({\n        slot: number(),\n      }),\n      value,\n    }),\n  );\n}\n\n/**\n * @internal\n */\nfunction notificationResultAndContext<T, U>(value: Struct<T, U>) {\n  return pick({\n    context: pick({\n      slot: number(),\n    }),\n    value,\n  });\n}\n\n/**\n * @internal\n */\nfunction versionedMessageFromResponse(\n  version: TransactionVersion | undefined,\n  response: MessageResponse,\n): VersionedMessage {\n  if (version === 0) {\n    return new MessageV0({\n      header: response.header,\n      staticAccountKeys: response.accountKeys.map(\n        accountKey => new PublicKey(accountKey),\n      ),\n      recentBlockhash: response.recentBlockhash,\n      compiledInstructions: response.instructions.map(ix => ({\n        programIdIndex: ix.programIdIndex,\n        accountKeyIndexes: ix.accounts,\n        data: bs58.decode(ix.data),\n      })),\n      addressTableLookups: response.addressTableLookups!,\n    });\n  } else {\n    return new Message(response);\n  }\n}\n\n/**\n * The level of commitment desired when querying state\n * <pre>\n *   'processed': Query the most recent block which has reached 1 confirmation by the connected node\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Commitment =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized'\n  | 'recent' // Deprecated as of v1.5.5\n  | 'single' // Deprecated as of v1.5.5\n  | 'singleGossip' // Deprecated as of v1.5.5\n  | 'root' // Deprecated as of v1.5.5\n  | 'max'; // Deprecated as of v1.5.5\n\n/**\n * A subset of Commitment levels, which are at least optimistically confirmed\n * <pre>\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Finality = 'confirmed' | 'finalized';\n\n/**\n * Filter for largest accounts query\n * <pre>\n *   'circulating':    Return the largest accounts that are part of the circulating supply\n *   'nonCirculating': Return the largest accounts that are not part of the circulating supply\n * </pre>\n */\nexport type LargestAccountsFilter = 'circulating' | 'nonCirculating';\n\n/**\n * Configuration object for changing `getAccountInfo` query behavior\n */\nexport type GetAccountInfoConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n};\n\n/**\n * Configuration object for changing `getBalance` query behavior\n */\nexport type GetBalanceConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getBlock` query behavior\n */\nexport type GetBlockConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /**\n   * Whether to populate the rewards array. If parameter not provided, the default includes rewards.\n   */\n  rewards?: boolean;\n  /**\n   * Level of transaction detail to return, either \"full\", \"accounts\", \"signatures\", or \"none\". If\n   * parameter not provided, the default detail level is \"full\". If \"accounts\" are requested,\n   * transaction details only include signatures and an annotated list of accounts in each\n   * transaction. Transaction metadata is limited to only: fee, err, pre_balances, post_balances,\n   * pre_token_balances, and post_token_balances.\n   */\n  transactionDetails?: 'accounts' | 'full' | 'none' | 'signatures';\n};\n\n/**\n * Configuration object for changing `getBlock` query behavior\n */\nexport type GetVersionedBlockConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /** The max transaction version to return in responses. If the requested transaction is a higher version, an error will be returned */\n  maxSupportedTransactionVersion?: number;\n  /**\n   * Whether to populate the rewards array. If parameter not provided, the default includes rewards.\n   */\n  rewards?: boolean;\n  /**\n   * Level of transaction detail to return, either \"full\", \"accounts\", \"signatures\", or \"none\". If\n   * parameter not provided, the default detail level is \"full\". If \"accounts\" are requested,\n   * transaction details only include signatures and an annotated list of accounts in each\n   * transaction. Transaction metadata is limited to only: fee, err, pre_balances, post_balances,\n   * pre_token_balances, and post_token_balances.\n   */\n  transactionDetails?: 'accounts' | 'full' | 'none' | 'signatures';\n};\n\n/**\n * Configuration object for changing `getStakeMinimumDelegation` query behavior\n */\nexport type GetStakeMinimumDelegationConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n};\n\n/**\n * Configuration object for changing `getBlockHeight` query behavior\n */\nexport type GetBlockHeightConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getEpochInfo` query behavior\n */\nexport type GetEpochInfoConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getInflationReward` query behavior\n */\nexport type GetInflationRewardConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** An epoch for which the reward occurs. If omitted, the previous epoch will be used */\n  epoch?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getLatestBlockhash` query behavior\n */\nexport type GetLatestBlockhashConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `isBlockhashValid` query behavior\n */\nexport type IsBlockhashValidConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getSlot` query behavior\n */\nexport type GetSlotConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getSlotLeader` query behavior\n */\nexport type GetSlotLeaderConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getTransaction` query behavior\n */\nexport type GetTransactionConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n};\n\n/**\n * Configuration object for changing `getTransaction` query behavior\n */\nexport type GetVersionedTransactionConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /** The max transaction version to return in responses. If the requested transaction is a higher version, an error will be returned */\n  maxSupportedTransactionVersion?: number;\n};\n\n/**\n * Configuration object for changing `getLargestAccounts` query behavior\n */\nexport type GetLargestAccountsConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Filter largest accounts by whether they are part of the circulating supply */\n  filter?: LargestAccountsFilter;\n};\n\n/**\n * Configuration object for changing `getSupply` request behavior\n */\nexport type GetSupplyConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Exclude non circulating accounts list from response */\n  excludeNonCirculatingAccountsList?: boolean;\n};\n\n/**\n * Configuration object for changing query behavior\n */\nexport type SignatureStatusConfig = {\n  /** enable searching status history, not needed for recent transactions */\n  searchTransactionHistory: boolean;\n};\n\n/**\n * Information describing a cluster node\n */\nexport type ContactInfo = {\n  /** Identity public key of the node */\n  pubkey: string;\n  /** Gossip network address for the node */\n  gossip: string | null;\n  /** TPU network address for the node (null if not available) */\n  tpu: string | null;\n  /** JSON RPC network address for the node (null if not available) */\n  rpc: string | null;\n  /** Software version of the node (null if not available) */\n  version: string | null;\n};\n\n/**\n * Information describing a vote account\n */\nexport type VoteAccountInfo = {\n  /** Public key of the vote account */\n  votePubkey: string;\n  /** Identity public key of the node voting with this account */\n  nodePubkey: string;\n  /** The stake, in lamports, delegated to this vote account and activated */\n  activatedStake: number;\n  /** Whether the vote account is staked for this epoch */\n  epochVoteAccount: boolean;\n  /** Recent epoch voting credit history for this voter */\n  epochCredits: Array<[number, number, number]>;\n  /** A percentage (0-100) of rewards payout owed to the voter */\n  commission: number;\n  /** Most recent slot voted on by this vote account */\n  lastVote: number;\n};\n\n/**\n * A collection of cluster vote accounts\n */\nexport type VoteAccountStatus = {\n  /** Active vote accounts */\n  current: Array<VoteAccountInfo>;\n  /** Inactive vote accounts */\n  delinquent: Array<VoteAccountInfo>;\n};\n\n/**\n * Network Inflation\n * (see https://docs.solana.com/implemented-proposals/ed_overview)\n */\nexport type InflationGovernor = {\n  foundation: number;\n  foundationTerm: number;\n  initial: number;\n  taper: number;\n  terminal: number;\n};\n\nconst GetInflationGovernorResult = pick({\n  foundation: number(),\n  foundationTerm: number(),\n  initial: number(),\n  taper: number(),\n  terminal: number(),\n});\n\n/**\n * The inflation reward for an epoch\n */\nexport type InflationReward = {\n  /** epoch for which the reward occurs */\n  epoch: number;\n  /** the slot in which the rewards are effective */\n  effectiveSlot: number;\n  /** reward amount in lamports */\n  amount: number;\n  /** post balance of the account in lamports */\n  postBalance: number;\n  /** vote account commission when the reward was credited */\n  commission?: number | null;\n};\n\n/**\n * Expected JSON RPC response for the \"getInflationReward\" message\n */\nconst GetInflationRewardResult = jsonRpcResult(\n  array(\n    nullable(\n      pick({\n        epoch: number(),\n        effectiveSlot: number(),\n        amount: number(),\n        postBalance: number(),\n        commission: optional(nullable(number())),\n      }),\n    ),\n  ),\n);\n\nexport type RecentPrioritizationFees = {\n  /** slot in which the fee was observed */\n  slot: number;\n  /** the per-compute-unit fee paid by at least one successfully landed transaction, specified in increments of 0.000001 lamports*/\n  prioritizationFee: number;\n};\n\n/**\n * Configuration object for changing `getRecentPrioritizationFees` query behavior\n */\nexport type GetRecentPrioritizationFeesConfig = {\n  /**\n   * If this parameter is provided, the response will reflect a fee to land a transaction locking\n   * all of the provided accounts as writable.\n   */\n  lockedWritableAccounts?: PublicKey[];\n};\n\n/**\n * Expected JSON RPC response for the \"getRecentPrioritizationFees\" message\n */\nconst GetRecentPrioritizationFeesResult = array(\n  pick({\n    slot: number(),\n    prioritizationFee: number(),\n  }),\n);\n\nexport type InflationRate = {\n  /** total inflation */\n  total: number;\n  /** inflation allocated to validators */\n  validator: number;\n  /** inflation allocated to the foundation */\n  foundation: number;\n  /** epoch for which these values are valid */\n  epoch: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getInflationRate\" message\n */\nconst GetInflationRateResult = pick({\n  total: number(),\n  validator: number(),\n  foundation: number(),\n  epoch: number(),\n});\n\n/**\n * Information about the current epoch\n */\nexport type EpochInfo = {\n  epoch: number;\n  slotIndex: number;\n  slotsInEpoch: number;\n  absoluteSlot: number;\n  blockHeight?: number;\n  transactionCount?: number;\n};\n\nconst GetEpochInfoResult = pick({\n  epoch: number(),\n  slotIndex: number(),\n  slotsInEpoch: number(),\n  absoluteSlot: number(),\n  blockHeight: optional(number()),\n  transactionCount: optional(number()),\n});\n\nconst GetEpochScheduleResult = pick({\n  slotsPerEpoch: number(),\n  leaderScheduleSlotOffset: number(),\n  warmup: boolean(),\n  firstNormalEpoch: number(),\n  firstNormalSlot: number(),\n});\n\n/**\n * Leader schedule\n * (see https://docs.solana.com/terminology#leader-schedule)\n */\nexport type LeaderSchedule = {\n  [address: string]: number[];\n};\n\nconst GetLeaderScheduleResult = record(string(), array(number()));\n\n/**\n * Transaction error or null\n */\nconst TransactionErrorResult = nullable(union([pick({}), string()]));\n\n/**\n * Signature status for a transaction\n */\nconst SignatureStatusResult = pick({\n  err: TransactionErrorResult,\n});\n\n/**\n * Transaction signature received notification\n */\nconst SignatureReceivedResult = literal('receivedSignature');\n\n/**\n * Version info for a node\n */\nexport type Version = {\n  /** Version of solana-core */\n  'solana-core': string;\n  'feature-set'?: number;\n};\n\nconst VersionResult = pick({\n  'solana-core': string(),\n  'feature-set': optional(number()),\n});\n\nexport type SimulatedTransactionAccountInfo = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: string;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: string[];\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\nexport type TransactionReturnDataEncoding = 'base64';\n\nexport type TransactionReturnData = {\n  programId: string;\n  data: [string, TransactionReturnDataEncoding];\n};\n\nexport type SimulateTransactionConfig = {\n  /** Optional parameter used to enable signature verification before simulation */\n  sigVerify?: boolean;\n  /** Optional parameter used to replace the simulated transaction's recent blockhash with the latest blockhash */\n  replaceRecentBlockhash?: boolean;\n  /** Optional parameter used to set the commitment level when selecting the latest block */\n  commitment?: Commitment;\n  /** Optional parameter used to specify a list of account addresses to return post simulation state for */\n  accounts?: {\n    encoding: 'base64';\n    addresses: string[];\n  };\n  /** Optional parameter used to specify the minimum block slot that can be used for simulation */\n  minContextSlot?: number;\n};\n\nexport type SimulatedTransactionResponse = {\n  err: TransactionError | string | null;\n  logs: Array<string> | null;\n  accounts?: (SimulatedTransactionAccountInfo | null)[] | null;\n  unitsConsumed?: number;\n  returnData?: TransactionReturnData | null;\n};\nconst SimulatedTransactionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    err: nullable(union([pick({}), string()])),\n    logs: nullable(array(string())),\n    accounts: optional(\n      nullable(\n        array(\n          nullable(\n            pick({\n              executable: boolean(),\n              owner: string(),\n              lamports: number(),\n              data: array(string()),\n              rentEpoch: optional(number()),\n            }),\n          ),\n        ),\n      ),\n    ),\n    unitsConsumed: optional(number()),\n    returnData: optional(\n      nullable(\n        pick({\n          programId: string(),\n          data: tuple([string(), literal('base64')]),\n        }),\n      ),\n    ),\n  }),\n);\n\nexport type ParsedInnerInstruction = {\n  index: number;\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n};\n\nexport type TokenBalance = {\n  accountIndex: number;\n  mint: string;\n  owner?: string;\n  uiTokenAmount: TokenAmount;\n};\n\n/**\n * Metadata for a parsed confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link ParsedTransactionMeta} instead.\n */\nexport type ParsedConfirmedTransactionMeta = ParsedTransactionMeta;\n\n/**\n * Collection of addresses loaded by a transaction using address table lookups\n */\nexport type LoadedAddresses = {\n  writable: Array<PublicKey>;\n  readonly: Array<PublicKey>;\n};\n\n/**\n * Metadata for a parsed transaction on the ledger\n */\nexport type ParsedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked parsed instructions */\n  innerInstructions?: ParsedInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n  /** The collection of addresses loaded using address lookup tables */\n  loadedAddresses?: LoadedAddresses;\n  /** The compute units consumed after processing the transaction */\n  computeUnitsConsumed?: number;\n};\n\nexport type CompiledInnerInstruction = {\n  index: number;\n  instructions: CompiledInstruction[];\n};\n\n/**\n * Metadata for a confirmed transaction on the ledger\n */\nexport type ConfirmedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked instructions */\n  innerInstructions?: CompiledInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n  /** The collection of addresses loaded using address lookup tables */\n  loadedAddresses?: LoadedAddresses;\n  /** The compute units consumed after processing the transaction */\n  computeUnitsConsumed?: number;\n};\n\n/**\n * A processed transaction from the RPC API\n */\nexport type TransactionResponse = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The transaction */\n  transaction: {\n    /** The transaction message */\n    message: Message;\n    /** The transaction signatures */\n    signatures: string[];\n  };\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A processed transaction from the RPC API\n */\nexport type VersionedTransactionResponse = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The transaction */\n  transaction: {\n    /** The transaction message */\n    message: VersionedMessage;\n    /** The transaction signatures */\n    signatures: string[];\n  };\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** The transaction version */\n  version?: TransactionVersion;\n};\n\n/**\n * A processed transaction message from the RPC API\n */\ntype MessageResponse = {\n  accountKeys: string[];\n  header: MessageHeader;\n  instructions: CompiledInstruction[];\n  recentBlockhash: string;\n  addressTableLookups?: ParsedAddressTableLookup[];\n};\n\n/**\n * A confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\nexport type ConfirmedTransaction = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: Transaction;\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A partially decoded transaction instruction\n */\nexport type PartiallyDecodedInstruction = {\n  /** Program id called by this instruction */\n  programId: PublicKey;\n  /** Public keys of accounts passed to this instruction */\n  accounts: Array<PublicKey>;\n  /** Raw base-58 instruction data */\n  data: string;\n};\n\n/**\n * A parsed transaction message account\n */\nexport type ParsedMessageAccount = {\n  /** Public key of the account */\n  pubkey: PublicKey;\n  /** Indicates if the account signed the transaction */\n  signer: boolean;\n  /** Indicates if the account is writable for this transaction */\n  writable: boolean;\n  /** Indicates if the account key came from the transaction or a lookup table */\n  source?: 'transaction' | 'lookupTable';\n};\n\n/**\n * A parsed transaction instruction\n */\nexport type ParsedInstruction = {\n  /** Name of the program for this instruction */\n  program: string;\n  /** ID of the program for this instruction */\n  programId: PublicKey;\n  /** Parsed instruction info */\n  parsed: any;\n};\n\n/**\n * A parsed address table lookup\n */\nexport type ParsedAddressTableLookup = {\n  /** Address lookup table account key */\n  accountKey: PublicKey;\n  /** Parsed instruction info */\n  writableIndexes: number[];\n  /** Parsed instruction info */\n  readonlyIndexes: number[];\n};\n\n/**\n * A parsed transaction message\n */\nexport type ParsedMessage = {\n  /** Accounts used in the instructions */\n  accountKeys: ParsedMessageAccount[];\n  /** The atomically executed instructions for the transaction */\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n  /** Recent blockhash */\n  recentBlockhash: string;\n  /** Address table lookups used to load additional accounts */\n  addressTableLookups?: ParsedAddressTableLookup[] | null;\n};\n\n/**\n * A parsed transaction\n */\nexport type ParsedTransaction = {\n  /** Signatures for the transaction */\n  signatures: Array<string>;\n  /** Message of the transaction */\n  message: ParsedMessage;\n};\n\n/**\n * A parsed and confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link ParsedTransactionWithMeta} instead.\n */\nexport type ParsedConfirmedTransaction = ParsedTransactionWithMeta;\n\n/**\n * A parsed transaction on the ledger with meta\n */\nexport type ParsedTransactionWithMeta = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: ParsedTransaction;\n  /** Metadata produced from the transaction */\n  meta: ParsedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** The version of the transaction message */\n  version?: TransactionVersion;\n};\n\n/**\n * A processed block fetched from the RPC API\n */\nexport type BlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The transaction */\n    transaction: {\n      /** The transaction message */\n      message: Message;\n      /** The transaction signatures */\n      signatures: string[];\n    };\n    /** Metadata produced from the transaction */\n    meta: ConfirmedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n    /** Vote account commission when the reward was credited, only present for voting and staking rewards */\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `accounts`\n */\nexport type AccountsModeBlockResponse = VersionedAccountsModeBlockResponse;\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `none`\n */\nexport type NoneModeBlockResponse = VersionedNoneModeBlockResponse;\n\n/**\n * A block with parsed transactions\n */\nexport type ParsedBlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The details of the transaction */\n    transaction: ParsedTransaction;\n    /** Metadata produced from the transaction */\n    meta: ParsedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n    /** Vote account commission when the reward was credited, only present for voting and staking rewards */\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n  /** The number of blocks beneath this block */\n  blockHeight: number | null;\n};\n\n/**\n * A block with parsed transactions where the `transactionDetails` mode is `accounts`\n */\nexport type ParsedAccountsModeBlockResponse = Omit<\n  ParsedBlockResponse,\n  'transactions'\n> & {\n  transactions: Array<\n    Omit<ParsedBlockResponse['transactions'][number], 'transaction'> & {\n      transaction: Pick<\n        ParsedBlockResponse['transactions'][number]['transaction'],\n        'signatures'\n      > & {\n        accountKeys: ParsedMessageAccount[];\n      };\n    }\n  >;\n};\n\n/**\n * A block with parsed transactions where the `transactionDetails` mode is `none`\n */\nexport type ParsedNoneModeBlockResponse = Omit<\n  ParsedBlockResponse,\n  'transactions'\n>;\n\n/**\n * A processed block fetched from the RPC API\n */\nexport type VersionedBlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The transaction */\n    transaction: {\n      /** The transaction message */\n      message: VersionedMessage;\n      /** The transaction signatures */\n      signatures: string[];\n    };\n    /** Metadata produced from the transaction */\n    meta: ConfirmedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n    /** Vote account commission when the reward was credited, only present for voting and staking rewards */\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `accounts`\n */\nexport type VersionedAccountsModeBlockResponse = Omit<\n  VersionedBlockResponse,\n  'transactions'\n> & {\n  transactions: Array<\n    Omit<VersionedBlockResponse['transactions'][number], 'transaction'> & {\n      transaction: Pick<\n        VersionedBlockResponse['transactions'][number]['transaction'],\n        'signatures'\n      > & {\n        accountKeys: ParsedMessageAccount[];\n      };\n    }\n  >;\n};\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `none`\n */\nexport type VersionedNoneModeBlockResponse = Omit<\n  VersionedBlockResponse,\n  'transactions'\n>;\n\n/**\n * A confirmed block on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\nexport type ConfirmedBlock = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions and status metas */\n  transactions: Array<{\n    transaction: Transaction;\n    meta: ConfirmedTransactionMeta | null;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    pubkey: string;\n    lamports: number;\n    postBalance: number | null;\n    rewardType: string | null;\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A Block on the ledger with signatures only\n */\nexport type BlockSignatures = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of signatures */\n  signatures: Array<string>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * recent block production information\n */\nexport type BlockProduction = Readonly<{\n  /** a dictionary of validator identities, as base-58 encoded strings. Value is a two element array containing the number of leader slots and the number of blocks produced */\n  byIdentity: Readonly<Record<string, ReadonlyArray<number>>>;\n  /** Block production slot range */\n  range: Readonly<{\n    /** first slot of the block production information (inclusive) */\n    firstSlot: number;\n    /** last slot of block production information (inclusive) */\n    lastSlot: number;\n  }>;\n}>;\n\nexport type GetBlockProductionConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Slot range to return block production for. If parameter not provided, defaults to current epoch. */\n  range?: {\n    /** first slot to return block production information for (inclusive) */\n    firstSlot: number;\n    /** last slot to return block production information for (inclusive). If parameter not provided, defaults to the highest slot */\n    lastSlot?: number;\n  };\n  /** Only return results for this validator identity (base-58 encoded) */\n  identity?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getBlockProduction\" message\n */\nconst BlockProductionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    byIdentity: record(string(), array(number())),\n    range: pick({\n      firstSlot: number(),\n      lastSlot: number(),\n    }),\n  }),\n);\n\n/**\n * A performance sample\n */\nexport type PerfSample = {\n  /** Slot number of sample */\n  slot: number;\n  /** Number of transactions in a sample window */\n  numTransactions: number;\n  /** Number of slots in a sample window */\n  numSlots: number;\n  /** Sample window in seconds */\n  samplePeriodSecs: number;\n};\n\nfunction createRpcClient(\n  url: string,\n  httpHeaders?: HttpHeaders,\n  customFetch?: FetchFn,\n  fetchMiddleware?: FetchMiddleware,\n  disableRetryOnRateLimit?: boolean,\n  httpAgent?: NodeHttpAgent | NodeHttpsAgent | false,\n): RpcClient {\n  const fetch = customFetch ? customFetch : fetchImpl;\n  let agent: NodeHttpAgent | NodeHttpsAgent | undefined;\n  if (process.env.BROWSER) {\n    if (httpAgent != null) {\n      console.warn(\n        'You have supplied an `httpAgent` when creating a `Connection` in a browser environment.' +\n          'It has been ignored; `httpAgent` is only used in Node environments.',\n      );\n    }\n  } else {\n    if (httpAgent == null) {\n      if (process.env.NODE_ENV !== 'test') {\n        const agentOptions = {\n          // One second fewer than the Solana RPC's keepalive timeout.\n          // Read more: https://github.com/solana-labs/solana/issues/27859#issuecomment-1340097889\n          freeSocketTimeout: 19000,\n          keepAlive: true,\n          maxSockets: 25,\n        };\n        if (url.startsWith('https:')) {\n          agent = new HttpsKeepAliveAgent(agentOptions);\n        } else {\n          agent = new HttpKeepAliveAgent(agentOptions);\n        }\n      }\n    } else {\n      if (httpAgent !== false) {\n        const isHttps = url.startsWith('https:');\n        if (isHttps && !(httpAgent instanceof NodeHttpsAgent)) {\n          throw new Error(\n            'The endpoint `' +\n              url +\n              '` can only be paired with an `https.Agent`. You have, instead, supplied an ' +\n              '`http.Agent` through `httpAgent`.',\n          );\n        } else if (!isHttps && httpAgent instanceof NodeHttpsAgent) {\n          throw new Error(\n            'The endpoint `' +\n              url +\n              '` can only be paired with an `http.Agent`. You have, instead, supplied an ' +\n              '`https.Agent` through `httpAgent`.',\n          );\n        }\n        agent = httpAgent;\n      }\n    }\n  }\n\n  let fetchWithMiddleware: FetchFn | undefined;\n\n  if (fetchMiddleware) {\n    fetchWithMiddleware = async (info, init) => {\n      const modifiedFetchArgs = await new Promise<Parameters<FetchFn>>(\n        (resolve, reject) => {\n          try {\n            fetchMiddleware(info, init, (modifiedInfo, modifiedInit) =>\n              resolve([modifiedInfo, modifiedInit]),\n            );\n          } catch (error) {\n            reject(error);\n          }\n        },\n      );\n      return await fetch(...modifiedFetchArgs);\n    };\n  }\n\n  const clientBrowser = new RpcClient(async (request, callback) => {\n    const options = {\n      method: 'POST',\n      body: request,\n      agent,\n      headers: Object.assign(\n        {\n          'Content-Type': 'application/json',\n        },\n        httpHeaders || {},\n        COMMON_HTTP_HEADERS,\n      ),\n    };\n\n    try {\n      let too_many_requests_retries = 5;\n      let res: Response;\n      let waitTime = 500;\n      for (;;) {\n        if (fetchWithMiddleware) {\n          res = await fetchWithMiddleware(url, options);\n        } else {\n          res = await fetch(url, options);\n        }\n\n        if (res.status !== 429 /* Too many requests */) {\n          break;\n        }\n        if (disableRetryOnRateLimit === true) {\n          break;\n        }\n        too_many_requests_retries -= 1;\n        if (too_many_requests_retries === 0) {\n          break;\n        }\n        console.log(\n          `Server responded with ${res.status} ${res.statusText}.  Retrying after ${waitTime}ms delay...`,\n        );\n        await sleep(waitTime);\n        waitTime *= 2;\n      }\n\n      const text = await res.text();\n      if (res.ok) {\n        callback(null, text);\n      } else {\n        callback(new Error(`${res.status} ${res.statusText}: ${text}`));\n      }\n    } catch (err) {\n      if (err instanceof Error) callback(err);\n    }\n  }, {});\n\n  return clientBrowser;\n}\n\nfunction createRpcRequest(client: RpcClient): RpcRequest {\n  return (method, args) => {\n    return new Promise((resolve, reject) => {\n      client.request(method, args, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\nfunction createRpcBatchRequest(client: RpcClient): RpcBatchRequest {\n  return (requests: RpcParams[]) => {\n    return new Promise((resolve, reject) => {\n      // Do nothing if requests is empty\n      if (requests.length === 0) resolve([]);\n\n      const batch = requests.map((params: RpcParams) => {\n        return client.request(params.methodName, params.args);\n      });\n\n      client.request(batch, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\n/**\n * Expected JSON RPC response for the \"getInflationGovernor\" message\n */\nconst GetInflationGovernorRpcResult = jsonRpcResult(GetInflationGovernorResult);\n\n/**\n * Expected JSON RPC response for the \"getInflationRate\" message\n */\nconst GetInflationRateRpcResult = jsonRpcResult(GetInflationRateResult);\n\n/**\n * Expected JSON RPC response for the \"getRecentPrioritizationFees\" message\n */\nconst GetRecentPrioritizationFeesRpcResult = jsonRpcResult(\n  GetRecentPrioritizationFeesResult,\n);\n\n/**\n * Expected JSON RPC response for the \"getEpochInfo\" message\n */\nconst GetEpochInfoRpcResult = jsonRpcResult(GetEpochInfoResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochSchedule\" message\n */\nconst GetEpochScheduleRpcResult = jsonRpcResult(GetEpochScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"getLeaderSchedule\" message\n */\nconst GetLeaderScheduleRpcResult = jsonRpcResult(GetLeaderScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"minimumLedgerSlot\" and \"getFirstAvailableBlock\" messages\n */\nconst SlotRpcResult = jsonRpcResult(number());\n\n/**\n * Supply\n */\nexport type Supply = {\n  /** Total supply in lamports */\n  total: number;\n  /** Circulating supply in lamports */\n  circulating: number;\n  /** Non-circulating supply in lamports */\n  nonCirculating: number;\n  /** List of non-circulating account addresses */\n  nonCirculatingAccounts: Array<PublicKey>;\n};\n\n/**\n * Expected JSON RPC response for the \"getSupply\" message\n */\nconst GetSupplyRpcResult = jsonRpcResultAndContext(\n  pick({\n    total: number(),\n    circulating: number(),\n    nonCirculating: number(),\n    nonCirculatingAccounts: array(PublicKeyFromString),\n  }),\n);\n\n/**\n * Token amount object which returns a token amount in different formats\n * for various client use cases.\n */\nexport type TokenAmount = {\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC structure for token amounts\n */\nconst TokenAmountResult = pick({\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string()),\n});\n\n/**\n * Token address and balance.\n */\nexport type TokenAccountBalancePair = {\n  /** Address of the token account */\n  address: PublicKey;\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getTokenLargestAccounts\" message\n */\nconst GetTokenLargestAccountsResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      address: PublicKeyFromString,\n      amount: string(),\n      uiAmount: nullable(number()),\n      decimals: number(),\n      uiAmountString: optional(string()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message\n */\nconst GetTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: BufferFromRawAccountData,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\nconst ParsedAccountDataResult = pick({\n  program: string(),\n  parsed: unknown(),\n  space: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message with parsed data\n */\nconst GetParsedTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: ParsedAccountDataResult,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Pair of an account address and its balance\n */\nexport type AccountBalancePair = {\n  address: PublicKey;\n  lamports: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getLargestAccounts\" message\n */\nconst GetLargestAccountsRpcResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      lamports: number(),\n      address: PublicKeyFromString,\n    }),\n  ),\n);\n\n/**\n * @internal\n */\nconst AccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: BufferFromRawAccountData,\n  rentEpoch: number(),\n});\n\n/**\n * @internal\n */\nconst KeyedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\nconst ParsedOrRawAccountData = coerce(\n  union([instance(Buffer), ParsedAccountDataResult]),\n  union([RawAccountDataResult, ParsedAccountDataResult]),\n  value => {\n    if (Array.isArray(value)) {\n      return create(value, BufferFromRawAccountData);\n    } else {\n      return value;\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedAccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: ParsedOrRawAccountData,\n  rentEpoch: number(),\n});\n\nconst KeyedParsedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: ParsedAccountInfoResult,\n});\n\n/**\n * @internal\n */\nconst StakeActivationResult = pick({\n  state: union([\n    literal('active'),\n    literal('inactive'),\n    literal('activating'),\n    literal('deactivating'),\n  ]),\n  active: number(),\n  inactive: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getConfirmedSignaturesForAddress2\" message\n */\n\nconst GetConfirmedSignaturesForAddress2RpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getSignaturesForAddress\" message\n */\nconst GetSignaturesForAddressRpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/***\n * Expected JSON RPC response for the \"accountNotification\" message\n */\nconst AccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(AccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst ProgramAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\n/***\n * Expected JSON RPC response for the \"programNotification\" message\n */\nconst ProgramAccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(ProgramAccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst SlotInfoResult = pick({\n  parent: number(),\n  slot: number(),\n  root: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"slotNotification\" message\n */\nconst SlotNotificationResult = pick({\n  subscription: number(),\n  result: SlotInfoResult,\n});\n\n/**\n * Slot updates which can be used for tracking the live progress of a cluster.\n * - `\"firstShredReceived\"`: connected node received the first shred of a block.\n * Indicates that a new block that is being produced.\n * - `\"completed\"`: connected node has received all shreds of a block. Indicates\n * a block was recently produced.\n * - `\"optimisticConfirmation\"`: block was optimistically confirmed by the\n * cluster. It is not guaranteed that an optimistic confirmation notification\n * will be sent for every finalized blocks.\n * - `\"root\"`: the connected node rooted this block.\n * - `\"createdBank\"`: the connected node has started validating this block.\n * - `\"frozen\"`: the connected node has validated this block.\n * - `\"dead\"`: the connected node failed to validate this block.\n */\nexport type SlotUpdate =\n  | {\n      type: 'firstShredReceived';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'completed';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'createdBank';\n      slot: number;\n      timestamp: number;\n      parent: number;\n    }\n  | {\n      type: 'frozen';\n      slot: number;\n      timestamp: number;\n      stats: {\n        numTransactionEntries: number;\n        numSuccessfulTransactions: number;\n        numFailedTransactions: number;\n        maxTransactionsPerEntry: number;\n      };\n    }\n  | {\n      type: 'dead';\n      slot: number;\n      timestamp: number;\n      err: string;\n    }\n  | {\n      type: 'optimisticConfirmation';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'root';\n      slot: number;\n      timestamp: number;\n    };\n\n/**\n * @internal\n */\nconst SlotUpdateResult = union([\n  pick({\n    type: union([\n      literal('firstShredReceived'),\n      literal('completed'),\n      literal('optimisticConfirmation'),\n      literal('root'),\n    ]),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('createdBank'),\n    parent: number(),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('frozen'),\n    slot: number(),\n    timestamp: number(),\n    stats: pick({\n      numTransactionEntries: number(),\n      numSuccessfulTransactions: number(),\n      numFailedTransactions: number(),\n      maxTransactionsPerEntry: number(),\n    }),\n  }),\n  pick({\n    type: literal('dead'),\n    slot: number(),\n    timestamp: number(),\n    err: string(),\n  }),\n]);\n\n/**\n * Expected JSON RPC response for the \"slotsUpdatesNotification\" message\n */\nconst SlotUpdateNotificationResult = pick({\n  subscription: number(),\n  result: SlotUpdateResult,\n});\n\n/**\n * Expected JSON RPC response for the \"signatureNotification\" message\n */\nconst SignatureNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(\n    union([SignatureStatusResult, SignatureReceivedResult]),\n  ),\n});\n\n/**\n * Expected JSON RPC response for the \"rootNotification\" message\n */\nconst RootNotificationResult = pick({\n  subscription: number(),\n  result: number(),\n});\n\nconst ContactInfoResult = pick({\n  pubkey: string(),\n  gossip: nullable(string()),\n  tpu: nullable(string()),\n  rpc: nullable(string()),\n  version: nullable(string()),\n});\n\nconst VoteAccountInfoResult = pick({\n  votePubkey: string(),\n  nodePubkey: string(),\n  activatedStake: number(),\n  epochVoteAccount: boolean(),\n  epochCredits: array(tuple([number(), number(), number()])),\n  commission: number(),\n  lastVote: number(),\n  rootSlot: nullable(number()),\n});\n\n/**\n * Expected JSON RPC response for the \"getVoteAccounts\" message\n */\nconst GetVoteAccounts = jsonRpcResult(\n  pick({\n    current: array(VoteAccountInfoResult),\n    delinquent: array(VoteAccountInfoResult),\n  }),\n);\n\nconst ConfirmationStatus = union([\n  literal('processed'),\n  literal('confirmed'),\n  literal('finalized'),\n]);\n\nconst SignatureStatusResponse = pick({\n  slot: number(),\n  confirmations: nullable(number()),\n  err: TransactionErrorResult,\n  confirmationStatus: optional(ConfirmationStatus),\n});\n\n/**\n * Expected JSON RPC response for the \"getSignatureStatuses\" message\n */\nconst GetSignatureStatusesRpcResult = jsonRpcResultAndContext(\n  array(nullable(SignatureStatusResponse)),\n);\n\n/**\n * Expected JSON RPC response for the \"getMinimumBalanceForRentExemption\" message\n */\nconst GetMinimumBalanceForRentExemptionRpcResult = jsonRpcResult(number());\n\nconst AddressTableLookupStruct = pick({\n  accountKey: PublicKeyFromString,\n  writableIndexes: array(number()),\n  readonlyIndexes: array(number()),\n});\n\nconst ConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(string()),\n    header: pick({\n      numRequiredSignatures: number(),\n      numReadonlySignedAccounts: number(),\n      numReadonlyUnsignedAccounts: number(),\n    }),\n    instructions: array(\n      pick({\n        accounts: array(number()),\n        data: string(),\n        programIdIndex: number(),\n      }),\n    ),\n    recentBlockhash: string(),\n    addressTableLookups: optional(array(AddressTableLookupStruct)),\n  }),\n});\n\nconst AnnotatedAccountKey = pick({\n  pubkey: PublicKeyFromString,\n  signer: boolean(),\n  writable: boolean(),\n  source: optional(union([literal('transaction'), literal('lookupTable')])),\n});\n\nconst ConfirmedTransactionAccountsModeResult = pick({\n  accountKeys: array(AnnotatedAccountKey),\n  signatures: array(string()),\n});\n\nconst ParsedInstructionResult = pick({\n  parsed: unknown(),\n  program: string(),\n  programId: PublicKeyFromString,\n});\n\nconst RawInstructionResult = pick({\n  accounts: array(PublicKeyFromString),\n  data: string(),\n  programId: PublicKeyFromString,\n});\n\nconst InstructionResult = union([\n  RawInstructionResult,\n  ParsedInstructionResult,\n]);\n\nconst UnknownInstructionResult = union([\n  pick({\n    parsed: unknown(),\n    program: string(),\n    programId: string(),\n  }),\n  pick({\n    accounts: array(string()),\n    data: string(),\n    programId: string(),\n  }),\n]);\n\nconst ParsedOrRawInstruction = coerce(\n  InstructionResult,\n  UnknownInstructionResult,\n  value => {\n    if ('accounts' in value) {\n      return create(value, RawInstructionResult);\n    } else {\n      return create(value, ParsedInstructionResult);\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(AnnotatedAccountKey),\n    instructions: array(ParsedOrRawInstruction),\n    recentBlockhash: string(),\n    addressTableLookups: optional(nullable(array(AddressTableLookupStruct))),\n  }),\n});\n\nconst TokenBalanceResult = pick({\n  accountIndex: number(),\n  mint: string(),\n  owner: optional(string()),\n  uiTokenAmount: TokenAmountResult,\n});\n\nconst LoadedAddressesResult = pick({\n  writable: array(PublicKeyFromString),\n  readonly: array(PublicKeyFromString),\n});\n\n/**\n * @internal\n */\nconst ConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(\n            pick({\n              accounts: array(number()),\n              data: string(),\n              programIdIndex: number(),\n            }),\n          ),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n  computeUnitsConsumed: optional(number()),\n});\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(ParsedOrRawInstruction),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n  computeUnitsConsumed: optional(number()),\n});\n\nconst TransactionVersionStruct = union([literal(0), literal('legacy')]);\n\n/** @internal */\nconst RewardsResult = pick({\n  pubkey: string(),\n  lamports: number(),\n  postBalance: nullable(number()),\n  rewardType: nullable(string()),\n  commission: optional(nullable(number())),\n});\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message when `transactionDetails` is `none`\n */\nconst GetNoneModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message when `transactionDetails` is `accounts`\n */\nconst GetAccountsModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionAccountsModeResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message\n */\nconst GetParsedBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ParsedConfirmedTransactionResult,\n          meta: nullable(ParsedConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message  when `transactionDetails` is `accounts`\n */\nconst GetParsedAccountsModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionAccountsModeResult,\n          meta: nullable(ParsedConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message  when `transactionDetails` is `none`\n */\nconst GetParsedNoneModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedBlock\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetBlockRpcResult} instead.\n */\nconst GetConfirmedBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockSignaturesRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      signatures: array(string()),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTransaction\" message\n */\nconst GetTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      meta: ConfirmedTransactionMetaResult,\n      blockTime: optional(nullable(number())),\n      transaction: ConfirmedTransactionResult,\n      version: optional(TransactionVersionStruct),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getTransaction\" message\n */\nconst GetParsedTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      transaction: ParsedConfirmedTransactionResult,\n      meta: nullable(ParsedConfirmedTransactionMetaResult),\n      blockTime: optional(nullable(number())),\n      version: optional(TransactionVersionStruct),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getRecentBlockhash\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetLatestBlockhashRpcResult} instead.\n */\nconst GetRecentBlockhashAndContextRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    feeCalculator: pick({\n      lamportsPerSignature: number(),\n    }),\n  }),\n);\n\n/**\n * Expected JSON RPC response for the \"getLatestBlockhash\" message\n */\nconst GetLatestBlockhashRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    lastValidBlockHeight: number(),\n  }),\n);\n\n/**\n * Expected JSON RPC response for the \"isBlockhashValid\" message\n */\nconst IsBlockhashValidRpcResult = jsonRpcResultAndContext(boolean());\n\nconst PerfSampleResult = pick({\n  slot: number(),\n  numTransactions: number(),\n  numSlots: number(),\n  samplePeriodSecs: number(),\n});\n\n/*\n * Expected JSON RPC response for \"getRecentPerformanceSamples\" message\n */\nconst GetRecentPerformanceSamplesRpcResult = jsonRpcResult(\n  array(PerfSampleResult),\n);\n\n/**\n * Expected JSON RPC response for the \"getFeeCalculatorForBlockhash\" message\n */\nconst GetFeeCalculatorRpcResult = jsonRpcResultAndContext(\n  nullable(\n    pick({\n      feeCalculator: pick({\n        lamportsPerSignature: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"requestAirdrop\" message\n */\nconst RequestAirdropRpcResult = jsonRpcResult(string());\n\n/**\n * Expected JSON RPC response for the \"sendTransaction\" message\n */\nconst SendTransactionRpcResult = jsonRpcResult(string());\n\n/**\n * Information about the latest slot being processed by a node\n */\nexport type SlotInfo = {\n  /** Currently processing slot */\n  slot: number;\n  /** Parent of the current slot */\n  parent: number;\n  /** The root block of the current slot's fork */\n  root: number;\n};\n\n/**\n * Parsed account data\n */\nexport type ParsedAccountData = {\n  /** Name of the program that owns this account */\n  program: string;\n  /** Parsed account data */\n  parsed: any;\n  /** Space used by account data */\n  space: number;\n};\n\n/**\n * Stake Activation data\n */\nexport type StakeActivationData = {\n  /** the stake account's activation state */\n  state: 'active' | 'inactive' | 'activating' | 'deactivating';\n  /** stake active during the epoch */\n  active: number;\n  /** stake inactive during the epoch */\n  inactive: number;\n};\n\n/**\n * Data slice argument for getProgramAccounts\n */\nexport type DataSlice = {\n  /** offset of data slice */\n  offset: number;\n  /** length of data slice */\n  length: number;\n};\n\n/**\n * Memory comparison filter for getProgramAccounts\n */\nexport type MemcmpFilter = {\n  memcmp: {\n    /** offset into program account data to start comparison */\n    offset: number;\n    /** data to match, as base-58 encoded string and limited to less than 129 bytes */\n    bytes: string;\n  };\n};\n\n/**\n * Data size comparison filter for getProgramAccounts\n */\nexport type DataSizeFilter = {\n  /** Size of data for program account data length comparison */\n  dataSize: number;\n};\n\n/**\n * A filter object for getProgramAccounts\n */\nexport type GetProgramAccountsFilter = MemcmpFilter | DataSizeFilter;\n\n/**\n * Configuration object for getProgramAccounts requests\n */\nexport type GetProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional encoding for account data (default base64)\n   * To use \"jsonParsed\" encoding, please refer to `getParsedProgramAccounts` in connection.ts\n   * */\n  encoding?: 'base64';\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n  /** wrap the result in an RpcResponse JSON object */\n  withContext?: boolean;\n};\n\nexport type GetProgramAccountsResponse = readonly Readonly<{\n  account: AccountInfo<Buffer>;\n  /** the account Pubkey as base-58 encoded string */\n  pubkey: PublicKey;\n}>[];\n\n/**\n * Configuration object for getParsedProgramAccounts\n */\nexport type GetParsedProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for getMultipleAccounts\n */\nexport type GetMultipleAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetStakeActivationConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Epoch for which to calculate activation details. If parameter not provided, defaults to current epoch */\n  epoch?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetTokenAccountsByOwnerConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetTransactionCountConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getNonce`\n */\nexport type GetNonceConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getNonceAndContext`\n */\nexport type GetNonceAndContextConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Information describing an account\n */\nexport type AccountInfo<T> = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: PublicKey;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: T;\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\n/**\n * Account information identified by pubkey\n */\nexport type KeyedAccountInfo = {\n  accountId: PublicKey;\n  accountInfo: AccountInfo<Buffer>;\n};\n\n/**\n * Callback function for account change notifications\n */\nexport type AccountChangeCallback = (\n  accountInfo: AccountInfo<Buffer>,\n  context: Context,\n) => void;\n\n/**\n * Callback function for program account change notifications\n */\nexport type ProgramAccountChangeCallback = (\n  keyedAccountInfo: KeyedAccountInfo,\n  context: Context,\n) => void;\n\n/**\n * Callback function for slot change notifications\n */\nexport type SlotChangeCallback = (slotInfo: SlotInfo) => void;\n\n/**\n * Callback function for slot update notifications\n */\nexport type SlotUpdateCallback = (slotUpdate: SlotUpdate) => void;\n\n/**\n * Callback function for signature status notifications\n */\nexport type SignatureResultCallback = (\n  signatureResult: SignatureResult,\n  context: Context,\n) => void;\n\n/**\n * Signature status notification with transaction result\n */\nexport type SignatureStatusNotification = {\n  type: 'status';\n  result: SignatureResult;\n};\n\n/**\n * Signature received notification\n */\nexport type SignatureReceivedNotification = {\n  type: 'received';\n};\n\n/**\n * Callback function for signature notifications\n */\nexport type SignatureSubscriptionCallback = (\n  notification: SignatureStatusNotification | SignatureReceivedNotification,\n  context: Context,\n) => void;\n\n/**\n * Signature subscription options\n */\nexport type SignatureSubscriptionOptions = {\n  commitment?: Commitment;\n  enableReceivedNotification?: boolean;\n};\n\n/**\n * Callback function for root change notifications\n */\nexport type RootChangeCallback = (root: number) => void;\n\n/**\n * @internal\n */\nconst LogsResult = pick({\n  err: TransactionErrorResult,\n  logs: array(string()),\n  signature: string(),\n});\n\n/**\n * Logs result.\n */\nexport type Logs = {\n  err: TransactionError | null;\n  logs: string[];\n  signature: string;\n};\n\n/**\n * Expected JSON RPC response for the \"logsNotification\" message.\n */\nconst LogsNotificationResult = pick({\n  result: notificationResultAndContext(LogsResult),\n  subscription: number(),\n});\n\n/**\n * Filter for log subscriptions.\n */\nexport type LogsFilter = PublicKey | 'all' | 'allWithVotes';\n\n/**\n * Callback function for log notifications.\n */\nexport type LogsCallback = (logs: Logs, ctx: Context) => void;\n\n/**\n * Signature result\n */\nexport type SignatureResult = {\n  err: TransactionError | null;\n};\n\n/**\n * Transaction error\n */\nexport type TransactionError = {} | string;\n\n/**\n * Transaction confirmation status\n * <pre>\n *   'processed': Transaction landed in a block which has reached 1 confirmation by the connected node\n *   'confirmed': Transaction landed in a block which has reached 1 confirmation by the cluster\n *   'finalized': Transaction landed in a block which has been finalized by the cluster\n * </pre>\n */\nexport type TransactionConfirmationStatus =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized';\n\n/**\n * Signature status\n */\nexport type SignatureStatus = {\n  /** when the transaction was processed */\n  slot: number;\n  /** the number of blocks that have been confirmed and voted on in the fork containing `slot` */\n  confirmations: number | null;\n  /** transaction error, if any */\n  err: TransactionError | null;\n  /** cluster confirmation status, if data available. Possible responses: `processed`, `confirmed`, `finalized` */\n  confirmationStatus?: TransactionConfirmationStatus;\n};\n\n/**\n * A confirmed signature with its status\n */\nexport type ConfirmedSignatureInfo = {\n  /** the transaction signature */\n  signature: string;\n  /** when the transaction was processed */\n  slot: number;\n  /** error, if any */\n  err: TransactionError | null;\n  /** memo associated with the transaction, if any */\n  memo: string | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** Cluster confirmation status, if available. Possible values: `processed`, `confirmed`, `finalized` */\n  confirmationStatus?: TransactionConfirmationStatus;\n};\n\n/**\n * An object defining headers to be passed to the RPC server\n */\nexport type HttpHeaders = {\n  [header: string]: string;\n} & {\n  // Prohibited headers; for internal use only.\n  'solana-client'?: never;\n};\n\n/**\n * The type of the JavaScript `fetch()` API\n */\nexport type FetchFn = typeof fetchImpl;\n\n/**\n * A callback used to augment the outgoing HTTP request\n */\nexport type FetchMiddleware = (\n  info: Parameters<FetchFn>[0],\n  init: Parameters<FetchFn>[1],\n  fetch: (...a: Parameters<FetchFn>) => void,\n) => void;\n\n/**\n * Configuration for instantiating a Connection\n */\nexport type ConnectionConfig = {\n  /**\n   * An `http.Agent` that will be used to manage socket connections (eg. to implement connection\n   * persistence). Set this to `false` to create a connection that uses no agent. This applies to\n   * Node environments only.\n   */\n  httpAgent?: NodeHttpAgent | NodeHttpsAgent | false;\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional endpoint URL to the fullnode JSON RPC PubSub WebSocket Endpoint */\n  wsEndpoint?: string;\n  /** Optional HTTP headers object */\n  httpHeaders?: HttpHeaders;\n  /** Optional custom fetch function */\n  fetch?: FetchFn;\n  /** Optional fetch middleware callback */\n  fetchMiddleware?: FetchMiddleware;\n  /** Optional Disable retrying calls when server responds with HTTP 429 (Too Many Requests) */\n  disableRetryOnRateLimit?: boolean;\n  /** time to allow for the server to initially process a transaction (in milliseconds) */\n  confirmTransactionInitialTimeout?: number;\n};\n\n/** @internal */\nconst COMMON_HTTP_HEADERS = {\n  'solana-client': `js/${process.env.npm_package_version ?? 'UNKNOWN'}`,\n};\n\n/**\n * A connection to a fullnode JSON RPC endpoint\n */\nexport class Connection {\n  /** @internal */ _commitment?: Commitment;\n  /** @internal */ _confirmTransactionInitialTimeout?: number;\n  /** @internal */ _rpcEndpoint: string;\n  /** @internal */ _rpcWsEndpoint: string;\n  /** @internal */ _rpcClient: RpcClient;\n  /** @internal */ _rpcRequest: RpcRequest;\n  /** @internal */ _rpcBatchRequest: RpcBatchRequest;\n  /** @internal */ _rpcWebSocket: RpcWebSocketClient;\n  /** @internal */ _rpcWebSocketConnected: boolean = false;\n  /** @internal */ _rpcWebSocketHeartbeat: ReturnType<\n    typeof setInterval\n  > | null = null;\n  /** @internal */ _rpcWebSocketIdleTimeout: ReturnType<\n    typeof setTimeout\n  > | null = null;\n  /** @internal\n   * A number that we increment every time an active connection closes.\n   * Used to determine whether the same socket connection that was open\n   * when an async operation started is the same one that's active when\n   * its continuation fires.\n   *\n   */ private _rpcWebSocketGeneration: number = 0;\n\n  /** @internal */ _disableBlockhashCaching: boolean = false;\n  /** @internal */ _pollingBlockhash: boolean = false;\n  /** @internal */ _blockhashInfo: {\n    latestBlockhash: BlockhashWithExpiryBlockHeight | null;\n    lastFetch: number;\n    simulatedSignatures: Array<string>;\n    transactionSignatures: Array<string>;\n  } = {\n    latestBlockhash: null,\n    lastFetch: 0,\n    transactionSignatures: [],\n    simulatedSignatures: [],\n  };\n\n  /** @internal */ private _nextClientSubscriptionId: ClientSubscriptionId = 0;\n  /** @internal */ private _subscriptionDisposeFunctionsByClientSubscriptionId: {\n    [clientSubscriptionId: ClientSubscriptionId]:\n      | SubscriptionDisposeFn\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionHashByClientSubscriptionId: {\n    [clientSubscriptionId: ClientSubscriptionId]:\n      | SubscriptionConfigHash\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionStateChangeCallbacksByHash: {\n    [hash: SubscriptionConfigHash]:\n      | Set<SubscriptionStateChangeCallback>\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionCallbacksByServerSubscriptionId: {\n    [serverSubscriptionId: ServerSubscriptionId]:\n      | Set<SubscriptionConfig['callback']>\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionsByHash: {\n    [hash: SubscriptionConfigHash]: Subscription | undefined;\n  } = {};\n  /**\n   * Special case.\n   * After a signature is processed, RPCs automatically dispose of the\n   * subscription on the server side. We need to track which of these\n   * subscriptions have been disposed in such a way, so that we know\n   * whether the client is dealing with a not-yet-processed signature\n   * (in which case we must tear down the server subscription) or an\n   * already-processed signature (in which case the client can simply\n   * clear out the subscription locally without telling the server).\n   *\n   * NOTE: There is a proposal to eliminate this special case, here:\n   * https://github.com/solana-labs/solana/issues/18892\n   */\n  /** @internal */ private _subscriptionsAutoDisposedByRpc: Set<ServerSubscriptionId> =\n    new Set();\n\n  /**\n   * Establish a JSON RPC connection\n   *\n   * @param endpoint URL to the fullnode JSON RPC endpoint\n   * @param commitmentOrConfig optional default commitment level or optional ConnectionConfig configuration object\n   */\n  constructor(\n    endpoint: string,\n    commitmentOrConfig?: Commitment | ConnectionConfig,\n  ) {\n    let wsEndpoint;\n    let httpHeaders;\n    let fetch;\n    let fetchMiddleware;\n    let disableRetryOnRateLimit;\n    let httpAgent;\n    if (commitmentOrConfig && typeof commitmentOrConfig === 'string') {\n      this._commitment = commitmentOrConfig;\n    } else if (commitmentOrConfig) {\n      this._commitment = commitmentOrConfig.commitment;\n      this._confirmTransactionInitialTimeout =\n        commitmentOrConfig.confirmTransactionInitialTimeout;\n      wsEndpoint = commitmentOrConfig.wsEndpoint;\n      httpHeaders = commitmentOrConfig.httpHeaders;\n      fetch = commitmentOrConfig.fetch;\n      fetchMiddleware = commitmentOrConfig.fetchMiddleware;\n      disableRetryOnRateLimit = commitmentOrConfig.disableRetryOnRateLimit;\n      httpAgent = commitmentOrConfig.httpAgent;\n    }\n\n    this._rpcEndpoint = assertEndpointUrl(endpoint);\n    this._rpcWsEndpoint = wsEndpoint || makeWebsocketUrl(endpoint);\n\n    this._rpcClient = createRpcClient(\n      endpoint,\n      httpHeaders,\n      fetch,\n      fetchMiddleware,\n      disableRetryOnRateLimit,\n      httpAgent,\n    );\n    this._rpcRequest = createRpcRequest(this._rpcClient);\n    this._rpcBatchRequest = createRpcBatchRequest(this._rpcClient);\n\n    this._rpcWebSocket = new RpcWebSocketClient(this._rpcWsEndpoint, {\n      autoconnect: false,\n      max_reconnects: Infinity,\n    });\n    this._rpcWebSocket.on('open', this._wsOnOpen.bind(this));\n    this._rpcWebSocket.on('error', this._wsOnError.bind(this));\n    this._rpcWebSocket.on('close', this._wsOnClose.bind(this));\n    this._rpcWebSocket.on(\n      'accountNotification',\n      this._wsOnAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'programNotification',\n      this._wsOnProgramAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotNotification',\n      this._wsOnSlotNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotsUpdatesNotification',\n      this._wsOnSlotUpdatesNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'signatureNotification',\n      this._wsOnSignatureNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'rootNotification',\n      this._wsOnRootNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'logsNotification',\n      this._wsOnLogsNotification.bind(this),\n    );\n  }\n\n  /**\n   * The default commitment used for requests\n   */\n  get commitment(): Commitment | undefined {\n    return this._commitment;\n  }\n\n  /**\n   * The RPC endpoint\n   */\n  get rpcEndpoint(): string {\n    return this._rpcEndpoint;\n  }\n\n  /**\n   * Fetch the balance for the specified public key, return with context\n   */\n  async getBalanceAndContext(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetBalanceConfig,\n  ): Promise<RpcResponseAndContext<number>> {\n    /** @internal */\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get balance for ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the balance for the specified public key\n   */\n  async getBalance(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetBalanceConfig,\n  ): Promise<number> {\n    return await this.getBalanceAndContext(publicKey, commitmentOrConfig)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get balance of account ' + publicKey.toBase58() + ': ' + e,\n        );\n      });\n  }\n\n  /**\n   * Fetch the estimated production time of a block\n   */\n  async getBlockTime(slot: number): Promise<number | null> {\n    const unsafeRes = await this._rpcRequest('getBlockTime', [slot]);\n    const res = create(unsafeRes, jsonRpcResult(nullable(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get block time for slot ${slot}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the lowest slot that the node has information about in its ledger.\n   * This value may increase over time if the node is configured to purge older ledger data\n   */\n  async getMinimumLedgerSlot(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('minimumLedgerSlot', []);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get minimum ledger slot',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the slot of the lowest confirmed block that has not been purged from the ledger\n   */\n  async getFirstAvailableBlock(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('getFirstAvailableBlock', []);\n    const res = create(unsafeRes, SlotRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get first available block',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch information about the current supply\n   */\n  async getSupply(\n    config?: GetSupplyConfig | Commitment,\n  ): Promise<RpcResponseAndContext<Supply>> {\n    let configArg: GetSupplyConfig = {};\n    if (typeof config === 'string') {\n      configArg = {commitment: config};\n    } else if (config) {\n      configArg = {\n        ...config,\n        commitment: (config && config.commitment) || this.commitment,\n      };\n    } else {\n      configArg = {\n        commitment: this.commitment,\n      };\n    }\n\n    const unsafeRes = await this._rpcRequest('getSupply', [configArg]);\n    const res = create(unsafeRes, GetSupplyRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get supply');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current supply of a token mint\n   */\n  async getTokenSupply(\n    tokenMintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenMintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenSupply', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get token supply');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current balance of a token account\n   */\n  async getTokenAccountBalance(\n    tokenAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenAccountBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get token account balance',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<GetProgramAccountsResponse>}\n   */\n  async getTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitmentOrConfig?: Commitment | GetTokenAccountsByOwnerConfig,\n  ): Promise<RpcResponseAndContext<GetProgramAccountsResponse>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get token accounts owned by account ${ownerAddress.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>>>}\n   */\n  async getParsedTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<ParsedAccountData>}>\n    >\n  > {\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'jsonParsed');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetParsedTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get token accounts owned by account ${ownerAddress.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest accounts with their current balances\n   */\n  async getLargestAccounts(\n    config?: GetLargestAccountsConfig,\n  ): Promise<RpcResponseAndContext<Array<AccountBalancePair>>> {\n    const arg = {\n      ...config,\n      commitment: (config && config.commitment) || this.commitment,\n    };\n    const args = arg.filter || arg.commitment ? [arg] : [];\n    const unsafeRes = await this._rpcRequest('getLargestAccounts', args);\n    const res = create(unsafeRes, GetLargestAccountsRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get largest accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest token accounts with their current balances\n   * for a given mint.\n   */\n  async getTokenLargestAccounts(\n    mintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<Array<TokenAccountBalancePair>>> {\n    const args = this._buildArgs([mintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenLargestAccounts', args);\n    const res = create(unsafeRes, GetTokenLargestAccountsResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get token largest accounts',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key, return with context\n   */\n  async getAccountInfoAndContext(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<RpcResponseAndContext<AccountInfo<Buffer> | null>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'base64',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(AccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info about account ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed account info for the specified public key\n   */\n  async getParsedAccountInfo(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<\n    RpcResponseAndContext<AccountInfo<Buffer | ParsedAccountData> | null>\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(ParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info about account ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key\n   */\n  async getAccountInfo(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<AccountInfo<Buffer> | null> {\n    try {\n      const res = await this.getAccountInfoAndContext(\n        publicKey,\n        commitmentOrConfig,\n      );\n      return res.value;\n    } catch (e) {\n      throw new Error(\n        'failed to get info about account ' + publicKey.toBase58() + ': ' + e,\n      );\n    }\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  async getMultipleParsedAccounts(\n    publicKeys: PublicKey[],\n    rawConfig?: GetMultipleAccountsConfig,\n  ): Promise<\n    RpcResponseAndContext<(AccountInfo<Buffer | ParsedAccountData> | null)[]>\n  > {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'jsonParsed', config);\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(array(nullable(ParsedAccountInfoResult))),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info for accounts ${keys}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  async getMultipleAccountsInfoAndContext(\n    publicKeys: PublicKey[],\n    commitmentOrConfig?: Commitment | GetMultipleAccountsConfig,\n  ): Promise<RpcResponseAndContext<(AccountInfo<Buffer> | null)[]>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(array(nullable(AccountInfoResult))),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info for accounts ${keys}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys\n   */\n  async getMultipleAccountsInfo(\n    publicKeys: PublicKey[],\n    commitmentOrConfig?: Commitment | GetMultipleAccountsConfig,\n  ): Promise<(AccountInfo<Buffer> | null)[]> {\n    const res = await this.getMultipleAccountsInfoAndContext(\n      publicKeys,\n      commitmentOrConfig,\n    );\n    return res.value;\n  }\n\n  /**\n   * Returns epoch activation information for a stake account that has been delegated\n   */\n  async getStakeActivation(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetStakeActivationConfig,\n    epoch?: number,\n  ): Promise<StakeActivationData> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined /* encoding */,\n      {\n        ...config,\n        epoch: epoch != null ? epoch : config?.epoch,\n      },\n    );\n\n    const unsafeRes = await this._rpcRequest('getStakeActivation', args);\n    const res = create(unsafeRes, jsonRpcResult(StakeActivationResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get Stake Activation ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>}\n   */\n  async getProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment: GetProgramAccountsConfig &\n      Readonly<{withContext: true}>,\n  ): Promise<RpcResponseAndContext<GetProgramAccountsResponse>>;\n  // eslint-disable-next-line no-dupe-class-members\n  async getProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetProgramAccountsConfig | Commitment,\n  ): Promise<GetProgramAccountsResponse>;\n  // eslint-disable-next-line no-dupe-class-members\n  async getProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetProgramAccountsConfig | Commitment,\n  ): Promise<\n    | GetProgramAccountsResponse\n    | RpcResponseAndContext<GetProgramAccountsResponse>\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(configOrCommitment);\n    const {encoding, ...configWithoutEncoding} = config || {};\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      encoding || 'base64',\n      configWithoutEncoding,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const baseSchema = array(KeyedAccountInfoResult);\n    const res =\n      configWithoutEncoding.withContext === true\n        ? create(unsafeRes, jsonRpcResultAndContext(baseSchema))\n        : create(unsafeRes, jsonRpcResult(baseSchema));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get accounts owned by program ${programId.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch and parse all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer | ParsedAccountData>}>>}\n   */\n  async getParsedProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetParsedProgramAccountsConfig | Commitment,\n  ): Promise<\n    Array<{\n      pubkey: PublicKey;\n      account: AccountInfo<Buffer | ParsedAccountData>;\n    }>\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(configOrCommitment);\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResult(array(KeyedParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get accounts owned by program ${programId.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  confirmTransaction(\n    strategy: TransactionConfirmationStrategy,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>>;\n\n  /** @deprecated Instead, call `confirmTransaction` and pass in {@link TransactionConfirmationStrategy} */\n  // eslint-disable-next-line no-dupe-class-members\n  confirmTransaction(\n    strategy: TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async confirmTransaction(\n    strategy: TransactionConfirmationStrategy | TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>> {\n    let rawSignature: string;\n\n    if (typeof strategy == 'string') {\n      rawSignature = strategy;\n    } else {\n      const config = strategy as TransactionConfirmationStrategy;\n\n      if (config.abortSignal?.aborted) {\n        return Promise.reject(config.abortSignal.reason);\n      }\n      rawSignature = config.signature;\n    }\n\n    let decodedSignature;\n\n    try {\n      decodedSignature = bs58.decode(rawSignature);\n    } catch (err) {\n      throw new Error('signature must be base58 encoded: ' + rawSignature);\n    }\n\n    assert(decodedSignature.length === 64, 'signature has invalid length');\n\n    if (typeof strategy === 'string') {\n      return await this.confirmTransactionUsingLegacyTimeoutStrategy({\n        commitment: commitment || this.commitment,\n        signature: rawSignature,\n      });\n    } else if ('lastValidBlockHeight' in strategy) {\n      return await this.confirmTransactionUsingBlockHeightExceedanceStrategy({\n        commitment: commitment || this.commitment,\n        strategy,\n      });\n    } else {\n      return await this.confirmTransactionUsingDurableNonceStrategy({\n        commitment: commitment || this.commitment,\n        strategy,\n      });\n    }\n  }\n\n  private getCancellationPromise(signal?: AbortSignal): Promise<never> {\n    return new Promise<never>((_, reject) => {\n      if (signal == null) {\n        return;\n      }\n      if (signal.aborted) {\n        reject(signal.reason);\n      } else {\n        signal.addEventListener('abort', () => {\n          reject(signal.reason);\n        });\n      }\n    });\n  }\n\n  private getTransactionConfirmationPromise({\n    commitment,\n    signature,\n  }: {\n    commitment?: Commitment;\n    signature: string;\n  }): {\n    abortConfirmation(): void;\n    confirmationPromise: Promise<{\n      __type: TransactionStatus.PROCESSED;\n      response: RpcResponseAndContext<SignatureResult>;\n    }>;\n  } {\n    let signatureSubscriptionId: number | undefined;\n    let disposeSignatureSubscriptionStateChangeObserver:\n      | SubscriptionStateChangeDisposeFn\n      | undefined;\n    let done = false;\n    const confirmationPromise = new Promise<{\n      __type: TransactionStatus.PROCESSED;\n      response: RpcResponseAndContext<SignatureResult>;\n    }>((resolve, reject) => {\n      try {\n        signatureSubscriptionId = this.onSignature(\n          signature,\n          (result: SignatureResult, context: Context) => {\n            signatureSubscriptionId = undefined;\n            const response = {\n              context,\n              value: result,\n            };\n            resolve({__type: TransactionStatus.PROCESSED, response});\n          },\n          commitment,\n        );\n        const subscriptionSetupPromise = new Promise<void>(\n          resolveSubscriptionSetup => {\n            if (signatureSubscriptionId == null) {\n              resolveSubscriptionSetup();\n            } else {\n              disposeSignatureSubscriptionStateChangeObserver =\n                this._onSubscriptionStateChange(\n                  signatureSubscriptionId,\n                  nextState => {\n                    if (nextState === 'subscribed') {\n                      resolveSubscriptionSetup();\n                    }\n                  },\n                );\n            }\n          },\n        );\n        (async () => {\n          await subscriptionSetupPromise;\n          if (done) return;\n          const response = await this.getSignatureStatus(signature);\n          if (done) return;\n          if (response == null) {\n            return;\n          }\n          const {context, value} = response;\n          if (value == null) {\n            return;\n          }\n          if (value?.err) {\n            reject(value.err);\n          } else {\n            switch (commitment) {\n              case 'confirmed':\n              case 'single':\n              case 'singleGossip': {\n                if (value.confirmationStatus === 'processed') {\n                  return;\n                }\n                break;\n              }\n              case 'finalized':\n              case 'max':\n              case 'root': {\n                if (\n                  value.confirmationStatus === 'processed' ||\n                  value.confirmationStatus === 'confirmed'\n                ) {\n                  return;\n                }\n                break;\n              }\n              // exhaust enums to ensure full coverage\n              case 'processed':\n              case 'recent':\n            }\n            done = true;\n            resolve({\n              __type: TransactionStatus.PROCESSED,\n              response: {\n                context,\n                value,\n              },\n            });\n          }\n        })();\n      } catch (err) {\n        reject(err);\n      }\n    });\n    const abortConfirmation = () => {\n      if (disposeSignatureSubscriptionStateChangeObserver) {\n        disposeSignatureSubscriptionStateChangeObserver();\n        disposeSignatureSubscriptionStateChangeObserver = undefined;\n      }\n      if (signatureSubscriptionId != null) {\n        this.removeSignatureListener(signatureSubscriptionId);\n        signatureSubscriptionId = undefined;\n      }\n    };\n    return {abortConfirmation, confirmationPromise};\n  }\n\n  private async confirmTransactionUsingBlockHeightExceedanceStrategy({\n    commitment,\n    strategy: {abortSignal, lastValidBlockHeight, signature},\n  }: {\n    commitment?: Commitment;\n    strategy: BlockheightBasedTransactionConfirmationStrategy;\n  }) {\n    let done: boolean = false;\n    const expiryPromise = new Promise<{\n      __type: TransactionStatus.BLOCKHEIGHT_EXCEEDED;\n    }>(resolve => {\n      const checkBlockHeight = async () => {\n        try {\n          const blockHeight = await this.getBlockHeight(commitment);\n          return blockHeight;\n        } catch (_e) {\n          return -1;\n        }\n      };\n      (async () => {\n        let currentBlockHeight = await checkBlockHeight();\n        if (done) return;\n        while (currentBlockHeight <= lastValidBlockHeight) {\n          await sleep(1000);\n          if (done) return;\n          currentBlockHeight = await checkBlockHeight();\n          if (done) return;\n        }\n        resolve({__type: TransactionStatus.BLOCKHEIGHT_EXCEEDED});\n      })();\n    });\n    const {abortConfirmation, confirmationPromise} =\n      this.getTransactionConfirmationPromise({commitment, signature});\n    const cancellationPromise = this.getCancellationPromise(abortSignal);\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([\n        cancellationPromise,\n        confirmationPromise,\n        expiryPromise,\n      ]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        throw new TransactionExpiredBlockheightExceededError(signature);\n      }\n    } finally {\n      done = true;\n      abortConfirmation();\n    }\n    return result;\n  }\n\n  private async confirmTransactionUsingDurableNonceStrategy({\n    commitment,\n    strategy: {\n      abortSignal,\n      minContextSlot,\n      nonceAccountPubkey,\n      nonceValue,\n      signature,\n    },\n  }: {\n    commitment?: Commitment;\n    strategy: DurableNonceTransactionConfirmationStrategy;\n  }) {\n    let done: boolean = false;\n    const expiryPromise = new Promise<{\n      __type: TransactionStatus.NONCE_INVALID;\n      slotInWhichNonceDidAdvance: number | null;\n    }>(resolve => {\n      let currentNonceValue: string | undefined = nonceValue;\n      let lastCheckedSlot: number | null = null;\n      const getCurrentNonceValue = async () => {\n        try {\n          const {context, value: nonceAccount} = await this.getNonceAndContext(\n            nonceAccountPubkey,\n            {\n              commitment,\n              minContextSlot,\n            },\n          );\n          lastCheckedSlot = context.slot;\n          return nonceAccount?.nonce;\n        } catch (e) {\n          // If for whatever reason we can't reach/read the nonce\n          // account, just keep using the last-known value.\n          return currentNonceValue;\n        }\n      };\n      (async () => {\n        currentNonceValue = await getCurrentNonceValue();\n        if (done) return;\n        while (\n          true // eslint-disable-line no-constant-condition\n        ) {\n          if (nonceValue !== currentNonceValue) {\n            resolve({\n              __type: TransactionStatus.NONCE_INVALID,\n              slotInWhichNonceDidAdvance: lastCheckedSlot,\n            });\n            return;\n          }\n          await sleep(2000);\n          if (done) return;\n          currentNonceValue = await getCurrentNonceValue();\n          if (done) return;\n        }\n      })();\n    });\n    const {abortConfirmation, confirmationPromise} =\n      this.getTransactionConfirmationPromise({commitment, signature});\n    const cancellationPromise = this.getCancellationPromise(abortSignal);\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([\n        cancellationPromise,\n        confirmationPromise,\n        expiryPromise,\n      ]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        // Double check that the transaction is indeed unconfirmed.\n        let signatureStatus:\n          | RpcResponseAndContext<SignatureStatus | null>\n          | null\n          | undefined;\n        while (\n          true // eslint-disable-line no-constant-condition\n        ) {\n          const status = await this.getSignatureStatus(signature);\n          if (status == null) {\n            break;\n          }\n          if (\n            status.context.slot <\n            (outcome.slotInWhichNonceDidAdvance ?? minContextSlot)\n          ) {\n            await sleep(400);\n            continue;\n          }\n          signatureStatus = status;\n          break;\n        }\n        if (signatureStatus?.value) {\n          const commitmentForStatus = commitment || 'finalized';\n          const {confirmationStatus} = signatureStatus.value;\n          switch (commitmentForStatus) {\n            case 'processed':\n            case 'recent':\n              if (\n                confirmationStatus !== 'processed' &&\n                confirmationStatus !== 'confirmed' &&\n                confirmationStatus !== 'finalized'\n              ) {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            case 'confirmed':\n            case 'single':\n            case 'singleGossip':\n              if (\n                confirmationStatus !== 'confirmed' &&\n                confirmationStatus !== 'finalized'\n              ) {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            case 'finalized':\n            case 'max':\n            case 'root':\n              if (confirmationStatus !== 'finalized') {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            default:\n              // Exhaustive switch.\n              // eslint-disable-next-line @typescript-eslint/no-unused-vars\n              ((_: never) => {})(commitmentForStatus);\n          }\n          result = {\n            context: signatureStatus.context,\n            value: {err: signatureStatus.value.err},\n          };\n        } else {\n          throw new TransactionExpiredNonceInvalidError(signature);\n        }\n      }\n    } finally {\n      done = true;\n      abortConfirmation();\n    }\n    return result;\n  }\n\n  private async confirmTransactionUsingLegacyTimeoutStrategy({\n    commitment,\n    signature,\n  }: {\n    commitment?: Commitment;\n    signature: string;\n  }) {\n    let timeoutId;\n    const expiryPromise = new Promise<{\n      __type: TransactionStatus.TIMED_OUT;\n      timeoutMs: number;\n    }>(resolve => {\n      let timeoutMs = this._confirmTransactionInitialTimeout || 60 * 1000;\n      switch (commitment) {\n        case 'processed':\n        case 'recent':\n        case 'single':\n        case 'confirmed':\n        case 'singleGossip': {\n          timeoutMs = this._confirmTransactionInitialTimeout || 30 * 1000;\n          break;\n        }\n        // exhaust enums to ensure full coverage\n        case 'finalized':\n        case 'max':\n        case 'root':\n      }\n      timeoutId = setTimeout(\n        () => resolve({__type: TransactionStatus.TIMED_OUT, timeoutMs}),\n        timeoutMs,\n      );\n    });\n    const {abortConfirmation, confirmationPromise} =\n      this.getTransactionConfirmationPromise({\n        commitment,\n        signature,\n      });\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([confirmationPromise, expiryPromise]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        throw new TransactionExpiredTimeoutError(\n          signature,\n          outcome.timeoutMs / 1000,\n        );\n      }\n    } finally {\n      clearTimeout(timeoutId);\n      abortConfirmation();\n    }\n    return result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getClusterNodes(): Promise<Array<ContactInfo>> {\n    const unsafeRes = await this._rpcRequest('getClusterNodes', []);\n    const res = create(unsafeRes, jsonRpcResult(array(ContactInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get cluster nodes');\n    }\n    return res.result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getVoteAccounts(commitment?: Commitment): Promise<VoteAccountStatus> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getVoteAccounts', args);\n    const res = create(unsafeRes, GetVoteAccounts);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get vote accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot that the node is processing\n   */\n  async getSlot(\n    commitmentOrConfig?: Commitment | GetSlotConfig,\n  ): Promise<number> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getSlot', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot leader of the cluster\n   */\n  async getSlotLeader(\n    commitmentOrConfig?: Commitment | GetSlotLeaderConfig,\n  ): Promise<string> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getSlotLeader', args);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leader');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch `limit` number of slot leaders starting from `startSlot`\n   *\n   * @param startSlot fetch slot leaders starting from this slot\n   * @param limit number of slot leaders to return\n   */\n  async getSlotLeaders(\n    startSlot: number,\n    limit: number,\n  ): Promise<Array<PublicKey>> {\n    const args = [startSlot, limit];\n    const unsafeRes = await this._rpcRequest('getSlotLeaders', args);\n    const res = create(unsafeRes, jsonRpcResult(array(PublicKeyFromString)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leaders');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current status of a signature\n   */\n  async getSignatureStatus(\n    signature: TransactionSignature,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<SignatureStatus | null>> {\n    const {context, value: values} = await this.getSignatureStatuses(\n      [signature],\n      config,\n    );\n    assert(values.length === 1);\n    const value = values[0];\n    return {context, value};\n  }\n\n  /**\n   * Fetch the current statuses of a batch of signatures\n   */\n  async getSignatureStatuses(\n    signatures: Array<TransactionSignature>,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<Array<SignatureStatus | null>>> {\n    const params: any[] = [signatures];\n    if (config) {\n      params.push(config);\n    }\n    const unsafeRes = await this._rpcRequest('getSignatureStatuses', params);\n    const res = create(unsafeRes, GetSignatureStatusesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get signature status');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current transaction count of the cluster\n   */\n  async getTransactionCount(\n    commitmentOrConfig?: Commitment | GetTransactionCountConfig,\n  ): Promise<number> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransactionCount', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get transaction count',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current total currency supply of the cluster in lamports\n   *\n   * @deprecated Deprecated since v1.2.8. Please use {@link getSupply} instead.\n   */\n  async getTotalSupply(commitment?: Commitment): Promise<number> {\n    const result = await this.getSupply({\n      commitment,\n      excludeNonCirculatingAccountsList: true,\n    });\n    return result.value.total;\n  }\n\n  /**\n   * Fetch the cluster InflationGovernor parameters\n   */\n  async getInflationGovernor(\n    commitment?: Commitment,\n  ): Promise<InflationGovernor> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getInflationGovernor', args);\n    const res = create(unsafeRes, GetInflationGovernorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the inflation reward for a list of addresses for an epoch\n   */\n  async getInflationReward(\n    addresses: PublicKey[],\n    epoch?: number,\n    commitmentOrConfig?: Commitment | GetInflationRewardConfig,\n  ): Promise<(InflationReward | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [addresses.map(pubkey => pubkey.toBase58())],\n      commitment,\n      undefined /* encoding */,\n      {\n        ...config,\n        epoch: epoch != null ? epoch : config?.epoch,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getInflationReward', args);\n    const res = create(unsafeRes, GetInflationRewardResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation reward');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the specific inflation values for the current epoch\n   */\n  async getInflationRate(): Promise<InflationRate> {\n    const unsafeRes = await this._rpcRequest('getInflationRate', []);\n    const res = create(unsafeRes, GetInflationRateRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation rate');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Info parameters\n   */\n  async getEpochInfo(\n    commitmentOrConfig?: Commitment | GetEpochInfoConfig,\n  ): Promise<EpochInfo> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getEpochInfo', args);\n    const res = create(unsafeRes, GetEpochInfoRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch info');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Schedule parameters\n   */\n  async getEpochSchedule(): Promise<EpochSchedule> {\n    const unsafeRes = await this._rpcRequest('getEpochSchedule', []);\n    const res = create(unsafeRes, GetEpochScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch schedule');\n    }\n    const epochSchedule = res.result;\n    return new EpochSchedule(\n      epochSchedule.slotsPerEpoch,\n      epochSchedule.leaderScheduleSlotOffset,\n      epochSchedule.warmup,\n      epochSchedule.firstNormalEpoch,\n      epochSchedule.firstNormalSlot,\n    );\n  }\n\n  /**\n   * Fetch the leader schedule for the current epoch\n   * @return {Promise<RpcResponseAndContext<LeaderSchedule>>}\n   */\n  async getLeaderSchedule(): Promise<LeaderSchedule> {\n    const unsafeRes = await this._rpcRequest('getLeaderSchedule', []);\n    const res = create(unsafeRes, GetLeaderScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get leader schedule');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the minimum balance needed to exempt an account of `dataLength`\n   * size from rent\n   */\n  async getMinimumBalanceForRentExemption(\n    dataLength: number,\n    commitment?: Commitment,\n  ): Promise<number> {\n    const args = this._buildArgs([dataLength], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getMinimumBalanceForRentExemption',\n      args,\n    );\n    const res = create(unsafeRes, GetMinimumBalanceForRentExemptionRpcResult);\n    if ('error' in res) {\n      console.warn('Unable to fetch minimum balance for rent exemption');\n      return 0;\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster, return with context\n   * @return {Promise<RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhashAndContext(commitment?: Commitment): Promise<\n    RpcResponseAndContext<{\n      blockhash: Blockhash;\n      feeCalculator: FeeCalculator;\n    }>\n  > {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getRecentBlockhash', args);\n    const res = create(unsafeRes, GetRecentBlockhashAndContextRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get recent blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch recent performance samples\n   * @return {Promise<Array<PerfSample>>}\n   */\n  async getRecentPerformanceSamples(\n    limit?: number,\n  ): Promise<Array<PerfSample>> {\n    const unsafeRes = await this._rpcRequest(\n      'getRecentPerformanceSamples',\n      limit ? [limit] : [],\n    );\n    const res = create(unsafeRes, GetRecentPerformanceSamplesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get recent performance samples',\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch the fee calculator for a recent blockhash from the cluster, return with context\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getFeeForMessage} instead.\n   */\n  async getFeeCalculatorForBlockhash(\n    blockhash: Blockhash,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<FeeCalculator | null>> {\n    const args = this._buildArgs([blockhash], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getFeeCalculatorForBlockhash',\n      args,\n    );\n\n    const res = create(unsafeRes, GetFeeCalculatorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get fee calculator');\n    }\n    const {context, value} = res.result;\n    return {\n      context,\n      value: value !== null ? value.feeCalculator : null,\n    };\n  }\n\n  /**\n   * Fetch the fee for a message from the cluster, return with context\n   */\n  async getFeeForMessage(\n    message: VersionedMessage,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<number | null>> {\n    const wireMessage = toBuffer(message.serialize()).toString('base64');\n    const args = this._buildArgs([wireMessage], commitment);\n    const unsafeRes = await this._rpcRequest('getFeeForMessage', args);\n\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get fee for message');\n    }\n    if (res.result === null) {\n      throw new Error('invalid blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of prioritization fees from recent blocks.\n   */\n  async getRecentPrioritizationFees(\n    config?: GetRecentPrioritizationFeesConfig,\n  ): Promise<RecentPrioritizationFees[]> {\n    const accounts = config?.lockedWritableAccounts?.map(key => key.toBase58());\n    const args = accounts?.length ? [accounts] : [];\n    const unsafeRes = await this._rpcRequest(\n      'getRecentPrioritizationFees',\n      args,\n    );\n    const res = create(unsafeRes, GetRecentPrioritizationFeesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get recent prioritization fees',\n      );\n    }\n    return res.result;\n  }\n  /**\n   * Fetch a recent blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhash(\n    commitment?: Commitment,\n  ): Promise<{blockhash: Blockhash; feeCalculator: FeeCalculator}> {\n    try {\n      const res = await this.getRecentBlockhashAndContext(commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhash(\n    commitmentOrConfig?: Commitment | GetLatestBlockhashConfig,\n  ): Promise<BlockhashWithExpiryBlockHeight> {\n    try {\n      const res = await this.getLatestBlockhashAndContext(commitmentOrConfig);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhashAndContext(\n    commitmentOrConfig?: Commitment | GetLatestBlockhashConfig,\n  ): Promise<RpcResponseAndContext<BlockhashWithExpiryBlockHeight>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getLatestBlockhash', args);\n    const res = create(unsafeRes, GetLatestBlockhashRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get latest blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Returns whether a blockhash is still valid or not\n   */\n  async isBlockhashValid(\n    blockhash: Blockhash,\n    rawConfig?: IsBlockhashValidConfig,\n  ): Promise<RpcResponseAndContext<boolean>> {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgs(\n      [blockhash],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('isBlockhashValid', args);\n    const res = create(unsafeRes, IsBlockhashValidRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to determine if the blockhash `' + blockhash + '`is valid',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the node version\n   */\n  async getVersion(): Promise<Version> {\n    const unsafeRes = await this._rpcRequest('getVersion', []);\n    const res = create(unsafeRes, jsonRpcResult(VersionResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get version');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the genesis hash\n   */\n  async getGenesisHash(): Promise<string> {\n    const unsafeRes = await this._rpcRequest('getGenesisHash', []);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get genesis hash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a processed block from the cluster.\n   *\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  async getBlock(\n    slot: number,\n    rawConfig?: GetBlockConfig,\n  ): Promise<BlockResponse | null>;\n\n  /**\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetBlockConfig & {transactionDetails: 'accounts'},\n  ): Promise<AccountsModeBlockResponse | null>;\n\n  /**\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetBlockConfig & {transactionDetails: 'none'},\n  ): Promise<NoneModeBlockResponse | null>;\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<VersionedBlockResponse | null>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'accounts'},\n  ): Promise<VersionedAccountsModeBlockResponse | null>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'none'},\n  ): Promise<VersionedNoneModeBlockResponse | null>;\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<\n    | VersionedBlockResponse\n    | VersionedAccountsModeBlockResponse\n    | VersionedNoneModeBlockResponse\n    | null\n  > {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment as Finality,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    try {\n      switch (config?.transactionDetails) {\n        case 'accounts': {\n          const res = create(unsafeRes, GetAccountsModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        case 'none': {\n          const res = create(unsafeRes, GetNoneModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        default: {\n          const res = create(unsafeRes, GetBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          const {result} = res;\n          return result\n            ? {\n                ...result,\n                transactions: result.transactions.map(\n                  ({transaction, meta, version}) => ({\n                    meta,\n                    transaction: {\n                      ...transaction,\n                      message: versionedMessageFromResponse(\n                        version,\n                        transaction.message,\n                      ),\n                    },\n                    version,\n                  }),\n                ),\n              }\n            : null;\n        }\n      }\n    } catch (e) {\n      throw new SolanaJSONRPCError(\n        e as JSONRPCError,\n        'failed to get confirmed block',\n      );\n    }\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized block\n   */\n  async getParsedBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<ParsedAccountsModeBlockResponse>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getParsedBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'accounts'},\n  ): Promise<ParsedAccountsModeBlockResponse>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getParsedBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'none'},\n  ): Promise<ParsedNoneModeBlockResponse>;\n  // eslint-disable-next-line no-dupe-class-members\n  async getParsedBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<\n    | ParsedBlockResponse\n    | ParsedAccountsModeBlockResponse\n    | ParsedNoneModeBlockResponse\n    | null\n  > {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment as Finality,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    try {\n      switch (config?.transactionDetails) {\n        case 'accounts': {\n          const res = create(unsafeRes, GetParsedAccountsModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        case 'none': {\n          const res = create(unsafeRes, GetParsedNoneModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        default: {\n          const res = create(unsafeRes, GetParsedBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n      }\n    } catch (e) {\n      throw new SolanaJSONRPCError(e as JSONRPCError, 'failed to get block');\n    }\n  }\n\n  /*\n   * Returns the current block height of the node\n   */\n  getBlockHeight = (() => {\n    const requestPromises: {[hash: string]: Promise<number>} = {};\n    return async (\n      commitmentOrConfig?: Commitment | GetBlockHeightConfig,\n    ): Promise<number> => {\n      const {commitment, config} =\n        extractCommitmentFromConfig(commitmentOrConfig);\n      const args = this._buildArgs(\n        [],\n        commitment,\n        undefined /* encoding */,\n        config,\n      );\n      const requestHash = fastStableStringify(args);\n      requestPromises[requestHash] =\n        requestPromises[requestHash] ??\n        (async () => {\n          try {\n            const unsafeRes = await this._rpcRequest('getBlockHeight', args);\n            const res = create(unsafeRes, jsonRpcResult(number()));\n            if ('error' in res) {\n              throw new SolanaJSONRPCError(\n                res.error,\n                'failed to get block height information',\n              );\n            }\n            return res.result;\n          } finally {\n            delete requestPromises[requestHash];\n          }\n        })();\n      return await requestPromises[requestHash];\n    };\n  })();\n\n  /*\n   * Returns recent block production information from the current or previous epoch\n   */\n  async getBlockProduction(\n    configOrCommitment?: GetBlockProductionConfig | Commitment,\n  ): Promise<RpcResponseAndContext<BlockProduction>> {\n    let extra: Omit<GetBlockProductionConfig, 'commitment'> | undefined;\n    let commitment: Commitment | undefined;\n\n    if (typeof configOrCommitment === 'string') {\n      commitment = configOrCommitment;\n    } else if (configOrCommitment) {\n      const {commitment: c, ...rest} = configOrCommitment;\n      commitment = c;\n      extra = rest;\n    }\n\n    const args = this._buildArgs([], commitment, 'base64', extra);\n    const unsafeRes = await this._rpcRequest('getBlockProduction', args);\n    const res = create(unsafeRes, BlockProductionResponseStruct);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get block production information',\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   *\n   * @deprecated Instead, call `getTransaction` using a\n   * `GetVersionedTransactionConfig` by setting the\n   * `maxSupportedTransactionVersion` property.\n   */\n  async getTransaction(\n    signature: string,\n    rawConfig?: GetTransactionConfig,\n  ): Promise<TransactionResponse | null>;\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransaction(\n    signature: string,\n    rawConfig: GetVersionedTransactionConfig,\n  ): Promise<VersionedTransactionResponse | null>;\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransaction(\n    signature: string,\n    rawConfig?: GetVersionedTransactionConfig,\n  ): Promise<VersionedTransactionResponse | null> {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment as Finality,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    return {\n      ...result,\n      transaction: {\n        ...result.transaction,\n        message: versionedMessageFromResponse(\n          result.version,\n          result.transaction.message,\n        ),\n      },\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized transaction\n   */\n  async getParsedTransaction(\n    signature: TransactionSignature,\n    commitmentOrConfig?: GetVersionedTransactionConfig | Finality,\n  ): Promise<ParsedTransactionWithMeta | null> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment as Finality,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   */\n  async getParsedTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig?: GetVersionedTransactionConfig | Finality,\n  ): Promise<(ParsedTransactionWithMeta | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment as Finality,\n        'jsonParsed',\n        config,\n      );\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link TransactionResponse}.\n   *\n   * @deprecated Instead, call `getTransactions` using a\n   * `GetVersionedTransactionConfig` by setting the\n   * `maxSupportedTransactionVersion` property.\n   */\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig?: GetTransactionConfig | Finality,\n  ): Promise<(TransactionResponse | null)[]>;\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link\n   * VersionedTransactionResponse}.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig: GetVersionedTransactionConfig | Finality,\n  ): Promise<(VersionedTransactionResponse | null)[]>;\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link\n   * VersionedTransactionResponse}.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig: GetVersionedTransactionConfig | Finality,\n  ): Promise<(VersionedTransactionResponse | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment as Finality,\n        undefined /* encoding */,\n        config,\n      );\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      const result = res.result;\n      if (!result) return result;\n\n      return {\n        ...result,\n        transaction: {\n          ...result.transaction,\n          message: versionedMessageFromResponse(\n            result.version,\n            result.transaction.message,\n          ),\n        },\n      };\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of Transactions and transaction statuses from the cluster\n   * for a confirmed block.\n   *\n   * @deprecated Deprecated since v1.13.0. Please use {@link getBlock} instead.\n   */\n  async getConfirmedBlock(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<ConfirmedBlock> {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetConfirmedBlockRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n\n    const block = {\n      ...result,\n      transactions: result.transactions.map(({transaction, meta}) => {\n        const message = new Message(transaction.message);\n        return {\n          meta,\n          transaction: {\n            ...transaction,\n            message,\n          },\n        };\n      }),\n    };\n\n    return {\n      ...block,\n      transactions: block.transactions.map(({transaction, meta}) => {\n        return {\n          meta,\n          transaction: Transaction.populate(\n            transaction.message,\n            transaction.signatures,\n          ),\n        };\n      }),\n    };\n  }\n\n  /**\n   * Fetch confirmed blocks between two slots\n   */\n  async getBlocks(\n    startSlot: number,\n    endSlot?: number,\n    commitment?: Finality,\n  ): Promise<Array<number>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      endSlot !== undefined ? [startSlot, endSlot] : [startSlot],\n      commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getBlocks', args);\n    const res = create(unsafeRes, jsonRpcResult(array(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get blocks');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a block, excluding rewards\n   */\n  async getBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a confirmed block, excluding rewards\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getBlockSignatures} instead.\n   */\n  async getConfirmedBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getTransaction} instead.\n   */\n  async getConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    const message = new Message(result.transaction.message);\n    const signatures = result.transaction.signatures;\n    return {\n      ...result,\n      transaction: Transaction.populate(message, signatures),\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransaction} instead.\n   */\n  async getParsedConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ParsedConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get confirmed transaction',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransactions} instead.\n   */\n  async getParsedConfirmedTransactions(\n    signatures: TransactionSignature[],\n    commitment?: Finality,\n  ): Promise<(ParsedConfirmedTransaction | null)[]> {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment,\n        'jsonParsed',\n      );\n      return {\n        methodName: 'getConfirmedTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(\n          res.error,\n          'failed to get confirmed transactions',\n        );\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of all the confirmed signatures for transactions involving an address\n   * within a specified slot range. Max range allowed is 10,000 slots.\n   *\n   * @deprecated Deprecated since v1.3. Please use {@link getConfirmedSignaturesForAddress2} instead.\n   *\n   * @param address queried address\n   * @param startSlot start slot, inclusive\n   * @param endSlot end slot, inclusive\n   */\n  async getConfirmedSignaturesForAddress(\n    address: PublicKey,\n    startSlot: number,\n    endSlot: number,\n  ): Promise<Array<TransactionSignature>> {\n    let options: any = {};\n\n    let firstAvailableBlock = await this.getFirstAvailableBlock();\n    while (!('until' in options)) {\n      startSlot--;\n      if (startSlot <= 0 || startSlot < firstAvailableBlock) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(\n          startSlot,\n          'finalized',\n        );\n        if (block.signatures.length > 0) {\n          options.until =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    let highestConfirmedRoot = await this.getSlot('finalized');\n    while (!('before' in options)) {\n      endSlot++;\n      if (endSlot > highestConfirmedRoot) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(endSlot);\n        if (block.signatures.length > 0) {\n          options.before =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    const confirmedSignatureInfo = await this.getConfirmedSignaturesForAddress2(\n      address,\n      options,\n    );\n    return confirmedSignatureInfo.map(info => info.signature);\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getConfirmedSignaturesForAddress2(\n    address: PublicKey,\n    options?: ConfirmedSignaturesForAddress2Options,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest(\n      'getConfirmedSignaturesForAddress2',\n      args,\n    );\n    const res = create(unsafeRes, GetConfirmedSignaturesForAddress2RpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get confirmed signatures for address',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getSignaturesForAddress(\n    address: PublicKey,\n    options?: SignaturesForAddressOptions,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest('getSignaturesForAddress', args);\n    const res = create(unsafeRes, GetSignaturesForAddressRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get signatures for address',\n      );\n    }\n    return res.result;\n  }\n\n  async getAddressLookupTable(\n    accountKey: PublicKey,\n    config?: GetAccountInfoConfig,\n  ): Promise<RpcResponseAndContext<AddressLookupTableAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      accountKey,\n      config,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = new AddressLookupTableAccount({\n        key: accountKey,\n        state: AddressLookupTableAccount.deserialize(accountInfo.data),\n      });\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster, return with context\n   */\n  async getNonceAndContext(\n    nonceAccount: PublicKey,\n    commitmentOrConfig?: Commitment | GetNonceAndContextConfig,\n  ): Promise<RpcResponseAndContext<NonceAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      nonceAccount,\n      commitmentOrConfig,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = NonceAccount.fromAccountData(accountInfo.data);\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster\n   */\n  async getNonce(\n    nonceAccount: PublicKey,\n    commitmentOrConfig?: Commitment | GetNonceConfig,\n  ): Promise<NonceAccount | null> {\n    return await this.getNonceAndContext(nonceAccount, commitmentOrConfig)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get nonce for account ' +\n            nonceAccount.toBase58() +\n            ': ' +\n            e,\n        );\n      });\n  }\n\n  /**\n   * Request an allocation of lamports to the specified address\n   *\n   * ```typescript\n   * import { Connection, PublicKey, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\n   *\n   * (async () => {\n   *   const connection = new Connection(\"https://api.testnet.solana.com\", \"confirmed\");\n   *   const myAddress = new PublicKey(\"2nr1bHFT86W9tGnyvmYW4vcHKsQB3sVQfnddasz4kExM\");\n   *   const signature = await connection.requestAirdrop(myAddress, LAMPORTS_PER_SOL);\n   *   await connection.confirmTransaction(signature);\n   * })();\n   * ```\n   */\n  async requestAirdrop(\n    to: PublicKey,\n    lamports: number,\n  ): Promise<TransactionSignature> {\n    const unsafeRes = await this._rpcRequest('requestAirdrop', [\n      to.toBase58(),\n      lamports,\n    ]);\n    const res = create(unsafeRes, RequestAirdropRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `airdrop to ${to.toBase58()} failed`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  async _blockhashWithExpiryBlockHeight(\n    disableCache: boolean,\n  ): Promise<BlockhashWithExpiryBlockHeight> {\n    if (!disableCache) {\n      // Wait for polling to finish\n      while (this._pollingBlockhash) {\n        await sleep(100);\n      }\n      const timeSinceFetch = Date.now() - this._blockhashInfo.lastFetch;\n      const expired = timeSinceFetch >= BLOCKHASH_CACHE_TIMEOUT_MS;\n      if (this._blockhashInfo.latestBlockhash !== null && !expired) {\n        return this._blockhashInfo.latestBlockhash;\n      }\n    }\n\n    return await this._pollNewBlockhash();\n  }\n\n  /**\n   * @internal\n   */\n  async _pollNewBlockhash(): Promise<BlockhashWithExpiryBlockHeight> {\n    this._pollingBlockhash = true;\n    try {\n      const startTime = Date.now();\n      const cachedLatestBlockhash = this._blockhashInfo.latestBlockhash;\n      const cachedBlockhash = cachedLatestBlockhash\n        ? cachedLatestBlockhash.blockhash\n        : null;\n      for (let i = 0; i < 50; i++) {\n        const latestBlockhash = await this.getLatestBlockhash('finalized');\n\n        if (cachedBlockhash !== latestBlockhash.blockhash) {\n          this._blockhashInfo = {\n            latestBlockhash,\n            lastFetch: Date.now(),\n            transactionSignatures: [],\n            simulatedSignatures: [],\n          };\n          return latestBlockhash;\n        }\n\n        // Sleep for approximately half a slot\n        await sleep(MS_PER_SLOT / 2);\n      }\n\n      throw new Error(\n        `Unable to obtain a new blockhash after ${Date.now() - startTime}ms`,\n      );\n    } finally {\n      this._pollingBlockhash = false;\n    }\n  }\n\n  /**\n   * get the stake minimum delegation\n   */\n  async getStakeMinimumDelegation(\n    config?: GetStakeMinimumDelegationConfig,\n  ): Promise<RpcResponseAndContext<number>> {\n    const {commitment, config: configArg} = extractCommitmentFromConfig(config);\n    const args = this._buildArgs([], commitment, 'base64', configArg);\n    const unsafeRes = await this._rpcRequest('getStakeMinimumDelegation', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get stake minimum delegation`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Simulate a transaction\n   *\n   * @deprecated Instead, call {@link simulateTransaction} with {@link\n   * VersionedTransaction} and {@link SimulateTransactionConfig} parameters\n   */\n  simulateTransaction(\n    transactionOrMessage: Transaction | Message,\n    signers?: Array<Signer>,\n    includeAccounts?: boolean | Array<PublicKey>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>>;\n\n  /**\n   * Simulate a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  simulateTransaction(\n    transaction: VersionedTransaction,\n    config?: SimulateTransactionConfig,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>>;\n\n  /**\n   * Simulate a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async simulateTransaction(\n    transactionOrMessage: VersionedTransaction | Transaction | Message,\n    configOrSigners?: SimulateTransactionConfig | Array<Signer>,\n    includeAccounts?: boolean | Array<PublicKey>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n    if ('message' in transactionOrMessage) {\n      const versionedTx = transactionOrMessage;\n      const wireTransaction = versionedTx.serialize();\n      const encodedTransaction =\n        Buffer.from(wireTransaction).toString('base64');\n      if (Array.isArray(configOrSigners) || includeAccounts !== undefined) {\n        throw new Error('Invalid arguments');\n      }\n\n      const config: any = configOrSigners || {};\n      config.encoding = 'base64';\n      if (!('commitment' in config)) {\n        config.commitment = this.commitment;\n      }\n\n      const args = [encodedTransaction, config];\n      const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n      const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n      if ('error' in res) {\n        throw new Error('failed to simulate transaction: ' + res.error.message);\n      }\n      return res.result;\n    }\n\n    let transaction;\n    if (transactionOrMessage instanceof Transaction) {\n      let originalTx: Transaction = transactionOrMessage;\n      transaction = new Transaction();\n      transaction.feePayer = originalTx.feePayer;\n      transaction.instructions = transactionOrMessage.instructions;\n      transaction.nonceInfo = originalTx.nonceInfo;\n      transaction.signatures = originalTx.signatures;\n    } else {\n      transaction = Transaction.populate(transactionOrMessage);\n      // HACK: this function relies on mutating the populated transaction\n      transaction._message = transaction._json = undefined;\n    }\n\n    if (configOrSigners !== undefined && !Array.isArray(configOrSigners)) {\n      throw new Error('Invalid arguments');\n    }\n\n    const signers = configOrSigners;\n    if (transaction.nonceInfo && signers) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(\n          disableCache,\n        );\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n\n        if (!signers) break;\n\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (\n          !this._blockhashInfo.simulatedSignatures.includes(signature) &&\n          !this._blockhashInfo.transactionSignatures.includes(signature)\n        ) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.simulatedSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const message = transaction._compile();\n    const signData = message.serialize();\n    const wireTransaction = transaction._serialize(signData);\n    const encodedTransaction = wireTransaction.toString('base64');\n    const config: any = {\n      encoding: 'base64',\n      commitment: this.commitment,\n    };\n\n    if (includeAccounts) {\n      const addresses = (\n        Array.isArray(includeAccounts)\n          ? includeAccounts\n          : message.nonProgramIds()\n      ).map(key => key.toBase58());\n\n      config['accounts'] = {\n        encoding: 'base64',\n        addresses,\n      };\n    }\n\n    if (signers) {\n      config.sigVerify = true;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n    const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n        if (logs && Array.isArray(logs)) {\n          const traceIndent = '\\n    ';\n          const logTrace = traceIndent + logs.join(traceIndent);\n          console.error(res.error.message, logTrace);\n        }\n      }\n      throw new SendTransactionError(\n        'failed to simulate transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Sign and send a transaction\n   *\n   * @deprecated Instead, call {@link sendTransaction} with a {@link\n   * VersionedTransaction}\n   */\n  sendTransaction(\n    transaction: Transaction,\n    signers: Array<Signer>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature>;\n\n  /**\n   * Send a signed transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  sendTransaction(\n    transaction: VersionedTransaction,\n    options?: SendOptions,\n  ): Promise<TransactionSignature>;\n\n  /**\n   * Sign and send a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async sendTransaction(\n    transaction: VersionedTransaction | Transaction,\n    signersOrOptions?: Array<Signer> | SendOptions,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    if ('version' in transaction) {\n      if (signersOrOptions && Array.isArray(signersOrOptions)) {\n        throw new Error('Invalid arguments');\n      }\n\n      const wireTransaction = transaction.serialize();\n      return await this.sendRawTransaction(wireTransaction, signersOrOptions);\n    }\n\n    if (signersOrOptions === undefined || !Array.isArray(signersOrOptions)) {\n      throw new Error('Invalid arguments');\n    }\n\n    const signers = signersOrOptions;\n    if (transaction.nonceInfo) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(\n          disableCache,\n        );\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (!this._blockhashInfo.transactionSignatures.includes(signature)) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.transactionSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const wireTransaction = transaction.serialize();\n    return await this.sendRawTransaction(wireTransaction, options);\n  }\n\n  /**\n   * Send a transaction that has already been signed and serialized into the\n   * wire format\n   */\n  async sendRawTransaction(\n    rawTransaction: Buffer | Uint8Array | Array<number>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const encodedTransaction = toBuffer(rawTransaction).toString('base64');\n    const result = await this.sendEncodedTransaction(\n      encodedTransaction,\n      options,\n    );\n    return result;\n  }\n\n  /**\n   * Send a transaction that has already been signed, serialized into the\n   * wire format, and encoded as a base64 string\n   */\n  async sendEncodedTransaction(\n    encodedTransaction: string,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const config: any = {encoding: 'base64'};\n    const skipPreflight = options && options.skipPreflight;\n    const preflightCommitment =\n      (options && options.preflightCommitment) || this.commitment;\n\n    if (options && options.maxRetries != null) {\n      config.maxRetries = options.maxRetries;\n    }\n    if (options && options.minContextSlot != null) {\n      config.minContextSlot = options.minContextSlot;\n    }\n    if (skipPreflight) {\n      config.skipPreflight = skipPreflight;\n    }\n    if (preflightCommitment) {\n      config.preflightCommitment = preflightCommitment;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('sendTransaction', args);\n    const res = create(unsafeRes, SendTransactionRpcResult);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n      }\n      throw new SendTransactionError(\n        'failed to send transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnOpen() {\n    this._rpcWebSocketConnected = true;\n    this._rpcWebSocketHeartbeat = setInterval(() => {\n      // Ping server every 5s to prevent idle timeouts\n      (async () => {\n        try {\n          await this._rpcWebSocket.notify('ping');\n          // eslint-disable-next-line no-empty\n        } catch {}\n      })();\n    }, 5000);\n    this._updateSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnError(err: Error) {\n    this._rpcWebSocketConnected = false;\n    console.error('ws error:', err.message);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnClose(code: number) {\n    this._rpcWebSocketConnected = false;\n    this._rpcWebSocketGeneration =\n      (this._rpcWebSocketGeneration + 1) % Number.MAX_SAFE_INTEGER;\n    if (this._rpcWebSocketIdleTimeout) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n    }\n    if (this._rpcWebSocketHeartbeat) {\n      clearInterval(this._rpcWebSocketHeartbeat);\n      this._rpcWebSocketHeartbeat = null;\n    }\n\n    if (code === 1000) {\n      // explicit close, check if any subscriptions have been made since close\n      this._updateSubscriptions();\n      return;\n    }\n\n    // implicit close, prepare subscriptions for auto-reconnect\n    this._subscriptionCallbacksByServerSubscriptionId = {};\n    Object.entries(\n      this._subscriptionsByHash as Record<SubscriptionConfigHash, Subscription>,\n    ).forEach(([hash, subscription]) => {\n      this._setSubscription(hash, {\n        ...subscription,\n        state: 'pending',\n      });\n    });\n  }\n\n  /**\n   * @internal\n   */\n  private _setSubscription(\n    hash: SubscriptionConfigHash,\n    nextSubscription: Subscription,\n  ) {\n    const prevState = this._subscriptionsByHash[hash]?.state;\n    this._subscriptionsByHash[hash] = nextSubscription;\n    if (prevState !== nextSubscription.state) {\n      const stateChangeCallbacks =\n        this._subscriptionStateChangeCallbacksByHash[hash];\n      if (stateChangeCallbacks) {\n        stateChangeCallbacks.forEach(cb => {\n          try {\n            cb(nextSubscription.state);\n            // eslint-disable-next-line no-empty\n          } catch {}\n        });\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  private _onSubscriptionStateChange(\n    clientSubscriptionId: ClientSubscriptionId,\n    callback: SubscriptionStateChangeCallback,\n  ): SubscriptionStateChangeDisposeFn {\n    const hash =\n      this._subscriptionHashByClientSubscriptionId[clientSubscriptionId];\n    if (hash == null) {\n      return () => {};\n    }\n    const stateChangeCallbacks = (this._subscriptionStateChangeCallbacksByHash[\n      hash\n    ] ||= new Set());\n    stateChangeCallbacks.add(callback);\n    return () => {\n      stateChangeCallbacks.delete(callback);\n      if (stateChangeCallbacks.size === 0) {\n        delete this._subscriptionStateChangeCallbacksByHash[hash];\n      }\n    };\n  }\n\n  /**\n   * @internal\n   */\n  async _updateSubscriptions() {\n    if (Object.keys(this._subscriptionsByHash).length === 0) {\n      if (this._rpcWebSocketConnected) {\n        this._rpcWebSocketConnected = false;\n        this._rpcWebSocketIdleTimeout = setTimeout(() => {\n          this._rpcWebSocketIdleTimeout = null;\n          try {\n            this._rpcWebSocket.close();\n          } catch (err) {\n            // swallow error if socket has already been closed.\n            if (err instanceof Error) {\n              console.log(\n                `Error when closing socket connection: ${err.message}`,\n              );\n            }\n          }\n        }, 500);\n      }\n      return;\n    }\n\n    if (this._rpcWebSocketIdleTimeout !== null) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n      this._rpcWebSocketConnected = true;\n    }\n\n    if (!this._rpcWebSocketConnected) {\n      this._rpcWebSocket.connect();\n      return;\n    }\n\n    const activeWebSocketGeneration = this._rpcWebSocketGeneration;\n    const isCurrentConnectionStillActive = () => {\n      return activeWebSocketGeneration === this._rpcWebSocketGeneration;\n    };\n\n    await Promise.all(\n      // Don't be tempted to change this to `Object.entries`. We call\n      // `_updateSubscriptions` recursively when processing the state,\n      // so it's important that we look up the *current* version of\n      // each subscription, every time we process a hash.\n      Object.keys(this._subscriptionsByHash).map(async hash => {\n        const subscription = this._subscriptionsByHash[hash];\n        if (subscription === undefined) {\n          // This entry has since been deleted. Skip.\n          return;\n        }\n        switch (subscription.state) {\n          case 'pending':\n          case 'unsubscribed':\n            if (subscription.callbacks.size === 0) {\n              /**\n               * You can end up here when:\n               *\n               * - a subscription has recently unsubscribed\n               *   without having new callbacks added to it\n               *   while the unsubscribe was in flight, or\n               * - when a pending subscription has its\n               *   listeners removed before a request was\n               *   sent to the server.\n               *\n               * Being that nobody is interested in this\n               * subscription any longer, delete it.\n               */\n              delete this._subscriptionsByHash[hash];\n              if (subscription.state === 'unsubscribed') {\n                delete this._subscriptionCallbacksByServerSubscriptionId[\n                  subscription.serverSubscriptionId\n                ];\n              }\n              await this._updateSubscriptions();\n              return;\n            }\n            await (async () => {\n              const {args, method} = subscription;\n              try {\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'subscribing',\n                });\n                const serverSubscriptionId: ServerSubscriptionId =\n                  (await this._rpcWebSocket.call(method, args)) as number;\n                this._setSubscription(hash, {\n                  ...subscription,\n                  serverSubscriptionId,\n                  state: 'subscribed',\n                });\n                this._subscriptionCallbacksByServerSubscriptionId[\n                  serverSubscriptionId\n                ] = subscription.callbacks;\n                await this._updateSubscriptions();\n              } catch (e) {\n                if (e instanceof Error) {\n                  console.error(\n                    `${method} error for argument`,\n                    args,\n                    e.message,\n                  );\n                }\n                if (!isCurrentConnectionStillActive()) {\n                  return;\n                }\n                // TODO: Maybe add an 'errored' state or a retry limit?\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'pending',\n                });\n                await this._updateSubscriptions();\n              }\n            })();\n            break;\n          case 'subscribed':\n            if (subscription.callbacks.size === 0) {\n              // By the time we successfully set up a subscription\n              // with the server, the client stopped caring about it.\n              // Tear it down now.\n              await (async () => {\n                const {serverSubscriptionId, unsubscribeMethod} = subscription;\n                if (\n                  this._subscriptionsAutoDisposedByRpc.has(serverSubscriptionId)\n                ) {\n                  /**\n                   * Special case.\n                   * If we're dealing with a subscription that has been auto-\n                   * disposed by the RPC, then we can skip the RPC call to\n                   * tear down the subscription here.\n                   *\n                   * NOTE: There is a proposal to eliminate this special case, here:\n                   * https://github.com/solana-labs/solana/issues/18892\n                   */\n                  this._subscriptionsAutoDisposedByRpc.delete(\n                    serverSubscriptionId,\n                  );\n                } else {\n                  this._setSubscription(hash, {\n                    ...subscription,\n                    state: 'unsubscribing',\n                  });\n                  this._setSubscription(hash, {\n                    ...subscription,\n                    state: 'unsubscribing',\n                  });\n                  try {\n                    await this._rpcWebSocket.call(unsubscribeMethod, [\n                      serverSubscriptionId,\n                    ]);\n                  } catch (e) {\n                    if (e instanceof Error) {\n                      console.error(`${unsubscribeMethod} error:`, e.message);\n                    }\n                    if (!isCurrentConnectionStillActive()) {\n                      return;\n                    }\n                    // TODO: Maybe add an 'errored' state or a retry limit?\n                    this._setSubscription(hash, {\n                      ...subscription,\n                      state: 'subscribed',\n                    });\n                    await this._updateSubscriptions();\n                    return;\n                  }\n                }\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'unsubscribed',\n                });\n                await this._updateSubscriptions();\n              })();\n            }\n            break;\n          case 'subscribing':\n          case 'unsubscribing':\n            break;\n        }\n      }),\n    );\n  }\n\n  /**\n   * @internal\n   */\n  private _handleServerNotification<\n    TCallback extends SubscriptionConfig['callback'],\n  >(\n    serverSubscriptionId: ServerSubscriptionId,\n    callbackArgs: Parameters<TCallback>,\n  ): void {\n    const callbacks =\n      this._subscriptionCallbacksByServerSubscriptionId[serverSubscriptionId];\n    if (callbacks === undefined) {\n      return;\n    }\n    callbacks.forEach(cb => {\n      try {\n        cb(\n          // I failed to find a way to convince TypeScript that `cb` is of type\n          // `TCallback` which is certainly compatible with `Parameters<TCallback>`.\n          // See https://github.com/microsoft/TypeScript/issues/47615\n          // @ts-ignore\n          ...callbackArgs,\n        );\n      } catch (e) {\n        console.error(e);\n      }\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnAccountNotification(notification: object) {\n    const {result, subscription} = create(\n      notification,\n      AccountNotificationResult,\n    );\n    this._handleServerNotification<AccountChangeCallback>(subscription, [\n      result.value,\n      result.context,\n    ]);\n  }\n\n  /**\n   * @internal\n   */\n  private _makeSubscription(\n    subscriptionConfig: SubscriptionConfig,\n    /**\n     * When preparing `args` for a call to `_makeSubscription`, be sure\n     * to carefully apply a default `commitment` property, if necessary.\n     *\n     * - If the user supplied a `commitment` use that.\n     * - Otherwise, if the `Connection::commitment` is set, use that.\n     * - Otherwise, set it to the RPC server default: `finalized`.\n     *\n     * This is extremely important to ensure that these two fundamentally\n     * identical subscriptions produce the same identifying hash:\n     *\n     * - A subscription made without specifying a commitment.\n     * - A subscription made where the commitment specified is the same\n     *   as the default applied to the subscription above.\n     *\n     * Example; these two subscriptions must produce the same hash:\n     *\n     * - An `accountSubscribe` subscription for `'PUBKEY'`\n     * - An `accountSubscribe` subscription for `'PUBKEY'` with commitment\n     *   `'finalized'`.\n     *\n     * See the 'making a subscription with defaulted params omitted' test\n     * in `connection-subscriptions.ts` for more.\n     */\n    args: IWSRequestParams,\n  ): ClientSubscriptionId {\n    const clientSubscriptionId = this._nextClientSubscriptionId++;\n    const hash = fastStableStringify(\n      [subscriptionConfig.method, args],\n      true /* isArrayProp */,\n    );\n    const existingSubscription = this._subscriptionsByHash[hash];\n    if (existingSubscription === undefined) {\n      this._subscriptionsByHash[hash] = {\n        ...subscriptionConfig,\n        args,\n        callbacks: new Set([subscriptionConfig.callback]),\n        state: 'pending',\n      };\n    } else {\n      existingSubscription.callbacks.add(subscriptionConfig.callback);\n    }\n    this._subscriptionHashByClientSubscriptionId[clientSubscriptionId] = hash;\n    this._subscriptionDisposeFunctionsByClientSubscriptionId[\n      clientSubscriptionId\n    ] = async () => {\n      delete this._subscriptionDisposeFunctionsByClientSubscriptionId[\n        clientSubscriptionId\n      ];\n      delete this._subscriptionHashByClientSubscriptionId[clientSubscriptionId];\n      const subscription = this._subscriptionsByHash[hash];\n      assert(\n        subscription !== undefined,\n        `Could not find a \\`Subscription\\` when tearing down client subscription #${clientSubscriptionId}`,\n      );\n      subscription.callbacks.delete(subscriptionConfig.callback);\n      await this._updateSubscriptions();\n    };\n    this._updateSubscriptions();\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked whenever the specified account changes\n   *\n   * @param publicKey Public key of the account to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @return subscription id\n   */\n  onAccountChange(\n    publicKey: PublicKey,\n    callback: AccountChangeCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n      'base64',\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'accountSubscribe',\n        unsubscribeMethod: 'accountUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeAccountChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'account change',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnProgramAccountNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      ProgramAccountNotificationResult,\n    );\n    this._handleServerNotification<ProgramAccountChangeCallback>(subscription, [\n      {\n        accountId: result.value.pubkey,\n        accountInfo: result.value.account,\n      },\n      result.context,\n    ]);\n  }\n\n  /**\n   * Register a callback to be invoked whenever accounts owned by the\n   * specified program change\n   *\n   * @param programId Public key of the program to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @param filters The program account filters to pass into the RPC method\n   * @return subscription id\n   */\n  onProgramAccountChange(\n    programId: PublicKey,\n    callback: ProgramAccountChangeCallback,\n    commitment?: Commitment,\n    filters?: GetProgramAccountsFilter[],\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n      'base64' /* encoding */,\n      filters ? {filters: filters} : undefined /* extra */,\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'programSubscribe',\n        unsubscribeMethod: 'programUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeProgramAccountChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'program account change',\n    );\n  }\n\n  /**\n   * Registers a callback to be invoked whenever logs are emitted.\n   */\n  onLogs(\n    filter: LogsFilter,\n    callback: LogsCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [typeof filter === 'object' ? {mentions: [filter.toString()]} : filter],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'logsSubscribe',\n        unsubscribeMethod: 'logsUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister a logs callback.\n   *\n   * @param id client subscription id to deregister.\n   */\n  async removeOnLogsListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'logs');\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnLogsNotification(notification: Object) {\n    const {result, subscription} = create(notification, LogsNotificationResult);\n    this._handleServerNotification<LogsCallback>(subscription, [\n      result.value,\n      result.context,\n    ]);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotNotification(notification: Object) {\n    const {result, subscription} = create(notification, SlotNotificationResult);\n    this._handleServerNotification<SlotChangeCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot changes\n   *\n   * @param callback Function to invoke whenever the slot changes\n   * @return subscription id\n   */\n  onSlotChange(callback: SlotChangeCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'slotSubscribe',\n        unsubscribeMethod: 'slotUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a slot notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSlotChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'slot change',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotUpdatesNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      SlotUpdateNotificationResult,\n    );\n    this._handleServerNotification<SlotUpdateCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot updates. {@link SlotUpdate}'s\n   * may be useful to track live progress of a cluster.\n   *\n   * @param callback Function to invoke whenever the slot updates\n   * @return subscription id\n   */\n  onSlotUpdate(callback: SlotUpdateCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'slotsUpdatesSubscribe',\n        unsubscribeMethod: 'slotsUpdatesUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a slot update notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSlotUpdateListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'slot update',\n    );\n  }\n\n  /**\n   * @internal\n   */\n\n  private async _unsubscribeClientSubscription(\n    clientSubscriptionId: ClientSubscriptionId,\n    subscriptionName: string,\n  ) {\n    const dispose =\n      this._subscriptionDisposeFunctionsByClientSubscriptionId[\n        clientSubscriptionId\n      ];\n    if (dispose) {\n      await dispose();\n    } else {\n      console.warn(\n        'Ignored unsubscribe request because an active subscription with id ' +\n          `\\`${clientSubscriptionId}\\` for '${subscriptionName}' events ` +\n          'could not be found.',\n      );\n    }\n  }\n\n  _buildArgs(\n    args: Array<any>,\n    override?: Commitment,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment || encoding || extra) {\n      let options: any = {};\n      if (encoding) {\n        options.encoding = encoding;\n      }\n      if (commitment) {\n        options.commitment = commitment;\n      }\n      if (extra) {\n        options = Object.assign(options, extra);\n      }\n      args.push(options);\n    }\n    return args;\n  }\n\n  /**\n   * @internal\n   */\n  _buildArgsAtLeastConfirmed(\n    args: Array<any>,\n    override?: Finality,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment && !['confirmed', 'finalized'].includes(commitment)) {\n      throw new Error(\n        'Using Connection with default commitment: `' +\n          this._commitment +\n          '`, but method requires at least `confirmed`',\n      );\n    }\n    return this._buildArgs(args, override, encoding, extra);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSignatureNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      SignatureNotificationResult,\n    );\n    if (result.value !== 'receivedSignature') {\n      /**\n       * Special case.\n       * After a signature is processed, RPCs automatically dispose of the\n       * subscription on the server side. We need to track which of these\n       * subscriptions have been disposed in such a way, so that we know\n       * whether the client is dealing with a not-yet-processed signature\n       * (in which case we must tear down the server subscription) or an\n       * already-processed signature (in which case the client can simply\n       * clear out the subscription locally without telling the server).\n       *\n       * NOTE: There is a proposal to eliminate this special case, here:\n       * https://github.com/solana-labs/solana/issues/18892\n       */\n      this._subscriptionsAutoDisposedByRpc.add(subscription);\n    }\n    this._handleServerNotification<SignatureSubscriptionCallback>(\n      subscription,\n      result.value === 'receivedSignature'\n        ? [{type: 'received'}, result.context]\n        : [{type: 'status', result: result.value}, result.context],\n    );\n  }\n\n  /**\n   * Register a callback to be invoked upon signature updates\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param commitment Specify the commitment level signature must reach before notification\n   * @return subscription id\n   */\n  onSignature(\n    signature: TransactionSignature,\n    callback: SignatureResultCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [signature],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n    );\n    const clientSubscriptionId = this._makeSubscription(\n      {\n        callback: (notification, context) => {\n          if (notification.type === 'status') {\n            callback(notification.result, context);\n            // Signatures subscriptions are auto-removed by the RPC service\n            // so no need to explicitly send an unsubscribe message.\n            try {\n              this.removeSignatureListener(clientSubscriptionId);\n              // eslint-disable-next-line no-empty\n            } catch (_err) {\n              // Already removed.\n            }\n          }\n        },\n        method: 'signatureSubscribe',\n        unsubscribeMethod: 'signatureUnsubscribe',\n      },\n      args,\n    );\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked when a transaction is\n   * received and/or processed.\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param options Enable received notifications and set the commitment\n   *   level that signature must reach before notification\n   * @return subscription id\n   */\n  onSignatureWithOptions(\n    signature: TransactionSignature,\n    callback: SignatureSubscriptionCallback,\n    options?: SignatureSubscriptionOptions,\n  ): ClientSubscriptionId {\n    const {commitment, ...extra} = {\n      ...options,\n      commitment:\n        (options && options.commitment) || this._commitment || 'finalized', // Apply connection/server default.\n    };\n    const args = this._buildArgs(\n      [signature],\n      commitment,\n      undefined /* encoding */,\n      extra,\n    );\n    const clientSubscriptionId = this._makeSubscription(\n      {\n        callback: (notification, context) => {\n          callback(notification, context);\n          // Signatures subscriptions are auto-removed by the RPC service\n          // so no need to explicitly send an unsubscribe message.\n          try {\n            this.removeSignatureListener(clientSubscriptionId);\n            // eslint-disable-next-line no-empty\n          } catch (_err) {\n            // Already removed.\n          }\n        },\n        method: 'signatureSubscribe',\n        unsubscribeMethod: 'signatureUnsubscribe',\n      },\n      args,\n    );\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Deregister a signature notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSignatureListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'signature result',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnRootNotification(notification: Object) {\n    const {result, subscription} = create(notification, RootNotificationResult);\n    this._handleServerNotification<RootChangeCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon root changes\n   *\n   * @param callback Function to invoke whenever the root changes\n   * @return subscription id\n   */\n  onRootChange(callback: RootChangeCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'rootSubscribe',\n        unsubscribeMethod: 'rootUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a root notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeRootChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'root change',\n    );\n  }\n}\n","import {generateKeypair, getPublicKey, Ed25519Keypair} from './utils/ed25519';\nimport {PublicKey} from './publickey';\n\n/**\n * Keypair signer interface\n */\nexport interface Signer {\n  publicKey: PublicKey;\n  secretKey: Uint8Array;\n}\n\n/**\n * An account keypair used for signing transactions.\n */\nexport class Keypair {\n  private _keypair: Ed25519Keypair;\n\n  /**\n   * Create a new keypair instance.\n   * Generate random keypair if no {@link Ed25519Keypair} is provided.\n   *\n   * @param {Ed25519Keypair} keypair ed25519 keypair\n   */\n  constructor(keypair?: Ed25519Keypair) {\n    this._keypair = keypair ?? generateKeypair();\n  }\n\n  /**\n   * Generate a new random keypair\n   *\n   * @returns {Keypair} Keypair\n   */\n  static generate(): Keypair {\n    return new Keypair(generateKeypair());\n  }\n\n  /**\n   * Create a keypair from a raw secret key byte array.\n   *\n   * This method should only be used to recreate a keypair from a previously\n   * generated secret key. Generating keypairs from a random seed should be done\n   * with the {@link Keypair.fromSeed} method.\n   *\n   * @throws error if the provided secret key is invalid and validation is not skipped.\n   *\n   * @param secretKey secret key byte array\n   * @param options skip secret key validation\n   *\n   * @returns {Keypair} Keypair\n   */\n  static fromSecretKey(\n    secretKey: Uint8Array,\n    options?: {skipValidation?: boolean},\n  ): Keypair {\n    if (secretKey.byteLength !== 64) {\n      throw new Error('bad secret key size');\n    }\n    const publicKey = secretKey.slice(32, 64);\n    if (!options || !options.skipValidation) {\n      const privateScalar = secretKey.slice(0, 32);\n      const computedPublicKey = getPublicKey(privateScalar);\n      for (let ii = 0; ii < 32; ii++) {\n        if (publicKey[ii] !== computedPublicKey[ii]) {\n          throw new Error('provided secretKey is invalid');\n        }\n      }\n    }\n    return new Keypair({publicKey, secretKey});\n  }\n\n  /**\n   * Generate a keypair from a 32 byte seed.\n   *\n   * @param seed seed byte array\n   *\n   * @returns {Keypair} Keypair\n   */\n  static fromSeed(seed: Uint8Array): Keypair {\n    const publicKey = getPublicKey(seed);\n    const secretKey = new Uint8Array(64);\n    secretKey.set(seed);\n    secretKey.set(publicKey, 32);\n    return new Keypair({publicKey, secretKey});\n  }\n\n  /**\n   * The public key for this keypair\n   *\n   * @returns {PublicKey} PublicKey\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The raw secret key for this keypair\n   * @returns {Uint8Array} Secret key in an array of Uint8 bytes\n   */\n  get secretKey(): Uint8Array {\n    return new Uint8Array(this._keypair.secretKey);\n  }\n}\n","import {toBufferLE} from 'bigint-buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from '../../layout';\nimport {PublicKey} from '../../publickey';\nimport * as bigintLayout from '../../utils/bigint';\nimport {SystemProgram} from '../system';\nimport {TransactionInstruction} from '../../transaction';\nimport {decodeData, encodeData, IInstructionInputData} from '../../instruction';\n\nexport * from './state';\n\nexport type CreateLookupTableParams = {\n  /** Account used to derive and control the new address lookup table. */\n  authority: PublicKey;\n  /** Account that will fund the new address lookup table. */\n  payer: PublicKey;\n  /** A recent slot must be used in the derivation path for each initialized table. */\n  recentSlot: bigint | number;\n};\n\nexport type FreezeLookupTableParams = {\n  /** Address lookup table account to freeze. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n};\n\nexport type ExtendLookupTableParams = {\n  /** Address lookup table account to extend. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n  /** Account that will fund the table reallocation.\n   * Not required if the reallocation has already been funded. */\n  payer?: PublicKey;\n  /** List of Public Keys to be added to the lookup table. */\n  addresses: Array<PublicKey>;\n};\n\nexport type DeactivateLookupTableParams = {\n  /** Address lookup table account to deactivate. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n};\n\nexport type CloseLookupTableParams = {\n  /** Address lookup table account to close. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n  /** Recipient of closed account lamports. */\n  recipient: PublicKey;\n};\n\n/**\n * An enumeration of valid LookupTableInstructionType's\n */\nexport type LookupTableInstructionType =\n  | 'CreateLookupTable'\n  | 'ExtendLookupTable'\n  | 'CloseLookupTable'\n  | 'FreezeLookupTable'\n  | 'DeactivateLookupTable';\n\ntype LookupTableInstructionInputData = {\n  CreateLookupTable: IInstructionInputData &\n    Readonly<{\n      recentSlot: bigint;\n      bumpSeed: number;\n    }>;\n  FreezeLookupTable: IInstructionInputData;\n  ExtendLookupTable: IInstructionInputData &\n    Readonly<{\n      numberOfAddresses: bigint;\n      addresses: Array<Uint8Array>;\n    }>;\n  DeactivateLookupTable: IInstructionInputData;\n  CloseLookupTable: IInstructionInputData;\n};\n\n/**\n * An enumeration of valid address lookup table InstructionType's\n * @internal\n */\nexport const LOOKUP_TABLE_INSTRUCTION_LAYOUTS = Object.freeze({\n  CreateLookupTable: {\n    index: 0,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['CreateLookupTable']\n    >([\n      BufferLayout.u32('instruction'),\n      bigintLayout.u64('recentSlot'),\n      BufferLayout.u8('bumpSeed'),\n    ]),\n  },\n  FreezeLookupTable: {\n    index: 1,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['FreezeLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n  ExtendLookupTable: {\n    index: 2,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['ExtendLookupTable']\n    >([\n      BufferLayout.u32('instruction'),\n      bigintLayout.u64(),\n      BufferLayout.seq(\n        Layout.publicKey(),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'addresses',\n      ),\n    ]),\n  },\n  DeactivateLookupTable: {\n    index: 3,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['DeactivateLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n  CloseLookupTable: {\n    index: 4,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['CloseLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n});\n\nexport class AddressLookupTableInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): LookupTableInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const index = instructionTypeLayout.decode(instruction.data);\n\n    let type: LookupTableInstructionType | undefined;\n    for (const [layoutType, layout] of Object.entries(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS,\n    )) {\n      if ((layout as any).index == index) {\n        type = layoutType as LookupTableInstructionType;\n        break;\n      }\n    }\n    if (!type) {\n      throw new Error(\n        'Invalid Instruction. Should be a LookupTable Instruction',\n      );\n    }\n    return type;\n  }\n\n  static decodeCreateLookupTable(\n    instruction: TransactionInstruction,\n  ): CreateLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 4);\n\n    const {recentSlot} = decodeData(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable,\n      instruction.data,\n    );\n\n    return {\n      authority: instruction.keys[1].pubkey,\n      payer: instruction.keys[2].pubkey,\n      recentSlot: Number(recentSlot),\n    };\n  }\n\n  static decodeExtendLookupTable(\n    instruction: TransactionInstruction,\n  ): ExtendLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    if (instruction.keys.length < 2) {\n      throw new Error(\n        `invalid instruction; found ${instruction.keys.length} keys, expected at least 2`,\n      );\n    }\n\n    const {addresses} = decodeData(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable,\n      instruction.data,\n    );\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      payer:\n        instruction.keys.length > 2 ? instruction.keys[2].pubkey : undefined,\n      addresses: addresses.map(buffer => new PublicKey(buffer)),\n    };\n  }\n\n  static decodeCloseLookupTable(\n    instruction: TransactionInstruction,\n  ): CloseLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 3);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      recipient: instruction.keys[2].pubkey,\n    };\n  }\n\n  static decodeFreezeLookupTable(\n    instruction: TransactionInstruction,\n  ): FreezeLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n    };\n  }\n\n  static decodeDeactivateLookupTable(\n    instruction: TransactionInstruction,\n  ): DeactivateLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(AddressLookupTableProgram.programId)) {\n      throw new Error(\n        'invalid instruction; programId is not AddressLookupTable Program',\n      );\n    }\n  }\n  /**\n   * @internal\n   */\n  static checkKeysLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\nexport class AddressLookupTableProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  static programId: PublicKey = new PublicKey(\n    'AddressLookupTab1e1111111111111111111111111',\n  );\n\n  static createLookupTable(params: CreateLookupTableParams) {\n    const [lookupTableAddress, bumpSeed] = PublicKey.findProgramAddressSync(\n      [params.authority.toBuffer(), toBufferLE(BigInt(params.recentSlot), 8)],\n      this.programId,\n    );\n\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable;\n    const data = encodeData(type, {\n      recentSlot: BigInt(params.recentSlot),\n      bumpSeed: bumpSeed,\n    });\n\n    const keys = [\n      {\n        pubkey: lookupTableAddress,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: params.payer,\n        isSigner: true,\n        isWritable: true,\n      },\n      {\n        pubkey: SystemProgram.programId,\n        isSigner: false,\n        isWritable: false,\n      },\n    ];\n\n    return [\n      new TransactionInstruction({\n        programId: this.programId,\n        keys: keys,\n        data: data,\n      }),\n      lookupTableAddress,\n    ] as [TransactionInstruction, PublicKey];\n  }\n\n  static freezeLookupTable(params: FreezeLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.FreezeLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static extendLookupTable(params: ExtendLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable;\n    const data = encodeData(type, {\n      addresses: params.addresses.map(addr => addr.toBytes()),\n    });\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    if (params.payer) {\n      keys.push(\n        {\n          pubkey: params.payer,\n          isSigner: true,\n          isWritable: true,\n        },\n        {\n          pubkey: SystemProgram.programId,\n          isSigner: false,\n          isWritable: false,\n        },\n      );\n    }\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static deactivateLookupTable(params: DeactivateLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.DeactivateLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static closeLookupTable(params: CloseLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CloseLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: params.recipient,\n        isSigner: false,\n        isWritable: true,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport {u64} from '../utils/bigint';\n\n/**\n * Compute Budget Instruction class\n */\nexport class ComputeBudgetInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a compute budget instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): ComputeBudgetInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u8('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: ComputeBudgetInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS,\n    )) {\n      if (layout.index == typeIndex) {\n        type = ixType as ComputeBudgetInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error(\n        'Instruction type incorrect; not a ComputeBudgetInstruction',\n      );\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode request units compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestUnits(\n    instruction: TransactionInstruction,\n  ): RequestUnitsParams {\n    this.checkProgramId(instruction.programId);\n    const {units, additionalFee} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits,\n      instruction.data,\n    );\n    return {units, additionalFee};\n  }\n\n  /**\n   * Decode request heap frame compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestHeapFrame(\n    instruction: TransactionInstruction,\n  ): RequestHeapFrameParams {\n    this.checkProgramId(instruction.programId);\n    const {bytes} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame,\n      instruction.data,\n    );\n    return {bytes};\n  }\n\n  /**\n   * Decode set compute unit limit compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitLimit(\n    instruction: TransactionInstruction,\n  ): SetComputeUnitLimitParams {\n    this.checkProgramId(instruction.programId);\n    const {units} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit,\n      instruction.data,\n    );\n    return {units};\n  }\n\n  /**\n   * Decode set compute unit price compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitPrice(\n    instruction: TransactionInstruction,\n  ): SetComputeUnitPriceParams {\n    this.checkProgramId(instruction.programId);\n    const {microLamports} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice,\n      instruction.data,\n    );\n    return {microLamports};\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(ComputeBudgetProgram.programId)) {\n      throw new Error(\n        'invalid instruction; programId is not ComputeBudgetProgram',\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid ComputeBudgetInstructionType's\n */\nexport type ComputeBudgetInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof ComputeBudgetInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'RequestUnits'\n  | 'RequestHeapFrame'\n  | 'SetComputeUnitLimit'\n  | 'SetComputeUnitPrice';\n\ntype ComputeBudgetInstructionInputData = {\n  RequestUnits: IInstructionInputData & Readonly<RequestUnitsParams>;\n  RequestHeapFrame: IInstructionInputData & Readonly<RequestHeapFrameParams>;\n  SetComputeUnitLimit: IInstructionInputData &\n    Readonly<SetComputeUnitLimitParams>;\n  SetComputeUnitPrice: IInstructionInputData &\n    Readonly<SetComputeUnitPriceParams>;\n};\n\n/**\n * Request units instruction params\n */\nexport interface RequestUnitsParams {\n  /** Units to request for transaction-wide compute */\n  units: number;\n  /** Prioritization fee lamports */\n  additionalFee: number;\n}\n\n/**\n * Request heap frame instruction params\n */\nexport type RequestHeapFrameParams = {\n  /** Requested transaction-wide program heap size in bytes. Must be multiple of 1024. Applies to each program, including CPIs. */\n  bytes: number;\n};\n\n/**\n * Set compute unit limit instruction params\n */\nexport interface SetComputeUnitLimitParams {\n  /** Transaction-wide compute unit limit */\n  units: number;\n}\n\n/**\n * Set compute unit price instruction params\n */\nexport interface SetComputeUnitPriceParams {\n  /** Transaction compute unit price used for prioritization fees */\n  microLamports: number | bigint;\n}\n\n/**\n * An enumeration of valid ComputeBudget InstructionType's\n * @internal\n */\nexport const COMPUTE_BUDGET_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in ComputeBudgetInstructionType]: InstructionType<\n    ComputeBudgetInstructionInputData[Instruction]\n  >;\n}>({\n  RequestUnits: {\n    index: 0,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['RequestUnits']\n    >([\n      BufferLayout.u8('instruction'),\n      BufferLayout.u32('units'),\n      BufferLayout.u32('additionalFee'),\n    ]),\n  },\n  RequestHeapFrame: {\n    index: 1,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['RequestHeapFrame']\n    >([BufferLayout.u8('instruction'), BufferLayout.u32('bytes')]),\n  },\n  SetComputeUnitLimit: {\n    index: 2,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['SetComputeUnitLimit']\n    >([BufferLayout.u8('instruction'), BufferLayout.u32('units')]),\n  },\n  SetComputeUnitPrice: {\n    index: 3,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['SetComputeUnitPrice']\n    >([BufferLayout.u8('instruction'), u64('microLamports')]),\n  },\n});\n\n/**\n * Factory class for transaction instructions to interact with the Compute Budget program\n */\nexport class ComputeBudgetProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Compute Budget program\n   */\n  static programId: PublicKey = new PublicKey(\n    'ComputeBudget111111111111111111111111111111',\n  );\n\n  /**\n   * @deprecated Instead, call {@link setComputeUnitLimit} and/or {@link setComputeUnitPrice}\n   */\n  static requestUnits(params: RequestUnitsParams): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static requestHeapFrame(\n    params: RequestHeapFrameParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static setComputeUnitLimit(\n    params: SetComputeUnitLimitParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static setComputeUnitPrice(\n    params: SetComputeUnitPriceParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice;\n    const data = encodeData(type, {\n      microLamports: BigInt(params.microLamports),\n    });\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {Keypair} from '../keypair';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {sign} from '../utils/ed25519';\n\nconst PRIVATE_KEY_BYTES = 64;\nconst PUBLIC_KEY_BYTES = 32;\nconst SIGNATURE_BYTES = 64;\n\n/**\n * Params for creating an ed25519 instruction using a public key\n */\nexport type CreateEd25519InstructionWithPublicKeyParams = {\n  publicKey: Uint8Array;\n  message: Uint8Array;\n  signature: Uint8Array;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an ed25519 instruction using a private key\n */\nexport type CreateEd25519InstructionWithPrivateKeyParams = {\n  privateKey: Uint8Array;\n  message: Uint8Array;\n  instructionIndex?: number;\n};\n\nconst ED25519_INSTRUCTION_LAYOUT = BufferLayout.struct<\n  Readonly<{\n    messageDataOffset: number;\n    messageDataSize: number;\n    messageInstructionIndex: number;\n    numSignatures: number;\n    padding: number;\n    publicKeyInstructionIndex: number;\n    publicKeyOffset: number;\n    signatureInstructionIndex: number;\n    signatureOffset: number;\n  }>\n>([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u8('padding'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u16('signatureInstructionIndex'),\n  BufferLayout.u16('publicKeyOffset'),\n  BufferLayout.u16('publicKeyInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u16('messageInstructionIndex'),\n]);\n\nexport class Ed25519Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the ed25519 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Ed25519SigVerify111111111111111111111111111',\n  );\n\n  /**\n   * Create an ed25519 instruction with a public key and signature. The\n   * public key must be a buffer that is 32 bytes long, and the signature\n   * must be a buffer of 64 bytes.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateEd25519InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, instructionIndex} = params;\n\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public Key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    assert(\n      signature.length === SIGNATURE_BYTES,\n      `Signature must be ${SIGNATURE_BYTES} bytes but received ${signature.length} bytes`,\n    );\n\n    const publicKeyOffset = ED25519_INSTRUCTION_LAYOUT.span;\n    const signatureOffset = publicKeyOffset + publicKey.length;\n    const messageDataOffset = signatureOffset + signature.length;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(messageDataOffset + message.length);\n\n    const index =\n      instructionIndex == null\n        ? 0xffff // An index of `u16::MAX` makes it default to the current instruction.\n        : instructionIndex;\n\n    ED25519_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        padding: 0,\n        signatureOffset,\n        signatureInstructionIndex: index,\n        publicKeyOffset,\n        publicKeyInstructionIndex: index,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: index,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(publicKey, publicKeyOffset);\n    instructionData.fill(signature, signatureOffset);\n    instructionData.fill(message, messageDataOffset);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Ed25519Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an ed25519 instruction with a private key. The private key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateEd25519InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey, message, instructionIndex} = params;\n\n    assert(\n      privateKey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${privateKey.length} bytes`,\n    );\n\n    try {\n      const keypair = Keypair.fromSecretKey(privateKey);\n      const publicKey = keypair.publicKey.toBytes();\n      const signature = sign(message, keypair.secretKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import {secp256k1} from '@noble/curves/secp256k1';\n\nexport const ecdsaSign = (\n  msgHash: Parameters<typeof secp256k1.sign>[0],\n  privKey: Parameters<typeof secp256k1.sign>[1],\n) => {\n  const signature = secp256k1.sign(msgHash, privKey);\n  return [signature.toCompactRawBytes(), signature.recovery!] as const;\n};\nexport const isValidPrivateKey = secp256k1.utils.isValidPrivateKey;\nexport const publicKeyCreate = secp256k1.getPublicKey;\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport {keccak_256} from '@noble/hashes/sha3';\n\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {publicKeyCreate, ecdsaSign} from '../utils/secp256k1';\nimport {toBuffer} from '../utils/to-buffer';\n\nconst PRIVATE_KEY_BYTES = 32;\nconst ETHEREUM_ADDRESS_BYTES = 20;\nconst PUBLIC_KEY_BYTES = 64;\nconst SIGNATURE_OFFSETS_SERIALIZED_SIZE = 11;\n\n/**\n * Params for creating an secp256k1 instruction using a public key\n */\nexport type CreateSecp256k1InstructionWithPublicKeyParams = {\n  publicKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using an Ethereum address\n */\nexport type CreateSecp256k1InstructionWithEthAddressParams = {\n  ethAddress: Buffer | Uint8Array | Array<number> | string;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using a private key\n */\nexport type CreateSecp256k1InstructionWithPrivateKeyParams = {\n  privateKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  instructionIndex?: number;\n};\n\nconst SECP256K1_INSTRUCTION_LAYOUT = BufferLayout.struct<\n  Readonly<{\n    ethAddress: Uint8Array;\n    ethAddressInstructionIndex: number;\n    ethAddressOffset: number;\n    messageDataOffset: number;\n    messageDataSize: number;\n    messageInstructionIndex: number;\n    numSignatures: number;\n    recoveryId: number;\n    signature: Uint8Array;\n    signatureInstructionIndex: number;\n    signatureOffset: number;\n  }>\n>([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u8('signatureInstructionIndex'),\n  BufferLayout.u16('ethAddressOffset'),\n  BufferLayout.u8('ethAddressInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u8('messageInstructionIndex'),\n  BufferLayout.blob(20, 'ethAddress'),\n  BufferLayout.blob(64, 'signature'),\n  BufferLayout.u8('recoveryId'),\n]);\n\nexport class Secp256k1Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the secp256k1 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'KeccakSecp256k11111111111111111111111111111',\n  );\n\n  /**\n   * Construct an Ethereum address from a secp256k1 public key buffer.\n   * @param {Buffer} publicKey a 64 byte secp256k1 public key buffer\n   */\n  static publicKeyToEthAddress(\n    publicKey: Buffer | Uint8Array | Array<number>,\n  ): Buffer {\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    try {\n      return Buffer.from(keccak_256(toBuffer(publicKey))).slice(\n        -ETHEREUM_ADDRESS_BYTES,\n      );\n    } catch (error) {\n      throw new Error(`Error constructing Ethereum address: ${error}`);\n    }\n  }\n\n  /**\n   * Create an secp256k1 instruction with a public key. The public key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateSecp256k1InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, recoveryId, instructionIndex} =\n      params;\n    return Secp256k1Program.createInstructionWithEthAddress({\n      ethAddress: Secp256k1Program.publicKeyToEthAddress(publicKey),\n      message,\n      signature,\n      recoveryId,\n      instructionIndex,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with an Ethereum address. The address\n   * must be a hex string or a buffer that is 20 bytes long.\n   */\n  static createInstructionWithEthAddress(\n    params: CreateSecp256k1InstructionWithEthAddressParams,\n  ): TransactionInstruction {\n    const {\n      ethAddress: rawAddress,\n      message,\n      signature,\n      recoveryId,\n      instructionIndex = 0,\n    } = params;\n\n    let ethAddress;\n    if (typeof rawAddress === 'string') {\n      if (rawAddress.startsWith('0x')) {\n        ethAddress = Buffer.from(rawAddress.substr(2), 'hex');\n      } else {\n        ethAddress = Buffer.from(rawAddress, 'hex');\n      }\n    } else {\n      ethAddress = rawAddress;\n    }\n\n    assert(\n      ethAddress.length === ETHEREUM_ADDRESS_BYTES,\n      `Address must be ${ETHEREUM_ADDRESS_BYTES} bytes but received ${ethAddress.length} bytes`,\n    );\n\n    const dataStart = 1 + SIGNATURE_OFFSETS_SERIALIZED_SIZE;\n    const ethAddressOffset = dataStart;\n    const signatureOffset = dataStart + ethAddress.length;\n    const messageDataOffset = signatureOffset + signature.length + 1;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(\n      SECP256K1_INSTRUCTION_LAYOUT.span + message.length,\n    );\n\n    SECP256K1_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        signatureOffset,\n        signatureInstructionIndex: instructionIndex,\n        ethAddressOffset,\n        ethAddressInstructionIndex: instructionIndex,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: instructionIndex,\n        signature: toBuffer(signature),\n        ethAddress: toBuffer(ethAddress),\n        recoveryId,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(toBuffer(message), SECP256K1_INSTRUCTION_LAYOUT.span);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Secp256k1Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with a private key. The private key\n   * must be a buffer that is 32 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateSecp256k1InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey: pkey, message, instructionIndex} = params;\n\n    assert(\n      pkey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${pkey.length} bytes`,\n    );\n\n    try {\n      const privateKey = toBuffer(pkey);\n      const publicKey = publicKeyCreate(\n        privateKey,\n        false /* isCompressed */,\n      ).slice(1); // throw away leading byte\n      const messageHash = Buffer.from(keccak_256(toBuffer(message)));\n      const [signature, recoveryId] = ecdsaSign(messageHash, privateKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        recoveryId,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {PublicKey} from '../publickey';\nimport {SystemProgram} from './system';\nimport {\n  SYSVAR_CLOCK_PUBKEY,\n  SYSVAR_RENT_PUBKEY,\n  SYSVAR_STAKE_HISTORY_PUBKEY,\n} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\n\n/**\n * Address of the stake config account which configures the rate\n * of stake warmup and cooldown as well as the slashing penalty.\n */\nexport const STAKE_CONFIG_ID = new PublicKey(\n  'StakeConfig11111111111111111111111111111111',\n);\n\n/**\n * Stake account authority info\n */\nexport class Authorized {\n  /** stake authority */\n  staker: PublicKey;\n  /** withdraw authority */\n  withdrawer: PublicKey;\n\n  /**\n   * Create a new Authorized object\n   * @param staker the stake authority\n   * @param withdrawer the withdraw authority\n   */\n  constructor(staker: PublicKey, withdrawer: PublicKey) {\n    this.staker = staker;\n    this.withdrawer = withdrawer;\n  }\n}\n\ntype AuthorizedRaw = Readonly<{\n  staker: Uint8Array;\n  withdrawer: Uint8Array;\n}>;\n\n/**\n * Stake account lockup info\n */\nexport class Lockup {\n  /** Unix timestamp of lockup expiration */\n  unixTimestamp: number;\n  /** Epoch of lockup expiration */\n  epoch: number;\n  /** Lockup custodian authority */\n  custodian: PublicKey;\n\n  /**\n   * Create a new Lockup object\n   */\n  constructor(unixTimestamp: number, epoch: number, custodian: PublicKey) {\n    this.unixTimestamp = unixTimestamp;\n    this.epoch = epoch;\n    this.custodian = custodian;\n  }\n\n  /**\n   * Default, inactive Lockup value\n   */\n  static default: Lockup = new Lockup(0, 0, PublicKey.default);\n}\n\ntype LockupRaw = Readonly<{\n  custodian: Uint8Array;\n  epoch: number;\n  unixTimestamp: number;\n}>;\n\n/**\n * Create stake account transaction params\n */\nexport type CreateStakeAccountParams = {\n  /** Address of the account which will fund creation */\n  fromPubkey: PublicKey;\n  /** Address of the new stake account */\n  stakePubkey: PublicKey;\n  /** Authorities of the new stake account */\n  authorized: Authorized;\n  /** Lockup of the new stake account */\n  lockup?: Lockup;\n  /** Funding amount */\n  lamports: number;\n};\n\n/**\n * Create stake account with seed transaction params\n */\nexport type CreateStakeAccountWithSeedParams = {\n  fromPubkey: PublicKey;\n  stakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  authorized: Authorized;\n  lockup?: Lockup;\n  lamports: number;\n};\n\n/**\n * Initialize stake instruction params\n */\nexport type InitializeStakeParams = {\n  stakePubkey: PublicKey;\n  authorized: Authorized;\n  lockup?: Lockup;\n};\n\n/**\n * Delegate stake instruction params\n */\nexport type DelegateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  votePubkey: PublicKey;\n};\n\n/**\n * Authorize stake instruction params\n */\nexport type AuthorizeStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Authorize stake instruction params using a derived key\n */\nexport type AuthorizeWithSeedStakeParams = {\n  stakePubkey: PublicKey;\n  authorityBase: PublicKey;\n  authoritySeed: string;\n  authorityOwner: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Split stake instruction params\n */\nexport type SplitStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  lamports: number;\n};\n\n/**\n * Split with seed transaction params\n */\nexport type SplitStakeWithSeedParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  lamports: number;\n};\n\n/**\n * Withdraw stake instruction params\n */\nexport type WithdrawStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  toPubkey: PublicKey;\n  lamports: number;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Deactivate stake instruction params\n */\nexport type DeactivateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Merge stake instruction params\n */\nexport type MergeStakeParams = {\n  stakePubkey: PublicKey;\n  sourceStakePubKey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Stake Instruction class\n */\nexport class StakeInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a stake instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): StakeInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: StakeInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(STAKE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as StakeInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a StakeInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a initialize stake instruction and retrieve the instruction params.\n   */\n  static decodeInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized, lockup} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Initialize,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorized: new Authorized(\n        new PublicKey(authorized.staker),\n        new PublicKey(authorized.withdrawer),\n      ),\n      lockup: new Lockup(\n        lockup.unixTimestamp,\n        lockup.epoch,\n        new PublicKey(lockup.custodian),\n      ),\n    };\n  }\n\n  /**\n   * Decode a delegate stake instruction and retrieve the instruction params.\n   */\n  static decodeDelegate(\n    instruction: TransactionInstruction,\n  ): DelegateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 6);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Delegate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      votePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[5].pubkey,\n    };\n  }\n\n  /**\n   * Decode an authorize stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {newAuthorized, stakeAuthorizationType} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    const o: AuthorizeStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode an authorize-with-seed stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeWithSeedStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {\n      newAuthorized,\n      stakeAuthorizationType,\n      authoritySeed,\n      authorityOwner,\n    } = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    const o: AuthorizeWithSeedStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorityBase: instruction.keys[1].pubkey,\n      authoritySeed: authoritySeed,\n      authorityOwner: new PublicKey(authorityOwner),\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a split stake instruction and retrieve the instruction params.\n   */\n  static decodeSplit(instruction: TransactionInstruction): SplitStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Split,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      splitStakePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a merge stake instruction and retrieve the instruction params.\n   */\n  static decodeMerge(instruction: TransactionInstruction): MergeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Merge, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      sourceStakePubKey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n    };\n  }\n\n  /**\n   * Decode a withdraw stake instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    const o: WithdrawStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n    if (instruction.keys.length > 5) {\n      o.custodianPubkey = instruction.keys[5].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a deactivate stake instruction and retrieve the instruction params.\n   */\n  static decodeDeactivate(\n    instruction: TransactionInstruction,\n  ): DeactivateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Deactivate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(StakeProgram.programId)) {\n      throw new Error('invalid instruction; programId is not StakeProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid StakeInstructionType's\n */\nexport type StakeInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof StakeInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'Authorize'\n  | 'AuthorizeWithSeed'\n  | 'Deactivate'\n  | 'Delegate'\n  | 'Initialize'\n  | 'Merge'\n  | 'Split'\n  | 'Withdraw';\n\ntype StakeInstructionInputData = {\n  Authorize: IInstructionInputData &\n    Readonly<{\n      newAuthorized: Uint8Array;\n      stakeAuthorizationType: number;\n    }>;\n  AuthorizeWithSeed: IInstructionInputData &\n    Readonly<{\n      authorityOwner: Uint8Array;\n      authoritySeed: string;\n      instruction: number;\n      newAuthorized: Uint8Array;\n      stakeAuthorizationType: number;\n    }>;\n  Deactivate: IInstructionInputData;\n  Delegate: IInstructionInputData;\n  Initialize: IInstructionInputData &\n    Readonly<{\n      authorized: AuthorizedRaw;\n      lockup: LockupRaw;\n    }>;\n  Merge: IInstructionInputData;\n  Split: IInstructionInputData &\n    Readonly<{\n      lamports: number;\n    }>;\n  Withdraw: IInstructionInputData &\n    Readonly<{\n      lamports: number;\n    }>;\n};\n\n/**\n * An enumeration of valid stake InstructionType's\n * @internal\n */\nexport const STAKE_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in StakeInstructionType]: InstructionType<\n    StakeInstructionInputData[Instruction]\n  >;\n}>({\n  Initialize: {\n    index: 0,\n    layout: BufferLayout.struct<StakeInstructionInputData['Initialize']>([\n      BufferLayout.u32('instruction'),\n      Layout.authorized(),\n      Layout.lockup(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct<StakeInstructionInputData['Authorize']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('stakeAuthorizationType'),\n    ]),\n  },\n  Delegate: {\n    index: 2,\n    layout: BufferLayout.struct<StakeInstructionInputData['Delegate']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  Split: {\n    index: 3,\n    layout: BufferLayout.struct<StakeInstructionInputData['Split']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Withdraw: {\n    index: 4,\n    layout: BufferLayout.struct<StakeInstructionInputData['Withdraw']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Deactivate: {\n    index: 5,\n    layout: BufferLayout.struct<StakeInstructionInputData['Deactivate']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  Merge: {\n    index: 7,\n    layout: BufferLayout.struct<StakeInstructionInputData['Merge']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  AuthorizeWithSeed: {\n    index: 8,\n    layout: BufferLayout.struct<StakeInstructionInputData['AuthorizeWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        Layout.publicKey('newAuthorized'),\n        BufferLayout.u32('stakeAuthorizationType'),\n        Layout.rustString('authoritySeed'),\n        Layout.publicKey('authorityOwner'),\n      ],\n    ),\n  },\n});\n\n/**\n * Stake authorization type\n */\nexport type StakeAuthorizationType = {\n  /** The Stake Authorization index (from solana-stake-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid StakeAuthorizationLayout's\n */\nexport const StakeAuthorizationLayout = Object.freeze({\n  Staker: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Stake program\n */\nexport class StakeProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Stake program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Stake11111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Stake account\n   *\n   * This is generated from the solana-stake-program StakeState struct as\n   * `StakeState::size_of()`:\n   * https://docs.rs/solana-stake-program/latest/solana_stake_program/stake_state/enum.StakeState.html\n   */\n  static space: number = 200;\n\n  /**\n   * Generate an Initialize instruction to add to a Stake Create transaction\n   */\n  static initialize(params: InitializeStakeParams): TransactionInstruction {\n    const {stakePubkey, authorized, lockup: maybeLockup} = params;\n    const lockup: Lockup = maybeLockup || Lockup.default;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Initialize;\n    const data = encodeData(type, {\n      authorized: {\n        staker: toBuffer(authorized.staker.toBuffer()),\n        withdrawer: toBuffer(authorized.withdrawer.toBuffer()),\n      },\n      lockup: {\n        unixTimestamp: lockup.unixTimestamp,\n        epoch: lockup.epoch,\n        custodian: toBuffer(lockup.custodian.toBuffer()),\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account at\n   *   an address generated with `from`, a seed, and the Stake programId\n   */\n  static createAccountWithSeed(\n    params: CreateStakeAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccountWithSeed({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        basePubkey: params.basePubkey,\n        seed: params.seed,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account\n   */\n  static createAccount(params: CreateStakeAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that delegates Stake tokens to a validator\n   * Vote PublicKey. This transaction can also be used to redelegate Stake\n   * to a new validator Vote PublicKey.\n   */\n  static delegate(params: DelegateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, votePubkey} = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Delegate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: votePubkey, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: STAKE_CONFIG_ID, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorize(params: AuthorizeStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: true},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: false,\n        isWritable: false,\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorizeWithSeed(params: AuthorizeWithSeedStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorityBase,\n      authoritySeed,\n      authorityOwner,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n      authoritySeed: authoritySeed,\n      authorityOwner: toBuffer(authorityOwner.toBuffer()),\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: authorityBase, isSigner: true, isWritable: false},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: false,\n        isWritable: false,\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  static splitInstruction(params: SplitStakeParams): TransactionInstruction {\n    const {stakePubkey, authorizedPubkey, splitStakePubkey, lamports} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Split;\n    const data = encodeData(type, {lamports});\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: splitStakePubkey, isSigner: false, isWritable: true},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another stake account\n   */\n  static split(params: SplitStakeParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.authorizedPubkey,\n        newAccountPubkey: params.splitStakePubkey,\n        lamports: 0,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    return transaction.add(this.splitInstruction(params));\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another account\n   * derived from a base public key and seed\n   */\n  static splitWithSeed(params: SplitStakeWithSeedParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      basePubkey,\n      seed,\n      lamports,\n    } = params;\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.allocate({\n        accountPubkey: splitStakePubkey,\n        basePubkey,\n        seed,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    return transaction.add(\n      this.splitInstruction({\n        stakePubkey,\n        authorizedPubkey,\n        splitStakePubkey,\n        lamports,\n      }),\n    );\n  }\n\n  /**\n   * Generate a Transaction that merges Stake accounts.\n   */\n  static merge(params: MergeStakeParams): Transaction {\n    const {stakePubkey, sourceStakePubKey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Merge;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: sourceStakePubKey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that withdraws deactivated Stake tokens.\n   */\n  static withdraw(params: WithdrawStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, toPubkey, lamports, custodianPubkey} =\n      params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false,\n      },\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: false,\n        isWritable: false,\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that deactivates Stake tokens.\n   */\n  static deactivate(params: DeactivateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Deactivate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {PublicKey} from '../publickey';\nimport {SystemProgram} from './system';\nimport {SYSVAR_CLOCK_PUBKEY, SYSVAR_RENT_PUBKEY} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\n\n/**\n * Vote account info\n */\nexport class VoteInit {\n  nodePubkey: PublicKey;\n  authorizedVoter: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number; /** [0, 100] */\n\n  constructor(\n    nodePubkey: PublicKey,\n    authorizedVoter: PublicKey,\n    authorizedWithdrawer: PublicKey,\n    commission: number,\n  ) {\n    this.nodePubkey = nodePubkey;\n    this.authorizedVoter = authorizedVoter;\n    this.authorizedWithdrawer = authorizedWithdrawer;\n    this.commission = commission;\n  }\n}\n\n/**\n * Create vote account transaction params\n */\nexport type CreateVoteAccountParams = {\n  fromPubkey: PublicKey;\n  votePubkey: PublicKey;\n  voteInit: VoteInit;\n  lamports: number;\n};\n\n/**\n * InitializeAccount instruction params\n */\nexport type InitializeAccountParams = {\n  votePubkey: PublicKey;\n  nodePubkey: PublicKey;\n  voteInit: VoteInit;\n};\n\n/**\n * Authorize instruction params\n */\nexport type AuthorizeVoteParams = {\n  votePubkey: PublicKey;\n  /** Current vote or withdraw authority, depending on `voteAuthorizationType` */\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  voteAuthorizationType: VoteAuthorizationType;\n};\n\n/**\n * AuthorizeWithSeed instruction params\n */\nexport type AuthorizeVoteWithSeedParams = {\n  currentAuthorityDerivedKeyBasePubkey: PublicKey;\n  currentAuthorityDerivedKeyOwnerPubkey: PublicKey;\n  currentAuthorityDerivedKeySeed: string;\n  newAuthorizedPubkey: PublicKey;\n  voteAuthorizationType: VoteAuthorizationType;\n  votePubkey: PublicKey;\n};\n\n/**\n * Withdraw from vote account transaction params\n */\nexport type WithdrawFromVoteAccountParams = {\n  votePubkey: PublicKey;\n  authorizedWithdrawerPubkey: PublicKey;\n  lamports: number;\n  toPubkey: PublicKey;\n};\n\n/**\n * Vote Instruction class\n */\nexport class VoteInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a vote instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): VoteInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: VoteInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(VOTE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as VoteInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a VoteInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode an initialize vote instruction and retrieve the instruction params.\n   */\n  static decodeInitializeAccount(\n    instruction: TransactionInstruction,\n  ): InitializeAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 4);\n\n    const {voteInit} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.InitializeAccount,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      nodePubkey: instruction.keys[3].pubkey,\n      voteInit: new VoteInit(\n        new PublicKey(voteInit.nodePubkey),\n        new PublicKey(voteInit.authorizedVoter),\n        new PublicKey(voteInit.authorizedWithdrawer),\n        voteInit.commission,\n      ),\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeVoteParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {newAuthorized, voteAuthorizationType} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType,\n      },\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeVoteWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {\n      voteAuthorizeWithSeedArgs: {\n        currentAuthorityDerivedKeyOwnerPubkey,\n        currentAuthorityDerivedKeySeed,\n        newAuthorized,\n        voteAuthorizationType,\n      },\n    } = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    return {\n      currentAuthorityDerivedKeyBasePubkey: instruction.keys[2].pubkey,\n      currentAuthorityDerivedKeyOwnerPubkey: new PublicKey(\n        currentAuthorityDerivedKeyOwnerPubkey,\n      ),\n      currentAuthorityDerivedKeySeed: currentAuthorityDerivedKeySeed,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType,\n      },\n      votePubkey: instruction.keys[0].pubkey,\n    };\n  }\n\n  /**\n   * Decode a withdraw instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawFromVoteAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedWithdrawerPubkey: instruction.keys[2].pubkey,\n      lamports,\n      toPubkey: instruction.keys[1].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(VoteProgram.programId)) {\n      throw new Error('invalid instruction; programId is not VoteProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid VoteInstructionType's\n */\nexport type VoteInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof VoteInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  'Authorize' | 'AuthorizeWithSeed' | 'InitializeAccount' | 'Withdraw';\n\n/** @internal */\nexport type VoteAuthorizeWithSeedArgs = Readonly<{\n  currentAuthorityDerivedKeyOwnerPubkey: Uint8Array;\n  currentAuthorityDerivedKeySeed: string;\n  newAuthorized: Uint8Array;\n  voteAuthorizationType: number;\n}>;\ntype VoteInstructionInputData = {\n  Authorize: IInstructionInputData & {\n    newAuthorized: Uint8Array;\n    voteAuthorizationType: number;\n  };\n  AuthorizeWithSeed: IInstructionInputData & {\n    voteAuthorizeWithSeedArgs: VoteAuthorizeWithSeedArgs;\n  };\n  InitializeAccount: IInstructionInputData & {\n    voteInit: Readonly<{\n      authorizedVoter: Uint8Array;\n      authorizedWithdrawer: Uint8Array;\n      commission: number;\n      nodePubkey: Uint8Array;\n    }>;\n  };\n  Withdraw: IInstructionInputData & {\n    lamports: number;\n  };\n};\n\nconst VOTE_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in VoteInstructionType]: InstructionType<\n    VoteInstructionInputData[Instruction]\n  >;\n}>({\n  InitializeAccount: {\n    index: 0,\n    layout: BufferLayout.struct<VoteInstructionInputData['InitializeAccount']>([\n      BufferLayout.u32('instruction'),\n      Layout.voteInit(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct<VoteInstructionInputData['Authorize']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('voteAuthorizationType'),\n    ]),\n  },\n  Withdraw: {\n    index: 3,\n    layout: BufferLayout.struct<VoteInstructionInputData['Withdraw']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  AuthorizeWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct<VoteInstructionInputData['AuthorizeWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.voteAuthorizeWithSeedArgs(),\n    ]),\n  },\n});\n\n/**\n * VoteAuthorize type\n */\nexport type VoteAuthorizationType = {\n  /** The VoteAuthorize index (from solana-vote-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid VoteAuthorization layouts.\n */\nexport const VoteAuthorizationLayout = Object.freeze({\n  Voter: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Vote program\n */\nexport class VoteProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Vote program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Vote111111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Vote account\n   *\n   * This is generated from the solana-vote-program VoteState struct as\n   * `VoteState::size_of()`:\n   * https://docs.rs/solana-vote-program/1.9.5/solana_vote_program/vote_state/struct.VoteState.html#method.size_of\n   *\n   * KEEP IN SYNC WITH `VoteState::size_of()` in https://github.com/solana-labs/solana/blob/a474cb24b9238f5edcc982f65c0b37d4a1046f7e/sdk/program/src/vote/state/mod.rs#L340-L342\n   */\n  static space: number = process.env.TEST_LIVE ? 3762 : 3731;\n\n  /**\n   * Generate an Initialize instruction.\n   */\n  static initializeAccount(\n    params: InitializeAccountParams,\n  ): TransactionInstruction {\n    const {votePubkey, nodePubkey, voteInit} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.InitializeAccount;\n    const data = encodeData(type, {\n      voteInit: {\n        nodePubkey: toBuffer(voteInit.nodePubkey.toBuffer()),\n        authorizedVoter: toBuffer(voteInit.authorizedVoter.toBuffer()),\n        authorizedWithdrawer: toBuffer(\n          voteInit.authorizedWithdrawer.toBuffer(),\n        ),\n        commission: voteInit.commission,\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: votePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: nodePubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction that creates a new Vote account.\n   */\n  static createAccount(params: CreateVoteAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.votePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    return transaction.add(\n      this.initializeAccount({\n        votePubkey: params.votePubkey,\n        nodePubkey: params.voteInit.nodePubkey,\n        voteInit: params.voteInit,\n      }),\n    );\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account.\n   */\n  static authorize(params: AuthorizeVoteParams): Transaction {\n    const {\n      votePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      voteAuthorizationType,\n    } = params;\n\n    const type = VOTE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      voteAuthorizationType: voteAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account\n   * where the current Voter or Withdrawer authority is a derived key.\n   */\n  static authorizeWithSeed(params: AuthorizeVoteWithSeedParams): Transaction {\n    const {\n      currentAuthorityDerivedKeyBasePubkey,\n      currentAuthorityDerivedKeyOwnerPubkey,\n      currentAuthorityDerivedKeySeed,\n      newAuthorizedPubkey,\n      voteAuthorizationType,\n      votePubkey,\n    } = params;\n\n    const type = VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      voteAuthorizeWithSeedArgs: {\n        currentAuthorityDerivedKeyOwnerPubkey: toBuffer(\n          currentAuthorityDerivedKeyOwnerPubkey.toBuffer(),\n        ),\n        currentAuthorityDerivedKeySeed: currentAuthorityDerivedKeySeed,\n        newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n        voteAuthorizationType: voteAuthorizationType.index,\n      },\n    });\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {\n        pubkey: currentAuthorityDerivedKeyBasePubkey,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw from a Vote account.\n   */\n  static withdraw(params: WithdrawFromVoteAccountParams): Transaction {\n    const {votePubkey, authorizedWithdrawerPubkey, lamports, toPubkey} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: authorizedWithdrawerPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw safely from a Vote account.\n   *\n   * This function was created as a safeguard for vote accounts running validators, `safeWithdraw`\n   * checks that the withdraw amount will not exceed the specified balance while leaving enough left\n   * to cover rent. If you wish to close the vote account by withdrawing the full amount, call the\n   * `withdraw` method directly.\n   */\n  static safeWithdraw(\n    params: WithdrawFromVoteAccountParams,\n    currentVoteAccountBalance: number,\n    rentExemptMinimum: number,\n  ): Transaction {\n    if (params.lamports > currentVoteAccountBalance - rentExemptMinimum) {\n      throw new Error(\n        'Withdraw will leave vote account with insuffcient funds.',\n      );\n    }\n    return VoteProgram.withdraw(params);\n  }\n}\n","import {Buffer} from 'buffer';\nimport {\n  assert as assertType,\n  optional,\n  string,\n  type as pick,\n} from 'superstruct';\n\nimport * as Layout from './layout';\nimport * as shortvec from './utils/shortvec-encoding';\nimport {PublicKey, PUBLIC_KEY_LENGTH} from './publickey';\n\nexport const VALIDATOR_INFO_KEY = new PublicKey(\n  'Va1idator1nfo111111111111111111111111111111',\n);\n\n/**\n * @internal\n */\ntype ConfigKey = {\n  publicKey: PublicKey;\n  isSigner: boolean;\n};\n\n/**\n * Info used to identity validators.\n */\nexport type Info = {\n  /** validator name */\n  name: string;\n  /** optional, validator website */\n  website?: string;\n  /** optional, extra information the validator chose to share */\n  details?: string;\n  /** optional, used to identify validators on keybase.io */\n  keybaseUsername?: string;\n};\n\nconst InfoString = pick({\n  name: string(),\n  website: optional(string()),\n  details: optional(string()),\n  keybaseUsername: optional(string()),\n});\n\n/**\n * ValidatorInfo class\n */\nexport class ValidatorInfo {\n  /**\n   * validator public key\n   */\n  key: PublicKey;\n  /**\n   * validator information\n   */\n  info: Info;\n\n  /**\n   * Construct a valid ValidatorInfo\n   *\n   * @param key validator public key\n   * @param info validator information\n   */\n  constructor(key: PublicKey, info: Info) {\n    this.key = key;\n    this.info = info;\n  }\n\n  /**\n   * Deserialize ValidatorInfo from the config account data. Exactly two config\n   * keys are required in the data.\n   *\n   * @param buffer config account data\n   * @return null if info was not found\n   */\n  static fromConfigData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): ValidatorInfo | null {\n    let byteArray = [...buffer];\n    const configKeyCount = shortvec.decodeLength(byteArray);\n    if (configKeyCount !== 2) return null;\n\n    const configKeys: Array<ConfigKey> = [];\n    for (let i = 0; i < 2; i++) {\n      const publicKey = new PublicKey(byteArray.slice(0, PUBLIC_KEY_LENGTH));\n      byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n      const isSigner = byteArray.slice(0, 1)[0] === 1;\n      byteArray = byteArray.slice(1);\n      configKeys.push({publicKey, isSigner});\n    }\n\n    if (configKeys[0].publicKey.equals(VALIDATOR_INFO_KEY)) {\n      if (configKeys[1].isSigner) {\n        const rawInfo: any = Layout.rustString().decode(Buffer.from(byteArray));\n        const info = JSON.parse(rawInfo as string);\n        assertType(info, InfoString);\n        return new ValidatorInfo(configKeys[1].publicKey, info);\n      }\n    }\n\n    return null;\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport type {Buffer} from 'buffer';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {toBuffer} from './utils/to-buffer';\n\nexport const VOTE_PROGRAM_ID = new PublicKey(\n  'Vote111111111111111111111111111111111111111',\n);\n\nexport type Lockout = {\n  slot: number;\n  confirmationCount: number;\n};\n\n/**\n * History of how many credits earned by the end of each epoch\n */\nexport type EpochCredits = Readonly<{\n  epoch: number;\n  credits: number;\n  prevCredits: number;\n}>;\n\nexport type AuthorizedVoter = Readonly<{\n  epoch: number;\n  authorizedVoter: PublicKey;\n}>;\n\ntype AuthorizedVoterRaw = Readonly<{\n  authorizedVoter: Uint8Array;\n  epoch: number;\n}>;\n\ntype PriorVoters = Readonly<{\n  buf: PriorVoterRaw[];\n  idx: number;\n  isEmpty: number;\n}>;\n\nexport type PriorVoter = Readonly<{\n  authorizedPubkey: PublicKey;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n}>;\n\ntype PriorVoterRaw = Readonly<{\n  authorizedPubkey: Uint8Array;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n}>;\n\nexport type BlockTimestamp = Readonly<{\n  slot: number;\n  timestamp: number;\n}>;\n\ntype VoteAccountData = Readonly<{\n  authorizedVoters: AuthorizedVoterRaw[];\n  authorizedWithdrawer: Uint8Array;\n  commission: number;\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n  nodePubkey: Uint8Array;\n  priorVoters: PriorVoters;\n  rootSlot: number;\n  rootSlotValid: number;\n  votes: Lockout[];\n}>;\n\n/**\n * See https://github.com/solana-labs/solana/blob/8a12ed029cfa38d4a45400916c2463fb82bbec8c/programs/vote_api/src/vote_state.rs#L68-L88\n *\n * @internal\n */\nconst VoteAccountLayout = BufferLayout.struct<VoteAccountData>([\n  Layout.publicKey('nodePubkey'),\n  Layout.publicKey('authorizedWithdrawer'),\n  BufferLayout.u8('commission'),\n  BufferLayout.nu64(), // votes.length\n  BufferLayout.seq<Lockout>(\n    BufferLayout.struct([\n      BufferLayout.nu64('slot'),\n      BufferLayout.u32('confirmationCount'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'votes',\n  ),\n  BufferLayout.u8('rootSlotValid'),\n  BufferLayout.nu64('rootSlot'),\n  BufferLayout.nu64(), // authorizedVoters.length\n  BufferLayout.seq<AuthorizedVoterRaw>(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      Layout.publicKey('authorizedVoter'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'authorizedVoters',\n  ),\n  BufferLayout.struct<PriorVoters>(\n    [\n      BufferLayout.seq(\n        BufferLayout.struct([\n          Layout.publicKey('authorizedPubkey'),\n          BufferLayout.nu64('epochOfLastAuthorizedSwitch'),\n          BufferLayout.nu64('targetEpoch'),\n        ]),\n        32,\n        'buf',\n      ),\n      BufferLayout.nu64('idx'),\n      BufferLayout.u8('isEmpty'),\n    ],\n    'priorVoters',\n  ),\n  BufferLayout.nu64(), // epochCredits.length\n  BufferLayout.seq<EpochCredits>(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      BufferLayout.nu64('credits'),\n      BufferLayout.nu64('prevCredits'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'epochCredits',\n  ),\n  BufferLayout.struct<BlockTimestamp>(\n    [BufferLayout.nu64('slot'), BufferLayout.nu64('timestamp')],\n    'lastTimestamp',\n  ),\n]);\n\ntype VoteAccountArgs = {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n};\n\n/**\n * VoteAccount class\n */\nexport class VoteAccount {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n\n  /**\n   * @internal\n   */\n  constructor(args: VoteAccountArgs) {\n    this.nodePubkey = args.nodePubkey;\n    this.authorizedWithdrawer = args.authorizedWithdrawer;\n    this.commission = args.commission;\n    this.rootSlot = args.rootSlot;\n    this.votes = args.votes;\n    this.authorizedVoters = args.authorizedVoters;\n    this.priorVoters = args.priorVoters;\n    this.epochCredits = args.epochCredits;\n    this.lastTimestamp = args.lastTimestamp;\n  }\n\n  /**\n   * Deserialize VoteAccount from the account data.\n   *\n   * @param buffer account data\n   * @return VoteAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): VoteAccount {\n    const versionOffset = 4;\n    const va = VoteAccountLayout.decode(toBuffer(buffer), versionOffset);\n\n    let rootSlot: number | null = va.rootSlot;\n    if (!va.rootSlotValid) {\n      rootSlot = null;\n    }\n\n    return new VoteAccount({\n      nodePubkey: new PublicKey(va.nodePubkey),\n      authorizedWithdrawer: new PublicKey(va.authorizedWithdrawer),\n      commission: va.commission,\n      votes: va.votes,\n      rootSlot,\n      authorizedVoters: va.authorizedVoters.map(parseAuthorizedVoter),\n      priorVoters: getPriorVoters(va.priorVoters),\n      epochCredits: va.epochCredits,\n      lastTimestamp: va.lastTimestamp,\n    });\n  }\n}\n\nfunction parseAuthorizedVoter({\n  authorizedVoter,\n  epoch,\n}: AuthorizedVoterRaw): AuthorizedVoter {\n  return {\n    epoch,\n    authorizedVoter: new PublicKey(authorizedVoter),\n  };\n}\n\nfunction parsePriorVoters({\n  authorizedPubkey,\n  epochOfLastAuthorizedSwitch,\n  targetEpoch,\n}: PriorVoterRaw): PriorVoter {\n  return {\n    authorizedPubkey: new PublicKey(authorizedPubkey),\n    epochOfLastAuthorizedSwitch,\n    targetEpoch,\n  };\n}\n\nfunction getPriorVoters({buf, idx, isEmpty}: PriorVoters): PriorVoter[] {\n  if (isEmpty) {\n    return [];\n  }\n\n  return [\n    ...buf.slice(idx + 1).map(parsePriorVoters),\n    ...buf.slice(0, idx).map(parsePriorVoters),\n  ];\n}\n","const endpoint = {\n  http: {\n    devnet: 'http://api.devnet.solana.com',\n    testnet: 'http://api.testnet.solana.com',\n    'mainnet-beta': 'http://api.mainnet-beta.solana.com/',\n  },\n  https: {\n    devnet: 'https://api.devnet.solana.com',\n    testnet: 'https://api.testnet.solana.com',\n    'mainnet-beta': 'https://api.mainnet-beta.solana.com/',\n  },\n};\n\nexport type Cluster = 'devnet' | 'testnet' | 'mainnet-beta';\n\n/**\n * Retrieves the RPC API URL for the specified cluster\n * @param {Cluster} [cluster=\"devnet\"] - The cluster name of the RPC API URL to use. Possible options: 'devnet' | 'testnet' | 'mainnet-beta'\n * @param {boolean} [tls=\"http\"] - Use TLS when connecting to cluster.\n *\n * @returns {string} URL string of the RPC endpoint\n */\nexport function clusterApiUrl(cluster?: Cluster, tls?: boolean): string {\n  const key = tls === false ? 'http' : 'https';\n\n  if (!cluster) {\n    return endpoint[key]['devnet'];\n  }\n\n  const url = endpoint[key][cluster];\n  if (!url) {\n    throw new Error(`Unknown ${key} cluster: ${cluster}`);\n  }\n  return url;\n}\n","import type {Buffer} from 'buffer';\n\nimport {\n  BlockheightBasedTransactionConfirmationStrategy,\n  Connection,\n  DurableNonceTransactionConfirmationStrategy,\n  TransactionConfirmationStrategy,\n} from '../connection';\nimport type {TransactionSignature} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\n\n/**\n * Send and confirm a raw transaction\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Buffer} rawTransaction\n * @param {TransactionConfirmationStrategy} confirmationStrategy\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmRawTransaction(\n  connection: Connection,\n  rawTransaction: Buffer,\n  confirmationStrategy: TransactionConfirmationStrategy,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature>;\n\n/**\n * @deprecated Calling `sendAndConfirmRawTransaction()` without a `confirmationStrategy`\n * is no longer supported and will be removed in a future version.\n */\n// eslint-disable-next-line no-redeclare\nexport async function sendAndConfirmRawTransaction(\n  connection: Connection,\n  rawTransaction: Buffer,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature>;\n\n// eslint-disable-next-line no-redeclare\nexport async function sendAndConfirmRawTransaction(\n  connection: Connection,\n  rawTransaction: Buffer,\n  confirmationStrategyOrConfirmOptions:\n    | TransactionConfirmationStrategy\n    | ConfirmOptions\n    | undefined,\n  maybeConfirmOptions?: ConfirmOptions,\n): Promise<TransactionSignature> {\n  let confirmationStrategy: TransactionConfirmationStrategy | undefined;\n  let options: ConfirmOptions | undefined;\n  if (\n    confirmationStrategyOrConfirmOptions &&\n    Object.prototype.hasOwnProperty.call(\n      confirmationStrategyOrConfirmOptions,\n      'lastValidBlockHeight',\n    )\n  ) {\n    confirmationStrategy =\n      confirmationStrategyOrConfirmOptions as BlockheightBasedTransactionConfirmationStrategy;\n    options = maybeConfirmOptions;\n  } else if (\n    confirmationStrategyOrConfirmOptions &&\n    Object.prototype.hasOwnProperty.call(\n      confirmationStrategyOrConfirmOptions,\n      'nonceValue',\n    )\n  ) {\n    confirmationStrategy =\n      confirmationStrategyOrConfirmOptions as DurableNonceTransactionConfirmationStrategy;\n    options = maybeConfirmOptions;\n  } else {\n    options = confirmationStrategyOrConfirmOptions as\n      | ConfirmOptions\n      | undefined;\n  }\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    minContextSlot: options.minContextSlot,\n  };\n\n  const signature = await connection.sendRawTransaction(\n    rawTransaction,\n    sendOptions,\n  );\n\n  const commitment = options && options.commitment;\n  const confirmationPromise = confirmationStrategy\n    ? connection.confirmTransaction(confirmationStrategy, commitment)\n    : connection.confirmTransaction(signature, commitment);\n  const status = (await confirmationPromise).value;\n\n  if (status.err) {\n    throw new Error(\n      `Raw transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","export * from './account';\nexport * from './blockhash';\nexport * from './bpf-loader-deprecated';\nexport * from './bpf-loader';\nexport * from './connection';\nexport * from './epoch-schedule';\nexport * from './errors';\nexport * from './fee-calculator';\nexport * from './keypair';\nexport * from './loader';\nexport * from './message';\nexport * from './nonce-account';\nexport * from './programs';\nexport * from './publickey';\nexport * from './transaction';\nexport * from './validator-info';\nexport * from './vote-account';\nexport * from './sysvar';\nexport * from './utils';\n\n/**\n * There are 1-billion lamports in one SOL\n */\nexport const LAMPORTS_PER_SOL = 1000000000;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}