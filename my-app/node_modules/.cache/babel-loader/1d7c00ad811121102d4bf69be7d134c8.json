{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/home/conel0826/theblokc-solana-dev-bootcamp/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"/home/conel0826/theblokc-solana-dev-bootcamp/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\nvar _possibleConstructorReturn = require(\"/home/conel0826/theblokc-solana-dev-bootcamp/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\nvar _getPrototypeOf = require(\"/home/conel0826/theblokc-solana-dev-bootcamp/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\nvar _inherits = require(\"/home/conel0826/theblokc-solana-dev-bootcamp/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.hmac = exports.HMAC = void 0;\nvar _assert_js_1 = require(\"./_assert.js\");\nvar utils_js_1 = require(\"./utils.js\");\n// HMAC (RFC 2104)\nvar HMAC = /*#__PURE__*/function (_utils_js_1$Hash) {\n  _inherits(HMAC, _utils_js_1$Hash);\n  function HMAC(hash, _key) {\n    var _this;\n    _classCallCheck(this, HMAC);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(HMAC).call(this));\n    _this.finished = false;\n    _this.destroyed = false;\n    _assert_js_1.default.hash(hash);\n    var key = (0, utils_js_1.toBytes)(_key);\n    _this.iHash = hash.create();\n    if (typeof _this.iHash.update !== 'function') throw new Error('Expected instance of class which extends utils.Hash');\n    _this.blockLen = _this.iHash.blockLen;\n    _this.outputLen = _this.iHash.outputLen;\n    var blockLen = _this.blockLen;\n    var pad = new Uint8Array(blockLen);\n    // blockLen can be bigger than outputLen\n    pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);\n    for (var i = 0; i < pad.length; i++) pad[i] ^= 0x36;\n    _this.iHash.update(pad);\n    // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\n    _this.oHash = hash.create();\n    // Undo internal XOR && apply outer XOR\n    for (var _i = 0; _i < pad.length; _i++) pad[_i] ^= 0x36 ^ 0x5c;\n    _this.oHash.update(pad);\n    pad.fill(0);\n    return _this;\n  }\n  _createClass(HMAC, [{\n    key: \"update\",\n    value: function update(buf) {\n      _assert_js_1.default.exists(this);\n      this.iHash.update(buf);\n      return this;\n    }\n  }, {\n    key: \"digestInto\",\n    value: function digestInto(out) {\n      _assert_js_1.default.exists(this);\n      _assert_js_1.default.bytes(out, this.outputLen);\n      this.finished = true;\n      this.iHash.digestInto(out);\n      this.oHash.update(out);\n      this.oHash.digestInto(out);\n      this.destroy();\n    }\n  }, {\n    key: \"digest\",\n    value: function digest() {\n      var out = new Uint8Array(this.oHash.outputLen);\n      this.digestInto(out);\n      return out;\n    }\n  }, {\n    key: \"_cloneInto\",\n    value: function _cloneInto(to) {\n      // Create new instance without calling constructor since key already in state and we don't know it.\n      to || (to = Object.create(Object.getPrototypeOf(this), {}));\n      var oHash = this.oHash,\n        iHash = this.iHash,\n        finished = this.finished,\n        destroyed = this.destroyed,\n        blockLen = this.blockLen,\n        outputLen = this.outputLen;\n      to = to;\n      to.finished = finished;\n      to.destroyed = destroyed;\n      to.blockLen = blockLen;\n      to.outputLen = outputLen;\n      to.oHash = oHash._cloneInto(to.oHash);\n      to.iHash = iHash._cloneInto(to.iHash);\n      return to;\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.destroyed = true;\n      this.oHash.destroy();\n      this.iHash.destroy();\n    }\n  }]);\n  return HMAC;\n}(utils_js_1.Hash);\nexports.HMAC = HMAC;\n/**\n * HMAC: RFC2104 message authentication code.\n * @param hash - function that would be used e.g. sha256\n * @param key - message key\n * @param message - message data\n */\nvar hmac = function hmac(hash, key, message) {\n  return new HMAC(hash, key).update(message).digest();\n};\nexports.hmac = hmac;\nexports.hmac.create = function (hash, key) {\n  return new HMAC(hash, key);\n};","map":null,"metadata":{},"sourceType":"script"}