{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"/home/conel0826/theblokc-solana-dev-bootcamp/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/defineProperty\");\nvar _slicedToArray = require(\"/home/conel0826/theblokc-solana-dev-bootcamp/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\nvar _classCallCheck = require(\"/home/conel0826/theblokc-solana-dev-bootcamp/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"/home/conel0826/theblokc-solana-dev-bootcamp/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\nvar _possibleConstructorReturn = require(\"/home/conel0826/theblokc-solana-dev-bootcamp/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\nvar _getPrototypeOf = require(\"/home/conel0826/theblokc-solana-dev-bootcamp/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\nvar _inherits = require(\"/home/conel0826/theblokc-solana-dev-bootcamp/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\nvar _wrapNativeSuper = require(\"/home/conel0826/theblokc-solana-dev-bootcamp/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapNativeSuper\");\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function get() {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.deserializeUnchecked = exports.deserialize = exports.serialize = exports.BinaryReader = exports.BinaryWriter = exports.BorshError = exports.baseDecode = exports.baseEncode = void 0;\nvar bn_js_1 = __importDefault(require(\"bn.js\"));\nvar bs58_1 = __importDefault(require(\"bs58\"));\n// TODO: Make sure this polyfill not included when not required\nvar encoding = __importStar(require(\"text-encoding-utf-8\"));\nvar ResolvedTextDecoder = typeof TextDecoder !== \"function\" ? encoding.TextDecoder : TextDecoder;\nvar textDecoder = new ResolvedTextDecoder(\"utf-8\", {\n  fatal: true\n});\nfunction baseEncode(value) {\n  if (typeof value === \"string\") {\n    value = Buffer.from(value, \"utf8\");\n  }\n  return bs58_1.default.encode(Buffer.from(value));\n}\nexports.baseEncode = baseEncode;\nfunction baseDecode(value) {\n  return Buffer.from(bs58_1.default.decode(value));\n}\nexports.baseDecode = baseDecode;\nvar INITIAL_LENGTH = 1024;\nvar BorshError = /*#__PURE__*/function (_Error) {\n  _inherits(BorshError, _Error);\n  function BorshError(message) {\n    var _this;\n    _classCallCheck(this, BorshError);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(BorshError).call(this, message));\n    _this.fieldPath = [];\n    _this.originalMessage = message;\n    return _this;\n  }\n  _createClass(BorshError, [{\n    key: \"addToFieldPath\",\n    value: function addToFieldPath(fieldName) {\n      this.fieldPath.splice(0, 0, fieldName);\n      // NOTE: Modifying message directly as jest doesn't use .toString()\n      this.message = this.originalMessage + \": \" + this.fieldPath.join(\".\");\n    }\n  }]);\n  return BorshError;\n}(_wrapNativeSuper(Error));\nexports.BorshError = BorshError;\n/// Binary encoder.\nvar BinaryWriter = /*#__PURE__*/function () {\n  function BinaryWriter() {\n    _classCallCheck(this, BinaryWriter);\n    this.buf = Buffer.alloc(INITIAL_LENGTH);\n    this.length = 0;\n  }\n  _createClass(BinaryWriter, [{\n    key: \"maybeResize\",\n    value: function maybeResize() {\n      if (this.buf.length < 16 + this.length) {\n        this.buf = Buffer.concat([this.buf, Buffer.alloc(INITIAL_LENGTH)]);\n      }\n    }\n  }, {\n    key: \"writeU8\",\n    value: function writeU8(value) {\n      this.maybeResize();\n      this.buf.writeUInt8(value, this.length);\n      this.length += 1;\n    }\n  }, {\n    key: \"writeU16\",\n    value: function writeU16(value) {\n      this.maybeResize();\n      this.buf.writeUInt16LE(value, this.length);\n      this.length += 2;\n    }\n  }, {\n    key: \"writeU32\",\n    value: function writeU32(value) {\n      this.maybeResize();\n      this.buf.writeUInt32LE(value, this.length);\n      this.length += 4;\n    }\n  }, {\n    key: \"writeU64\",\n    value: function writeU64(value) {\n      this.maybeResize();\n      this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 8)));\n    }\n  }, {\n    key: \"writeU128\",\n    value: function writeU128(value) {\n      this.maybeResize();\n      this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 16)));\n    }\n  }, {\n    key: \"writeU256\",\n    value: function writeU256(value) {\n      this.maybeResize();\n      this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 32)));\n    }\n  }, {\n    key: \"writeU512\",\n    value: function writeU512(value) {\n      this.maybeResize();\n      this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 64)));\n    }\n  }, {\n    key: \"writeBuffer\",\n    value: function writeBuffer(buffer) {\n      // Buffer.from is needed as this.buf.subarray can return plain Uint8Array in browser\n      this.buf = Buffer.concat([Buffer.from(this.buf.subarray(0, this.length)), buffer, Buffer.alloc(INITIAL_LENGTH)]);\n      this.length += buffer.length;\n    }\n  }, {\n    key: \"writeString\",\n    value: function writeString(str) {\n      this.maybeResize();\n      var b = Buffer.from(str, \"utf8\");\n      this.writeU32(b.length);\n      this.writeBuffer(b);\n    }\n  }, {\n    key: \"writeFixedArray\",\n    value: function writeFixedArray(array) {\n      this.writeBuffer(Buffer.from(array));\n    }\n  }, {\n    key: \"writeArray\",\n    value: function writeArray(array, fn) {\n      this.maybeResize();\n      this.writeU32(array.length);\n      var _iterator = _createForOfIteratorHelper(array),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var elem = _step.value;\n          this.maybeResize();\n          fn(elem);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  }, {\n    key: \"toArray\",\n    value: function toArray() {\n      return this.buf.subarray(0, this.length);\n    }\n  }]);\n  return BinaryWriter;\n}();\nexports.BinaryWriter = BinaryWriter;\nfunction handlingRangeError(target, propertyKey, propertyDescriptor) {\n  var originalMethod = propertyDescriptor.value;\n  propertyDescriptor.value = function () {\n    try {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      return originalMethod.apply(this, args);\n    } catch (e) {\n      if (e instanceof RangeError) {\n        var code = e.code;\n        if ([\"ERR_BUFFER_OUT_OF_BOUNDS\", \"ERR_OUT_OF_RANGE\"].indexOf(code) >= 0) {\n          throw new BorshError(\"Reached the end of buffer when deserializing\");\n        }\n      }\n      throw e;\n    }\n  };\n}\nvar BinaryReader = /*#__PURE__*/function () {\n  function BinaryReader(buf) {\n    _classCallCheck(this, BinaryReader);\n    this.buf = buf;\n    this.offset = 0;\n  }\n  _createClass(BinaryReader, [{\n    key: \"readU8\",\n    value: function readU8() {\n      var value = this.buf.readUInt8(this.offset);\n      this.offset += 1;\n      return value;\n    }\n  }, {\n    key: \"readU16\",\n    value: function readU16() {\n      var value = this.buf.readUInt16LE(this.offset);\n      this.offset += 2;\n      return value;\n    }\n  }, {\n    key: \"readU32\",\n    value: function readU32() {\n      var value = this.buf.readUInt32LE(this.offset);\n      this.offset += 4;\n      return value;\n    }\n  }, {\n    key: \"readU64\",\n    value: function readU64() {\n      var buf = this.readBuffer(8);\n      return new bn_js_1.default(buf, \"le\");\n    }\n  }, {\n    key: \"readU128\",\n    value: function readU128() {\n      var buf = this.readBuffer(16);\n      return new bn_js_1.default(buf, \"le\");\n    }\n  }, {\n    key: \"readU256\",\n    value: function readU256() {\n      var buf = this.readBuffer(32);\n      return new bn_js_1.default(buf, \"le\");\n    }\n  }, {\n    key: \"readU512\",\n    value: function readU512() {\n      var buf = this.readBuffer(64);\n      return new bn_js_1.default(buf, \"le\");\n    }\n  }, {\n    key: \"readBuffer\",\n    value: function readBuffer(len) {\n      if (this.offset + len > this.buf.length) {\n        throw new BorshError(\"Expected buffer length \".concat(len, \" isn't within bounds\"));\n      }\n      var result = this.buf.slice(this.offset, this.offset + len);\n      this.offset += len;\n      return result;\n    }\n  }, {\n    key: \"readString\",\n    value: function readString() {\n      var len = this.readU32();\n      var buf = this.readBuffer(len);\n      try {\n        // NOTE: Using TextDecoder to fail on invalid UTF-8\n        return textDecoder.decode(buf);\n      } catch (e) {\n        throw new BorshError(\"Error decoding UTF-8 string: \".concat(e));\n      }\n    }\n  }, {\n    key: \"readFixedArray\",\n    value: function readFixedArray(len) {\n      return new Uint8Array(this.readBuffer(len));\n    }\n  }, {\n    key: \"readArray\",\n    value: function readArray(fn) {\n      var len = this.readU32();\n      var result = Array();\n      for (var i = 0; i < len; ++i) {\n        result.push(fn());\n      }\n      return result;\n    }\n  }]);\n  return BinaryReader;\n}();\n__decorate([handlingRangeError], BinaryReader.prototype, \"readU8\", null);\n__decorate([handlingRangeError], BinaryReader.prototype, \"readU16\", null);\n__decorate([handlingRangeError], BinaryReader.prototype, \"readU32\", null);\n__decorate([handlingRangeError], BinaryReader.prototype, \"readU64\", null);\n__decorate([handlingRangeError], BinaryReader.prototype, \"readU128\", null);\n__decorate([handlingRangeError], BinaryReader.prototype, \"readU256\", null);\n__decorate([handlingRangeError], BinaryReader.prototype, \"readU512\", null);\n__decorate([handlingRangeError], BinaryReader.prototype, \"readString\", null);\n__decorate([handlingRangeError], BinaryReader.prototype, \"readFixedArray\", null);\n__decorate([handlingRangeError], BinaryReader.prototype, \"readArray\", null);\nexports.BinaryReader = BinaryReader;\nfunction capitalizeFirstLetter(string) {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n}\nfunction serializeField(schema, fieldName, value, fieldType, writer) {\n  try {\n    // TODO: Handle missing values properly (make sure they never result in just skipped write)\n    if (typeof fieldType === \"string\") {\n      writer[\"write\".concat(capitalizeFirstLetter(fieldType))](value);\n    } else if (fieldType instanceof Array) {\n      if (typeof fieldType[0] === \"number\") {\n        if (value.length !== fieldType[0]) {\n          throw new BorshError(\"Expecting byte array of length \".concat(fieldType[0], \", but got \").concat(value.length, \" bytes\"));\n        }\n        writer.writeFixedArray(value);\n      } else if (fieldType.length === 2 && typeof fieldType[1] === \"number\") {\n        if (value.length !== fieldType[1]) {\n          throw new BorshError(\"Expecting byte array of length \".concat(fieldType[1], \", but got \").concat(value.length, \" bytes\"));\n        }\n        for (var i = 0; i < fieldType[1]; i++) {\n          serializeField(schema, null, value[i], fieldType[0], writer);\n        }\n      } else {\n        writer.writeArray(value, function (item) {\n          serializeField(schema, fieldName, item, fieldType[0], writer);\n        });\n      }\n    } else if (fieldType.kind !== undefined) {\n      switch (fieldType.kind) {\n        case \"option\":\n          {\n            if (value === null || value === undefined) {\n              writer.writeU8(0);\n            } else {\n              writer.writeU8(1);\n              serializeField(schema, fieldName, value, fieldType.type, writer);\n            }\n            break;\n          }\n        case \"map\":\n          {\n            writer.writeU32(value.size);\n            value.forEach(function (val, key) {\n              serializeField(schema, fieldName, key, fieldType.key, writer);\n              serializeField(schema, fieldName, val, fieldType.value, writer);\n            });\n            break;\n          }\n        default:\n          throw new BorshError(\"FieldType \".concat(fieldType, \" unrecognized\"));\n      }\n    } else {\n      serializeStruct(schema, value, writer);\n    }\n  } catch (error) {\n    if (error instanceof BorshError) {\n      error.addToFieldPath(fieldName);\n    }\n    throw error;\n  }\n}\nfunction serializeStruct(schema, obj, writer) {\n  if (typeof obj.borshSerialize === \"function\") {\n    obj.borshSerialize(writer);\n    return;\n  }\n  var structSchema = schema.get(obj.constructor);\n  if (!structSchema) {\n    throw new BorshError(\"Class \".concat(obj.constructor.name, \" is missing in schema\"));\n  }\n  if (structSchema.kind === \"struct\") {\n    structSchema.fields.map(function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 2),\n        fieldName = _ref2[0],\n        fieldType = _ref2[1];\n      serializeField(schema, fieldName, obj[fieldName], fieldType, writer);\n    });\n  } else if (structSchema.kind === \"enum\") {\n    var name = obj[structSchema.field];\n    for (var idx = 0; idx < structSchema.values.length; ++idx) {\n      var _structSchema$values$ = _slicedToArray(structSchema.values[idx], 2),\n        fieldName = _structSchema$values$[0],\n        fieldType = _structSchema$values$[1];\n      if (fieldName === name) {\n        writer.writeU8(idx);\n        serializeField(schema, fieldName, obj[fieldName], fieldType, writer);\n        break;\n      }\n    }\n  } else {\n    throw new BorshError(\"Unexpected schema kind: \".concat(structSchema.kind, \" for \").concat(obj.constructor.name));\n  }\n}\n/// Serialize given object using schema of the form:\n/// { class_name -> [ [field_name, field_type], .. ], .. }\nfunction serialize(schema, obj) {\n  var Writer = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : BinaryWriter;\n  var writer = new Writer();\n  serializeStruct(schema, obj, writer);\n  return writer.toArray();\n}\nexports.serialize = serialize;\nfunction deserializeField(schema, fieldName, fieldType, reader) {\n  try {\n    if (typeof fieldType === \"string\") {\n      return reader[\"read\".concat(capitalizeFirstLetter(fieldType))]();\n    }\n    if (fieldType instanceof Array) {\n      if (typeof fieldType[0] === \"number\") {\n        return reader.readFixedArray(fieldType[0]);\n      } else if (typeof fieldType[1] === \"number\") {\n        var arr = [];\n        for (var i = 0; i < fieldType[1]; i++) {\n          arr.push(deserializeField(schema, null, fieldType[0], reader));\n        }\n        return arr;\n      } else {\n        return reader.readArray(function () {\n          return deserializeField(schema, fieldName, fieldType[0], reader);\n        });\n      }\n    }\n    if (fieldType.kind === \"option\") {\n      var option = reader.readU8();\n      if (option) {\n        return deserializeField(schema, fieldName, fieldType.type, reader);\n      }\n      return undefined;\n    }\n    if (fieldType.kind === \"map\") {\n      var map = new Map();\n      var length = reader.readU32();\n      for (var _i = 0; _i < length; _i++) {\n        var key = deserializeField(schema, fieldName, fieldType.key, reader);\n        var val = deserializeField(schema, fieldName, fieldType.value, reader);\n        map.set(key, val);\n      }\n      return map;\n    }\n    return deserializeStruct(schema, fieldType, reader);\n  } catch (error) {\n    if (error instanceof BorshError) {\n      error.addToFieldPath(fieldName);\n    }\n    throw error;\n  }\n}\nfunction deserializeStruct(schema, classType, reader) {\n  if (typeof classType.borshDeserialize === \"function\") {\n    return classType.borshDeserialize(reader);\n  }\n  var structSchema = schema.get(classType);\n  if (!structSchema) {\n    throw new BorshError(\"Class \".concat(classType.name, \" is missing in schema\"));\n  }\n  if (structSchema.kind === \"struct\") {\n    var result = {};\n    var _iterator2 = _createForOfIteratorHelper(schema.get(classType).fields),\n      _step2;\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var _step2$value = _slicedToArray(_step2.value, 2),\n          fieldName = _step2$value[0],\n          fieldType = _step2$value[1];\n        result[fieldName] = deserializeField(schema, fieldName, fieldType, reader);\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n    return new classType(result);\n  }\n  if (structSchema.kind === \"enum\") {\n    var idx = reader.readU8();\n    if (idx >= structSchema.values.length) {\n      throw new BorshError(\"Enum index: \".concat(idx, \" is out of range\"));\n    }\n    var _structSchema$values$2 = _slicedToArray(structSchema.values[idx], 2),\n      _fieldName = _structSchema$values$2[0],\n      _fieldType = _structSchema$values$2[1];\n    var fieldValue = deserializeField(schema, _fieldName, _fieldType, reader);\n    return new classType(_defineProperty({}, _fieldName, fieldValue));\n  }\n  throw new BorshError(\"Unexpected schema kind: \".concat(structSchema.kind, \" for \").concat(classType.constructor.name));\n}\n/// Deserializes object from bytes using schema.\nfunction deserialize(schema, classType, buffer) {\n  var Reader = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : BinaryReader;\n  var reader = new Reader(buffer);\n  var result = deserializeStruct(schema, classType, reader);\n  if (reader.offset < buffer.length) {\n    throw new BorshError(\"Unexpected \".concat(buffer.length - reader.offset, \" bytes after deserialized data\"));\n  }\n  return result;\n}\nexports.deserialize = deserialize;\n/// Deserializes object from bytes using schema, without checking the length read\nfunction deserializeUnchecked(schema, classType, buffer) {\n  var Reader = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : BinaryReader;\n  var reader = new Reader(buffer);\n  return deserializeStruct(schema, classType, reader);\n}\nexports.deserializeUnchecked = deserializeUnchecked;","map":null,"metadata":{},"sourceType":"script"}