{"ast":null,"code":"var _jsxFileName = \"/home/conel0826/theblokc-solana-dev-bootcamp/my-app/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ConnectWalletButton = () => {\n  const network = WalletAdapterNetwork.Devnet;\n  const connection = new Connection(network.solanaUrl);\n  const publicKey = new PublicKey('Your Solana Public Key');\n  const handleConnectWallet = async () => {\n    const walletAdapter = new PhantomWalletAdapter();\n    const walletConnected = await walletAdapter.connect();\n    if (walletConnected) {\n      const publicKey = walletAdapter.publicKey || publicKey;\n      console.log('Connected to wallet:', publicKey.toBase58());\n\n      // Use connected wallet here\n\n      walletAdapter.disconnect();\n    }\n  };\n};\n_c = ConnectWalletButton;\nfunction App() {\n  _s();\n  const [selectedOption, setSelectedOption] = useState('');\n  const options = ['Option 1', 'Option 2', 'Option 3'];\n  const handleOptionChange = event => {\n    setSelectedOption(event.target.value);\n  };\n\n  // Declare a state variable for input box\n  const [inputValue, setInputValue] = useState(\"\");\n\n  // Function to handle the onClick event of first button\n  const handleFirstButton = () => {\n    console.log('First Button Clicked');\n  };\n\n  // Function to handle the onClick event of second button\n  const handleSecondButton = () => {\n    console.log('Second Button Clicked');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"First,\", ' ', /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSecondButton,\n      children: \"click here to connect your local phantom wallet\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), \", then,\", ' ', /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: inputValue,\n      onChange: e => setInputValue(e.target.value),\n      placeholder: \"input any text here\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), \", afterward,\", ' ', /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleFirstButton,\n      children: \"click here to submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), \", note this submission, and more alike, are sent to the Solana blockchain, with an associated public address; If such exists, you may,\", ' ', /*#__PURE__*/_jsxDEV(\"select\", {\n      value: selectedOption,\n      onChange: handleOptionChange,\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        hidden: true,\n        value: \"\",\n        children: \"view and select here\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), options.map((option, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: option,\n        children: option\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), \", and here its associated submitted text: \", selectedOption]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"U2CIiWD5hUmgDdlgHAuejUCINuU=\");\n_c2 = App;\nexport default App;\nvar _c, _c2;\n$RefreshReg$(_c, \"ConnectWalletButton\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","ConnectWalletButton","network","WalletAdapterNetwork","Devnet","connection","Connection","solanaUrl","publicKey","PublicKey","handleConnectWallet","walletAdapter","PhantomWalletAdapter","walletConnected","connect","console","log","toBase58","disconnect","_c","App","_s","selectedOption","setSelectedOption","options","handleOptionChange","event","target","value","inputValue","setInputValue","handleFirstButton","handleSecondButton","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","e","placeholder","hidden","map","option","index","_c2","$RefreshReg$"],"sources":["/home/conel0826/theblokc-solana-dev-bootcamp/my-app/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\n\nconst ConnectWalletButton = () => {\n  const network = WalletAdapterNetwork.Devnet;\n  const connection = new Connection(network.solanaUrl);\n  const publicKey = new PublicKey('Your Solana Public Key');\n\n  const handleConnectWallet = async () => {\n    const walletAdapter = new PhantomWalletAdapter();\n    const walletConnected = await walletAdapter.connect();\n\n    if (walletConnected) {\n      const publicKey = walletAdapter.publicKey || publicKey;\n      console.log('Connected to wallet:', publicKey.toBase58());\n\n      // Use connected wallet here\n\n      walletAdapter.disconnect();\n    }\n  };\n}\n\nfunction App() {\n  const [selectedOption, setSelectedOption] = useState('');\n\n  const options = ['Option 1', 'Option 2', 'Option 3'];\n\n  const handleOptionChange = (event) => {\n    setSelectedOption(event.target.value);\n  };\n  \n  // Declare a state variable for input box\n  const [inputValue, setInputValue] = useState(\"\");\n\n  // Function to handle the onClick event of first button\n  const handleFirstButton = () => {\n    console.log('First Button Clicked');\n  };\n\n  // Function to handle the onClick event of second button\n  const handleSecondButton = () => {\n    console.log('Second Button Clicked');\n  };\n\n  return (\n    <div>\n      First,{' '}\n      <button onClick={handleSecondButton}>\n        click here to connect your local phantom wallet\n      </button>\n      , then,{' '}\n      <input \n        type=\"text\" \n        value={inputValue} \n        onChange={ e => setInputValue(e.target.value)}\n        placeholder=\"input any text here\"\n      />\n      , afterward,{' '}\n      <button onClick={handleFirstButton}>\n        click here to submit\n      </button>\n      , note this submission, and more alike, \n      are sent to the Solana blockchain, \n      with an associated public address; \n      If such exists, you may,{' '}\n      <select \n        value={selectedOption} \n        onChange={handleOptionChange}\n      >\n        <option hidden value=''>view and select here</option>\n        {options.map((option, index) => (\n          <option key={index} value={option}>\n            {option}\n          </option>\n        ))}\n      </select>\n      , and here its associated submitted text: {selectedOption}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}