{"ast":null,"code":"var _jsxFileName = \"/home/conel0826/theblokc-solana-dev-bootcamp/my-app/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\n// import { ConnectionProvider, WalletProvider } from '@solana/wallet-adapter-react';\nimport idl from './idl.json';\nimport { Program, web3 } from '@project-serum/anchor';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst programID = new web3.PublicKey('EVyUf1GBFMEdThER6pbEPbervBFj5Rc8bv67M2Lo1odK');\n\n// Create a connection to the Solana network\nconst connection = new web3.Connection(web3.clusterApiUrl('devnet'));\n\n// Create a provider using the Solana wallet extension\nvar provider;\nconst getProvider = () => {\n  var _window$solana;\n  provider = new web3.WalletProvider(connection, (_window$solana = window.solana) === null || _window$solana === void 0 ? void 0 : _window$solana.isPhantom);\n};\n\n// Create a program instance\n\n// Call the initialize function\n// const userInput = \"Hello, Solana!\";\n// await program.rpc.initialize(userInput);\n\nfunction App() {\n  _s();\n  const [selectedOption, setSelectedOption] = useState('');\n  const options = ['Option 1', 'Option 2', 'Option 3'];\n  const handleOptionChange = event => {\n    setSelectedOption(event.target.value);\n  };\n  const program = new Program(idl, programID, provider);\n\n  // Declare a state variable for input box\n  const [userInputText, setInputValue] = useState(\"\");\n\n  // Function to handle the onClick event of first button\n  const submission = async () => {\n    await program.rpc.initialize(userInputText);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"First,\", ' ', /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: getProvider,\n      children: \"click here to connect your local phantom wallet\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), \", then,\", ' ', /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: inputValue,\n      onChange: e => setInputValue(e.target.value),\n      placeholder: \"input any text here\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), \", afterward,\", ' ', /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: submission,\n      children: \"click here to submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), \", note this submission, and more alike, are sent to the Solana blockchain, with an associated public address; If such exists, you may,\", ' ', /*#__PURE__*/_jsxDEV(\"select\", {\n      value: selectedOption,\n      onChange: handleOptionChange,\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        hidden: true,\n        value: \"\",\n        children: \"view and select here\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), options.map((option, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: option,\n        children: option\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), \", and here its associated submitted text: \", selectedOption]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"URmTD3e8qGD8V/rgguCaWBpWcbE=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","idl","Program","web3","jsxDEV","_jsxDEV","programID","PublicKey","connection","Connection","clusterApiUrl","provider","getProvider","_window$solana","WalletProvider","window","solana","isPhantom","App","_s","selectedOption","setSelectedOption","options","handleOptionChange","event","target","value","program","userInputText","setInputValue","submission","rpc","initialize","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","type","inputValue","onChange","e","placeholder","hidden","map","option","index","_c","$RefreshReg$"],"sources":["/home/conel0826/theblokc-solana-dev-bootcamp/my-app/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\n// import { ConnectionProvider, WalletProvider } from '@solana/wallet-adapter-react';\nimport idl from './idl.json'\nimport { Program, web3 } from '@project-serum/anchor';\n\nconst programID = new web3.PublicKey('EVyUf1GBFMEdThER6pbEPbervBFj5Rc8bv67M2Lo1odK');\n\n// Create a connection to the Solana network\nconst connection = new web3.Connection(web3.clusterApiUrl('devnet'));\n\n// Create a provider using the Solana wallet extension\nvar provider;\n\nconst getProvider = () => {\n  provider = new web3.WalletProvider(connection, window.solana?.isPhantom); \n};\n\n\n// Create a program instance\n\n\n// Call the initialize function\n// const userInput = \"Hello, Solana!\";\n// await program.rpc.initialize(userInput);\n\nfunction App() {\n  const [selectedOption, setSelectedOption] = useState('');\n\n  const options = ['Option 1', 'Option 2', 'Option 3'];\n\n  const handleOptionChange = (event) => {\n    setSelectedOption(event.target.value);\n  };\n\n  const program = new Program(idl, programID, provider);\n  \n  // Declare a state variable for input box\n  const [userInputText, setInputValue] = useState(\"\");\n  \n   \n\n  // Function to handle the onClick event of first button\n  const submission = async () => {\n    await program.rpc.initialize(userInputText);\n  };\n\n  return (\n    <div>\n      First,{' '}\n      <button onClick={getProvider}>\n        click here to connect your local phantom wallet\n      </button>\n      , then,{' '}\n      <input \n        type=\"text\" \n        value={inputValue} \n        onChange={ e => setInputValue(e.target.value)}\n        placeholder=\"input any text here\"\n      />\n      , afterward,{' '}\n      <button onClick={submission}>\n        click here to submit\n      </button>\n      , note this submission, and more alike, \n      are sent to the Solana blockchain, \n      with an associated public address; \n      If such exists, you may,{' '}\n      <select \n        value={selectedOption} \n        onChange={handleOptionChange}\n      >\n        <option hidden value=''>view and select here</option>\n        {options.map((option, index) => (\n          <option key={index} value={option}>\n            {option}\n          </option>\n        ))}\n      </select>\n      , and here its associated submitted text: {selectedOption}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}